/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2024-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2024_07.api;

import com.criteo.api.retailmedia.v2024_07.ApiCallback;
import com.criteo.api.retailmedia.v2024_07.ApiClient;
import com.criteo.api.retailmedia.v2024_07.ApiException;
import com.criteo.api.retailmedia.v2024_07.ApiResponse;
import com.criteo.api.retailmedia.v2024_07.Configuration;
import com.criteo.api.retailmedia.v2024_07.Pair;
import com.criteo.api.retailmedia.v2024_07.ProgressRequestBody;
import com.criteo.api.retailmedia.v2024_07.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.v2024_07.model.AddRemoveKeywordsModelRequest;
import com.criteo.api.retailmedia.v2024_07.model.AddToBasketIdsUpdateModel202110Request;
import com.criteo.api.retailmedia.v2024_07.model.AddToBasketTarget202110Request;
import com.criteo.api.retailmedia.v2024_07.model.AddToBasketTarget202110Response;
import com.criteo.api.retailmedia.v2024_07.model.AssetResponse;
import com.criteo.api.retailmedia.v2024_07.model.AuctionLineItemCreateModelRequest;
import com.criteo.api.retailmedia.v2024_07.model.AuctionLineItemPagedListResponse;
import com.criteo.api.retailmedia.v2024_07.model.AuctionLineItemResponse;
import com.criteo.api.retailmedia.v2024_07.model.AuctionLineItemUpdateModelRequest;
import com.criteo.api.retailmedia.v2024_07.model.AudienceIdsUpdateModel202110Request;
import com.criteo.api.retailmedia.v2024_07.model.AudienceTarget202110Request;
import com.criteo.api.retailmedia.v2024_07.model.AudienceTarget202110Response;
import com.criteo.api.retailmedia.v2024_07.model.BalanceCampaign202110ListRequest;
import com.criteo.api.retailmedia.v2024_07.model.BalanceCampaign202110PagedListResponse;
import com.criteo.api.retailmedia.v2024_07.model.Category202204;
import com.criteo.api.retailmedia.v2024_07.model.Category202204ListResponse;
import com.criteo.api.retailmedia.v2024_07.model.CommonLineItemPagedListResponse;
import com.criteo.api.retailmedia.v2024_07.model.CommonLineItemResponse;
import com.criteo.api.retailmedia.v2024_07.model.Creative202110ListResponse;
import com.criteo.api.retailmedia.v2024_07.model.Creative202210Response;
import com.criteo.api.retailmedia.v2024_07.model.CreativeCreateModel202207;
import com.criteo.api.retailmedia.v2024_07.model.CreativeUpdateModel202207;
import com.criteo.api.retailmedia.v2024_07.model.ExternalRetailerPages202110;
import java.io.File;
import com.criteo.api.retailmedia.v2024_07.model.JsonApiPageResponseOfBrand;
import com.criteo.api.retailmedia.v2024_07.model.JsonApiPageResponseOfCampaignV202301;
import com.criteo.api.retailmedia.v2024_07.model.JsonApiPageResponseOfRetailer;
import com.criteo.api.retailmedia.v2024_07.model.JsonApiRequestOfCatalogRequest;
import com.criteo.api.retailmedia.v2024_07.model.JsonApiSingleResponseOfCampaignV202301;
import com.criteo.api.retailmedia.v2024_07.model.JsonApiSingleResponseOfCatalogStatus;
import com.criteo.api.retailmedia.v2024_07.model.KeywordTarget202110Request;
import com.criteo.api.retailmedia.v2024_07.model.KeywordTarget202110Response;
import com.criteo.api.retailmedia.v2024_07.model.KeywordsModelResponse;
import com.criteo.api.retailmedia.v2024_07.model.PostCampaignV202301;
import com.criteo.api.retailmedia.v2024_07.model.ProductResourceOutcome;
import com.criteo.api.retailmedia.v2024_07.model.PromotedProductResourceCollectionInput;
import com.criteo.api.retailmedia.v2024_07.model.PromotedProductResourceCollectionOutcome;
import com.criteo.api.retailmedia.v2024_07.model.PutCampaignV202301;
import com.criteo.api.retailmedia.v2024_07.model.ResourceOutcome;
import com.criteo.api.retailmedia.v2024_07.model.SetBidsModelRequest;
import com.criteo.api.retailmedia.v2024_07.model.StoreIdsUpdateModel202110Request;
import com.criteo.api.retailmedia.v2024_07.model.StoreTarget202110Request;
import com.criteo.api.retailmedia.v2024_07.model.StoreTarget202110Response;
import com.criteo.api.retailmedia.v2024_07.model.TemplateListResponse;
import com.criteo.api.retailmedia.v2024_07.model.TemplateResponse;
import com.criteo.api.retailmedia.v2024_07.model.ValueResourceInputOfCampaignBudgetOverrides;
import com.criteo.api.retailmedia.v2024_07.model.ValueResourceInputOfLineItemBudgetOverrides;
import com.criteo.api.retailmedia.v2024_07.model.ValueResourceOutcomeOfCampaignBudgetOverrides;
import com.criteo.api.retailmedia.v2024_07.model.ValueResourceOutcomeOfLineItemBudgetOverrides;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addRemoveKeywords
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveKeywordsCall(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRemoveKeywordsModelRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{id}/keywords/add-remove"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRemoveKeywordsValidateBeforeCall(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRemoveKeywords(Async)");
        }

        return addRemoveKeywordsCall(id, addRemoveKeywordsModelRequest, _callback);

    }

    /**
     * 
     * Add or Remove keywords from the line item in bulk
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @return ResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcome addRemoveKeywords(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest) throws ApiException {
        ApiResponse<ResourceOutcome> localVarResp = addRemoveKeywordsWithHttpInfo(id, addRemoveKeywordsModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add or Remove keywords from the line item in bulk
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @return ApiResponse&lt;ResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcome> addRemoveKeywordsWithHttpInfo(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest) throws ApiException {
        okhttp3.Call localVarCall = addRemoveKeywordsValidateBeforeCall(id, addRemoveKeywordsModelRequest, null);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add or Remove keywords from the line item in bulk
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveKeywordsAsync(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest, final ApiCallback<ResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRemoveKeywordsValidateBeforeCall(id, addRemoveKeywordsModelRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendAddToBasketTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendAddToBasketTargetsByLineItemIdCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addToBasketIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket/append"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendAddToBasketTargetsByLineItemIdValidateBeforeCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling appendAddToBasketTargetsByLineItemId(Async)");
        }

        return appendAddToBasketTargetsByLineItemIdCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);

    }

    /**
     * 
     * This endpoint appends one or more add to basket ids to targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response appendAddToBasketTargetsByLineItemId(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = appendAddToBasketTargetsByLineItemIdWithHttpInfo(lineItemId, addToBasketIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more add to basket ids to targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> appendAddToBasketTargetsByLineItemIdWithHttpInfo(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = appendAddToBasketTargetsByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more add to basket ids to targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendAddToBasketTargetsByLineItemIdAsync(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendAddToBasketTargetsByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendAudienceTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendAudienceTargetsByLineItemIdCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences/append"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendAudienceTargetsByLineItemIdValidateBeforeCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling appendAudienceTargetsByLineItemId(Async)");
        }

        return appendAudienceTargetsByLineItemIdCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);

    }

    /**
     * 
     * This endpoint appends one or more audiences ids to targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response appendAudienceTargetsByLineItemId(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = appendAudienceTargetsByLineItemIdWithHttpInfo(lineItemId, audienceIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more audiences ids to targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> appendAudienceTargetsByLineItemIdWithHttpInfo(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = appendAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more audiences ids to targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendAudienceTargetsByLineItemIdAsync(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendCampaignsByBalanceId
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendCampaignsByBalanceIdCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceCampaign202110ListRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/balances/{balance-id}/campaigns/append"
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendCampaignsByBalanceIdValidateBeforeCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling appendCampaignsByBalanceId(Async)");
        }

        return appendCampaignsByBalanceIdCall(balanceId, balanceCampaign202110ListRequest, _callback);

    }

    /**
     * 
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return BalanceCampaign202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceCampaign202110PagedListResponse appendCampaignsByBalanceId(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        ApiResponse<BalanceCampaign202110PagedListResponse> localVarResp = appendCampaignsByBalanceIdWithHttpInfo(balanceId, balanceCampaign202110ListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return ApiResponse&lt;BalanceCampaign202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceCampaign202110PagedListResponse> appendCampaignsByBalanceIdWithHttpInfo(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = appendCampaignsByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, null);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendCampaignsByBalanceIdAsync(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback<BalanceCampaign202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendCampaignsByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendKeywordTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendKeywordTargetsByLineItemIdCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordTarget202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/auction-line-items/{line-item-id}/targeting/keywords/append"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendKeywordTargetsByLineItemIdValidateBeforeCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling appendKeywordTargetsByLineItemId(Async)");
        }

        return appendKeywordTargetsByLineItemIdCall(lineItemId, keywordTarget202110Request, _callback);

    }

    /**
     * 
     * This endpoint appends one or more keywords to targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return KeywordTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public KeywordTarget202110Response appendKeywordTargetsByLineItemId(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        ApiResponse<KeywordTarget202110Response> localVarResp = appendKeywordTargetsByLineItemIdWithHttpInfo(lineItemId, keywordTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more keywords to targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return ApiResponse&lt;KeywordTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordTarget202110Response> appendKeywordTargetsByLineItemIdWithHttpInfo(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = appendKeywordTargetsByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, null);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more keywords to targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendKeywordTargetsByLineItemIdAsync(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback<KeywordTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendKeywordTargetsByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendPromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendPromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{line-item-id}/products/append"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendPromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling appendPromotedProducts(Async)");
        }

        return appendPromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Append a collection of promoted products to a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ProductResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
     </table>
     */
    public ProductResourceOutcome appendPromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        ApiResponse<ProductResourceOutcome> localVarResp = appendPromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Append a collection of promoted products to a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;ProductResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductResourceOutcome> appendPromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = appendPromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        Type localVarReturnType = new TypeToken<ProductResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Append a collection of promoted products to a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendPromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<ProductResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendPromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        Type localVarReturnType = new TypeToken<ProductResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendStoreTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendStoreTargetsByLineItemIdCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storeIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores/append"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendStoreTargetsByLineItemIdValidateBeforeCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling appendStoreTargetsByLineItemId(Async)");
        }

        return appendStoreTargetsByLineItemIdCall(lineItemId, storeIdsUpdateModel202110Request, _callback);

    }

    /**
     * 
     * This endpoint appends one or more store ids to targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response appendStoreTargetsByLineItemId(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = appendStoreTargetsByLineItemIdWithHttpInfo(lineItemId, storeIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more store ids to targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> appendStoreTargetsByLineItemIdWithHttpInfo(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = appendStoreTargetsByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more store ids to targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendStoreTargetsByLineItemIdAsync(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendStoreTargetsByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAsset
     * @param assetFile The asset binary content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetCall(File assetFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetFile != null) {
            localVarFormParams.put("AssetFile", assetFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetValidateBeforeCall(File assetFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetFile' is set
        if (assetFile == null) {
            throw new ApiException("Missing the required parameter 'assetFile' when calling createAsset(Async)");
        }

        return createAssetCall(assetFile, _callback);

    }

    /**
     * 
     * Creates an asset
     * @param assetFile The asset binary content (required)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse createAsset(File assetFile) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = createAssetWithHttpInfo(assetFile);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an asset
     * @param assetFile The asset binary content (required)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> createAssetWithHttpInfo(File assetFile) throws ApiException {
        okhttp3.Call localVarCall = createAssetValidateBeforeCall(assetFile, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an asset
     * @param assetFile The asset binary content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetAsync(File assetFile, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetValidateBeforeCall(assetFile, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param postCampaignV202301 The campaign settings to create a campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignsByAccountIdCall(String accountId, PostCampaignV202301 postCampaignV202301, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCampaignV202301;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{account-id}/campaigns"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCampaignsByAccountIdValidateBeforeCall(String accountId, PostCampaignV202301 postCampaignV202301, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createCampaignsByAccountId(Async)");
        }

        return createCampaignsByAccountIdCall(accountId, postCampaignV202301, _callback);

    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param postCampaignV202301 The campaign settings to create a campaign with (optional)
     * @return JsonApiSingleResponseOfCampaignV202301
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaignV202301 createCampaignsByAccountId(String accountId, PostCampaignV202301 postCampaignV202301) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaignV202301> localVarResp = createCampaignsByAccountIdWithHttpInfo(accountId, postCampaignV202301);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param postCampaignV202301 The campaign settings to create a campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaignV202301&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaignV202301> createCampaignsByAccountIdWithHttpInfo(String accountId, PostCampaignV202301 postCampaignV202301) throws ApiException {
        okhttp3.Call localVarCall = createCampaignsByAccountIdValidateBeforeCall(accountId, postCampaignV202301, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaignV202301>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param postCampaignV202301 The campaign settings to create a campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignsByAccountIdAsync(String accountId, PostCampaignV202301 postCampaignV202301, final ApiCallback<JsonApiSingleResponseOfCampaignV202301> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCampaignsByAccountIdValidateBeforeCall(accountId, postCampaignV202301, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaignV202301>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreative
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreativeCall(String accountId, CreativeCreateModel202207 creativeCreateModel202207, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creativeCreateModel202207;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{account-id}/creatives"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreativeValidateBeforeCall(String accountId, CreativeCreateModel202207 creativeCreateModel202207, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createCreative(Async)");
        }

        return createCreativeCall(accountId, creativeCreateModel202207, _callback);

    }

    /**
     * 
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @return Creative202210Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public Creative202210Response createCreative(String accountId, CreativeCreateModel202207 creativeCreateModel202207) throws ApiException {
        ApiResponse<Creative202210Response> localVarResp = createCreativeWithHttpInfo(accountId, creativeCreateModel202207);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @return ApiResponse&lt;Creative202210Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202210Response> createCreativeWithHttpInfo(String accountId, CreativeCreateModel202207 creativeCreateModel202207) throws ApiException {
        okhttp3.Call localVarCall = createCreativeValidateBeforeCall(accountId, creativeCreateModel202207, null);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreativeAsync(String accountId, CreativeCreateModel202207 creativeCreateModel202207, final ApiCallback<Creative202210Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreativeValidateBeforeCall(accountId, creativeCreateModel202207, _callback);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAddToBasketTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAddToBasketTargetsByLineItemIdCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addToBasketIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket/delete"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAddToBasketTargetsByLineItemIdValidateBeforeCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteAddToBasketTargetsByLineItemId(Async)");
        }

        return deleteAddToBasketTargetsByLineItemIdCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);

    }

    /**
     * 
     * This endpoint removes one or more add to basket ids from targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response deleteAddToBasketTargetsByLineItemId(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = deleteAddToBasketTargetsByLineItemIdWithHttpInfo(lineItemId, addToBasketIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more add to basket ids from targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> deleteAddToBasketTargetsByLineItemIdWithHttpInfo(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = deleteAddToBasketTargetsByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more add to basket ids from targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAddToBasketTargetsByLineItemIdAsync(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAddToBasketTargetsByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAudienceTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAudienceTargetsByLineItemIdCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences/delete"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAudienceTargetsByLineItemIdValidateBeforeCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteAudienceTargetsByLineItemId(Async)");
        }

        return deleteAudienceTargetsByLineItemIdCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);

    }

    /**
     * 
     * This endpoint removes one or more audiences ids from targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response deleteAudienceTargetsByLineItemId(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = deleteAudienceTargetsByLineItemIdWithHttpInfo(lineItemId, audienceIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more audiences ids from targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> deleteAudienceTargetsByLineItemIdWithHttpInfo(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = deleteAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more audiences ids from targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAudienceTargetsByLineItemIdAsync(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCampaignsByBalanceId
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignsByBalanceIdCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceCampaign202110ListRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/balances/{balance-id}/campaigns/delete"
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCampaignsByBalanceIdValidateBeforeCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling deleteCampaignsByBalanceId(Async)");
        }

        return deleteCampaignsByBalanceIdCall(balanceId, balanceCampaign202110ListRequest, _callback);

    }

    /**
     * 
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return BalanceCampaign202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceCampaign202110PagedListResponse deleteCampaignsByBalanceId(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        ApiResponse<BalanceCampaign202110PagedListResponse> localVarResp = deleteCampaignsByBalanceIdWithHttpInfo(balanceId, balanceCampaign202110ListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return ApiResponse&lt;BalanceCampaign202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceCampaign202110PagedListResponse> deleteCampaignsByBalanceIdWithHttpInfo(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteCampaignsByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, null);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignsByBalanceIdAsync(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback<BalanceCampaign202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCampaignsByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKeywordTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeywordTargetsByLineItemIdCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordTarget202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/auction-line-items/{line-item-id}/targeting/keywords/delete"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeywordTargetsByLineItemIdValidateBeforeCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteKeywordTargetsByLineItemId(Async)");
        }

        return deleteKeywordTargetsByLineItemIdCall(lineItemId, keywordTarget202110Request, _callback);

    }

    /**
     * 
     * This endpoint removes one or more keywords from targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return KeywordTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public KeywordTarget202110Response deleteKeywordTargetsByLineItemId(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        ApiResponse<KeywordTarget202110Response> localVarResp = deleteKeywordTargetsByLineItemIdWithHttpInfo(lineItemId, keywordTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more keywords from targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return ApiResponse&lt;KeywordTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordTarget202110Response> deleteKeywordTargetsByLineItemIdWithHttpInfo(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = deleteKeywordTargetsByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, null);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more keywords from targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeywordTargetsByLineItemIdAsync(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback<KeywordTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeywordTargetsByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{line-item-id}/products/delete"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deletePromotedProducts(Async)");
        }

        return deletePromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Remove a collection of promoted products from a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
     </table>
     */
    public void deletePromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        deletePromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
    }

    /**
     * 
     * Remove a collection of promoted products from a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = deletePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a collection of promoted products from a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStoreTargetByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoreTargetByLineItemIdCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storeIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores/delete"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoreTargetByLineItemIdValidateBeforeCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteStoreTargetByLineItemId(Async)");
        }

        return deleteStoreTargetByLineItemIdCall(lineItemId, storeIdsUpdateModel202110Request, _callback);

    }

    /**
     * 
     * This endpoint removes one or more store ids from targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response deleteStoreTargetByLineItemId(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = deleteStoreTargetByLineItemIdWithHttpInfo(lineItemId, storeIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more store ids from targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> deleteStoreTargetByLineItemIdWithHttpInfo(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = deleteStoreTargetByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more store ids from targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoreTargetByLineItemIdAsync(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoreTargetByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchKeywords
     * @param id ID of the line item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchKeywordsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{id}/keywords"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchKeywordsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchKeywords(Async)");
        }

        return fetchKeywordsCall(id, _callback);

    }

    /**
     * 
     * Fetch keywords associated with the specified line item
     * @param id ID of the line item (required)
     * @return KeywordsModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsModelResponse fetchKeywords(String id) throws ApiException {
        ApiResponse<KeywordsModelResponse> localVarResp = fetchKeywordsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch keywords associated with the specified line item
     * @param id ID of the line item (required)
     * @return ApiResponse&lt;KeywordsModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsModelResponse> fetchKeywordsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchKeywordsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch keywords associated with the specified line item
     * @param id ID of the line item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchKeywordsAsync(String id, final ApiCallback<KeywordsModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchKeywordsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPromotedProducts
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPromotedProductsCall(String lineItemId, String fields, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{line-item-id}/products"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPromotedProductsValidateBeforeCall(String lineItemId, String fields, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling fetchPromotedProducts(Async)");
        }

        return fetchPromotedProductsCall(lineItemId, fields, limit, offset, _callback);

    }

    /**
     * 
     * Retrieve a page of promoted products for a line item
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @return PromotedProductResourceCollectionOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
     </table>
     */
    public PromotedProductResourceCollectionOutcome fetchPromotedProducts(String lineItemId, String fields, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PromotedProductResourceCollectionOutcome> localVarResp = fetchPromotedProductsWithHttpInfo(lineItemId, fields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a page of promoted products for a line item
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @return ApiResponse&lt;PromotedProductResourceCollectionOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromotedProductResourceCollectionOutcome> fetchPromotedProductsWithHttpInfo(String lineItemId, String fields, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = fetchPromotedProductsValidateBeforeCall(lineItemId, fields, limit, offset, null);
        Type localVarReturnType = new TypeToken<PromotedProductResourceCollectionOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a page of promoted products for a line item
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPromotedProductsAsync(String lineItemId, String fields, Integer limit, Integer offset, final ApiCallback<PromotedProductResourceCollectionOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPromotedProductsValidateBeforeCall(lineItemId, fields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PromotedProductResourceCollectionOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountCreatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCreativesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{account-id}/creatives"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountCreativesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountCreatives(Async)");
        }

        return getAccountCreativesCall(accountId, _callback);

    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @return Creative202110ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public Creative202110ListResponse getAccountCreatives(String accountId) throws ApiException {
        ApiResponse<Creative202110ListResponse> localVarResp = getAccountCreativesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @return ApiResponse&lt;Creative202110ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202110ListResponse> getAccountCreativesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountCreativesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Creative202110ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCreativesAsync(String accountId, final ApiCallback<Creative202110ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountCreativesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Creative202110ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddToBasketTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddToBasketTargetsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddToBasketTargetsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getAddToBasketTargetsByLineItemId(Async)");
        }

        return getAddToBasketTargetsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * This endpoint gets the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response getAddToBasketTargetsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = getAddToBasketTargetsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> getAddToBasketTargetsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getAddToBasketTargetsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddToBasketTargetsByLineItemIdAsync(String lineItemId, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddToBasketTargetsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalRetailerPagesByRetailerId
     * @param retailerId The retailers to fetch pages for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalRetailerPagesByRetailerIdCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/retailers/{retailerId}/pages"
            .replace("{" + "retailerId" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalRetailerPagesByRetailerIdValidateBeforeCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApi202110ExternalRetailerPagesByRetailerId(Async)");
        }

        return getApi202110ExternalRetailerPagesByRetailerIdCall(retailerId, _callback);

    }

    /**
     * 
     * Get the page types available for the given retailer
     * @param retailerId The retailers to fetch pages for (required)
     * @return ExternalRetailerPages202110
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ExternalRetailerPages202110 getApi202110ExternalRetailerPagesByRetailerId(Integer retailerId) throws ApiException {
        ApiResponse<ExternalRetailerPages202110> localVarResp = getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo(retailerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the page types available for the given retailer
     * @param retailerId The retailers to fetch pages for (required)
     * @return ApiResponse&lt;ExternalRetailerPages202110&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalRetailerPages202110> getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo(Integer retailerId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalRetailerPagesByRetailerIdValidateBeforeCall(retailerId, null);
        Type localVarReturnType = new TypeToken<ExternalRetailerPages202110>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the page types available for the given retailer
     * @param retailerId The retailers to fetch pages for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalRetailerPagesByRetailerIdAsync(Integer retailerId, final ApiCallback<ExternalRetailerPages202110> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalRetailerPagesByRetailerIdValidateBeforeCall(retailerId, _callback);
        Type localVarReturnType = new TypeToken<ExternalRetailerPages202110>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202204ExternalCategorieByCategoryId
     * @param categoryId ID of the desired category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategorieByCategoryIdCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202204ExternalCategorieByCategoryIdValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getApi202204ExternalCategorieByCategoryId(Async)");
        }

        return getApi202204ExternalCategorieByCategoryIdCall(categoryId, _callback);

    }

    /**
     * 
     * Endpoint to search for a specific category by categoryId.
     * @param categoryId ID of the desired category (required)
     * @return Category202204
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Category202204 getApi202204ExternalCategorieByCategoryId(Integer categoryId) throws ApiException {
        ApiResponse<Category202204> localVarResp = getApi202204ExternalCategorieByCategoryIdWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search for a specific category by categoryId.
     * @param categoryId ID of the desired category (required)
     * @return ApiResponse&lt;Category202204&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category202204> getApi202204ExternalCategorieByCategoryIdWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = getApi202204ExternalCategorieByCategoryIdValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<Category202204>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search for a specific category by categoryId.
     * @param categoryId ID of the desired category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategorieByCategoryIdAsync(Integer categoryId, final ApiCallback<Category202204> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202204ExternalCategorieByCategoryIdValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<Category202204>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202204ExternalCategories
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategoriesCall(Integer pageIndex, Integer pageSize, Integer retailerId, String textSubstring, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (retailerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retailerId", retailerId));
        }

        if (textSubstring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSubstring", textSubstring));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202204ExternalCategoriesValidateBeforeCall(Integer pageIndex, Integer pageSize, Integer retailerId, String textSubstring, final ApiCallback _callback) throws ApiException {
        return getApi202204ExternalCategoriesCall(pageIndex, pageSize, retailerId, textSubstring, _callback);

    }

    /**
     * 
     * Endpoint to search categories by text and retailer.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @return Category202204ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public Category202204ListResponse getApi202204ExternalCategories(Integer pageIndex, Integer pageSize, Integer retailerId, String textSubstring) throws ApiException {
        ApiResponse<Category202204ListResponse> localVarResp = getApi202204ExternalCategoriesWithHttpInfo(pageIndex, pageSize, retailerId, textSubstring);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search categories by text and retailer.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @return ApiResponse&lt;Category202204ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category202204ListResponse> getApi202204ExternalCategoriesWithHttpInfo(Integer pageIndex, Integer pageSize, Integer retailerId, String textSubstring) throws ApiException {
        okhttp3.Call localVarCall = getApi202204ExternalCategoriesValidateBeforeCall(pageIndex, pageSize, retailerId, textSubstring, null);
        Type localVarReturnType = new TypeToken<Category202204ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search categories by text and retailer.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategoriesAsync(Integer pageIndex, Integer pageSize, Integer retailerId, String textSubstring, final ApiCallback<Category202204ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202204ExternalCategoriesValidateBeforeCall(pageIndex, pageSize, retailerId, textSubstring, _callback);
        Type localVarReturnType = new TypeToken<Category202204ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCatalogOutputByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Catalog has expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/catalogs/{catalogId}/output"
            .replace("{" + "catalogId" + "}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-json-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV1ExternalCatalogOutputByCatalogId(Async)");
        }

        return getApiV1ExternalCatalogOutputByCatalogIdCall(catalogId, _callback);

    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Catalog has expired. </td><td>  -  </td></tr>
     </table>
     */
    public File getApiV1ExternalCatalogOutputByCatalogId(String catalogId) throws ApiException {
        ApiResponse<File> localVarResp = getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Catalog has expired. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Catalog has expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdAsync(String catalogId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCatalogStatusByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/catalogs/{catalogId}/status"
            .replace("{" + "catalogId" + "}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV1ExternalCatalogStatusByCatalogId(Async)");
        }

        return getApiV1ExternalCatalogStatusByCatalogIdCall(catalogId, _callback);

    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus getApiV1ExternalCatalogStatusByCatalogId(String catalogId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdAsync(String catalogId, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuctionLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuctionLineItemsByCampaignIdCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/campaigns/{campaign-id}/auction-line-items"
            .replace("{" + "campaign-id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuctionLineItemsByCampaignIdValidateBeforeCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getAuctionLineItemsByCampaignId(Async)");
        }

        return getAuctionLineItemsByCampaignIdCall(campaignId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return AuctionLineItemPagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemPagedListResponse getAuctionLineItemsByCampaignId(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<AuctionLineItemPagedListResponse> localVarResp = getAuctionLineItemsByCampaignIdWithHttpInfo(campaignId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;AuctionLineItemPagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemPagedListResponse> getAuctionLineItemsByCampaignIdWithHttpInfo(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemPagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuctionLineItemsByCampaignIdAsync(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<AuctionLineItemPagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemPagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuctionLineItemsByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuctionLineItemsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/auction-line-items/{line-item-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuctionLineItemsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getAuctionLineItemsByLineItemId(Async)");
        }

        return getAuctionLineItemsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse getAuctionLineItemsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = getAuctionLineItemsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> getAuctionLineItemsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getAuctionLineItemsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuctionLineItemsByLineItemIdAsync(String lineItemId, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuctionLineItemsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudienceTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceTargetsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceTargetsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getAudienceTargetsByLineItemId(Async)");
        }

        return getAudienceTargetsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * This endpoint gets the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response getAudienceTargetsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = getAudienceTargetsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> getAudienceTargetsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceTargetsByLineItemIdAsync(String lineItemId, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrandsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{accountId}/brands"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBrandsByAccountId(Async)");
        }

        return getBrandsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return JsonApiPageResponseOfBrand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfBrand getBrandsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfBrand> localVarResp = getBrandsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;JsonApiPageResponseOfBrand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfBrand> getBrandsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfBrand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignBudgetOverrides
     * @param campaignId Campaign id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignBudgetOverridesCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/campaigns/{campaignId}/campaign-budget-overrides"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignBudgetOverridesValidateBeforeCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignBudgetOverrides(Async)");
        }

        return getCampaignBudgetOverridesCall(campaignId, _callback);

    }

    /**
     * 
     * Get current campaign budget overrides by given campaign id.
     * @param campaignId Campaign id. (required)
     * @return ValueResourceOutcomeOfCampaignBudgetOverrides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfCampaignBudgetOverrides getCampaignBudgetOverrides(Long campaignId) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfCampaignBudgetOverrides> localVarResp = getCampaignBudgetOverridesWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get current campaign budget overrides by given campaign id.
     * @param campaignId Campaign id. (required)
     * @return ApiResponse&lt;ValueResourceOutcomeOfCampaignBudgetOverrides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfCampaignBudgetOverrides> getCampaignBudgetOverridesWithHttpInfo(Long campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignBudgetOverridesValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfCampaignBudgetOverrides>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get current campaign budget overrides by given campaign id.
     * @param campaignId Campaign id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignBudgetOverridesAsync(Long campaignId, final ApiCallback<ValueResourceOutcomeOfCampaignBudgetOverrides> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignBudgetOverridesValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfCampaignBudgetOverrides>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignByCampaignIdCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/campaigns/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignByCampaignIdValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignByCampaignId(Async)");
        }

        return getCampaignByCampaignIdCall(campaignId, _callback);

    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return JsonApiSingleResponseOfCampaignV202301
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaignV202301 getCampaignByCampaignId(String campaignId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaignV202301> localVarResp = getCampaignByCampaignIdWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaignV202301&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaignV202301> getCampaignByCampaignIdWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignByCampaignIdValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaignV202301>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignByCampaignIdAsync(String campaignId, final ApiCallback<JsonApiSingleResponseOfCampaignV202301> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignByCampaignIdValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaignV202301>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{account-id}/campaigns"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getCampaignsByAccountId(Async)");
        }

        return getCampaignsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return JsonApiPageResponseOfCampaignV202301
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfCampaignV202301 getCampaignsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfCampaignV202301> localVarResp = getCampaignsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;JsonApiPageResponseOfCampaignV202301&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfCampaignV202301> getCampaignsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaignV202301>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfCampaignV202301> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaignV202301>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreativeTemplate
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativeTemplateCall(Integer retailerId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/retailers/{retailer-id}/templates/{template-id}"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()))
            .replace("{" + "template-id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreativeTemplateValidateBeforeCall(Integer retailerId, Integer templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getCreativeTemplate(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getCreativeTemplate(Async)");
        }

        return getCreativeTemplateCall(retailerId, templateId, _callback);

    }

    /**
     * 
     * Gets the template for the specified retailer id and template id
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @return TemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public TemplateResponse getCreativeTemplate(Integer retailerId, Integer templateId) throws ApiException {
        ApiResponse<TemplateResponse> localVarResp = getCreativeTemplateWithHttpInfo(retailerId, templateId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the template for the specified retailer id and template id
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @return ApiResponse&lt;TemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateResponse> getCreativeTemplateWithHttpInfo(Integer retailerId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = getCreativeTemplateValidateBeforeCall(retailerId, templateId, null);
        Type localVarReturnType = new TypeToken<TemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the template for the specified retailer id and template id
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativeTemplateAsync(Integer retailerId, Integer templateId, final ApiCallback<TemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreativeTemplateValidateBeforeCall(retailerId, templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeywordTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeywordTargetsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/auction-line-items/{line-item-id}/targeting/keywords"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeywordTargetsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getKeywordTargetsByLineItemId(Async)");
        }

        return getKeywordTargetsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * This endpoint gets the keyword target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return KeywordTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public KeywordTarget202110Response getKeywordTargetsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<KeywordTarget202110Response> localVarResp = getKeywordTargetsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the keyword target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;KeywordTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordTarget202110Response> getKeywordTargetsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getKeywordTargetsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the keyword target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeywordTargetsByLineItemIdAsync(String lineItemId, final ApiCallback<KeywordTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeywordTargetsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLineItemBudgetOverrides
     * @param lineItemId The line item id to get budget overrides for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLineItemBudgetOverridesCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{lineItemId}/line-item-budget-overrides"
            .replace("{" + "lineItemId" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLineItemBudgetOverridesValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getLineItemBudgetOverrides(Async)");
        }

        return getLineItemBudgetOverridesCall(lineItemId, _callback);

    }

    /**
     * 
     * Gets a collection of monthly and daily budget overrides for the provided line item.
     * @param lineItemId The line item id to get budget overrides for. (required)
     * @return ValueResourceOutcomeOfLineItemBudgetOverrides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfLineItemBudgetOverrides getLineItemBudgetOverrides(String lineItemId) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfLineItemBudgetOverrides> localVarResp = getLineItemBudgetOverridesWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a collection of monthly and daily budget overrides for the provided line item.
     * @param lineItemId The line item id to get budget overrides for. (required)
     * @return ApiResponse&lt;ValueResourceOutcomeOfLineItemBudgetOverrides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfLineItemBudgetOverrides> getLineItemBudgetOverridesWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getLineItemBudgetOverridesValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfLineItemBudgetOverrides>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a collection of monthly and daily budget overrides for the provided line item.
     * @param lineItemId The line item id to get budget overrides for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLineItemBudgetOverridesAsync(String lineItemId, final ApiCallback<ValueResourceOutcomeOfLineItemBudgetOverrides> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLineItemBudgetOverridesValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfLineItemBudgetOverrides>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLineItemsByAccountId
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLineItemsByAccountIdCall(String accountId, List<String> limitToCampaignId, List<String> limitToId, String limitToType, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{account-id}/line-items"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToCampaignId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToCampaignId", limitToCampaignId));
        }

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (limitToType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitToType", limitToType));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLineItemsByAccountIdValidateBeforeCall(String accountId, List<String> limitToCampaignId, List<String> limitToId, String limitToType, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getLineItemsByAccountId(Async)");
        }

        return getLineItemsByAccountIdCall(accountId, limitToCampaignId, limitToId, limitToType, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return CommonLineItemPagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLineItemPagedListResponse getLineItemsByAccountId(String accountId, List<String> limitToCampaignId, List<String> limitToId, String limitToType, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<CommonLineItemPagedListResponse> localVarResp = getLineItemsByAccountIdWithHttpInfo(accountId, limitToCampaignId, limitToId, limitToType, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;CommonLineItemPagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLineItemPagedListResponse> getLineItemsByAccountIdWithHttpInfo(String accountId, List<String> limitToCampaignId, List<String> limitToId, String limitToType, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getLineItemsByAccountIdValidateBeforeCall(accountId, limitToCampaignId, limitToId, limitToType, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<CommonLineItemPagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLineItemsByAccountIdAsync(String accountId, List<String> limitToCampaignId, List<String> limitToId, String limitToType, Integer pageIndex, Integer pageSize, final ApiCallback<CommonLineItemPagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLineItemsByAccountIdValidateBeforeCall(accountId, limitToCampaignId, limitToId, limitToType, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<CommonLineItemPagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLineItemsByCampaignId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLineItemsByCampaignIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{line-item-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLineItemsByCampaignIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getLineItemsByCampaignId(Async)");
        }

        return getLineItemsByCampaignIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return CommonLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLineItemResponse getLineItemsByCampaignId(String lineItemId) throws ApiException {
        ApiResponse<CommonLineItemResponse> localVarResp = getLineItemsByCampaignIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;CommonLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLineItemResponse> getLineItemsByCampaignIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getLineItemsByCampaignIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<CommonLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLineItemsByCampaignIdAsync(String lineItemId, final ApiCallback<CommonLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLineItemsByCampaignIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<CommonLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetailerCreativeTemplates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetailerCreativeTemplatesCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/retailers/{retailer-id}/templates"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetailerCreativeTemplatesValidateBeforeCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getRetailerCreativeTemplates(Async)");
        }

        return getRetailerCreativeTemplatesCall(retailerId, _callback);

    }

    /**
     * 
     * Get retailer creative templates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @return TemplateListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public TemplateListResponse getRetailerCreativeTemplates(Integer retailerId) throws ApiException {
        ApiResponse<TemplateListResponse> localVarResp = getRetailerCreativeTemplatesWithHttpInfo(retailerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get retailer creative templates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @return ApiResponse&lt;TemplateListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateListResponse> getRetailerCreativeTemplatesWithHttpInfo(Integer retailerId) throws ApiException {
        okhttp3.Call localVarCall = getRetailerCreativeTemplatesValidateBeforeCall(retailerId, null);
        Type localVarReturnType = new TypeToken<TemplateListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get retailer creative templates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetailerCreativeTemplatesAsync(Integer retailerId, final ApiCallback<TemplateListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetailerCreativeTemplatesValidateBeforeCall(retailerId, _callback);
        Type localVarReturnType = new TypeToken<TemplateListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetailersByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetailersByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{accountId}/retailers"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetailersByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getRetailersByAccountId(Async)");
        }

        return getRetailersByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return JsonApiPageResponseOfRetailer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfRetailer getRetailersByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfRetailer> localVarResp = getRetailersByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;JsonApiPageResponseOfRetailer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfRetailer> getRetailersByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetailersByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfRetailer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoreTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoreTargetsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoreTargetsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getStoreTargetsByLineItemId(Async)");
        }

        return getStoreTargetsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * This endpoint gets the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response getStoreTargetsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = getStoreTargetsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> getStoreTargetsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getStoreTargetsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoreTargetsByLineItemIdAsync(String lineItemId, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoreTargetsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyAuctionLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyAuctionLineItemsByCampaignIdCall(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auctionLineItemCreateModelRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/campaigns/{campaign-id}/auction-line-items"
            .replace("{" + "campaign-id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyAuctionLineItemsByCampaignIdValidateBeforeCall(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling modifyAuctionLineItemsByCampaignId(Async)");
        }

        return modifyAuctionLineItemsByCampaignIdCall(campaignId, auctionLineItemCreateModelRequest, _callback);

    }

    /**
     * 
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse modifyAuctionLineItemsByCampaignId(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = modifyAuctionLineItemsByCampaignIdWithHttpInfo(campaignId, auctionLineItemCreateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> modifyAuctionLineItemsByCampaignIdWithHttpInfo(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, auctionLineItemCreateModelRequest, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyAuctionLineItemsByCampaignIdAsync(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, auctionLineItemCreateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pausePromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pausePromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{line-item-id}/products/pause"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pausePromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling pausePromotedProducts(Async)");
        }

        return pausePromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
     </table>
     */
    public void pausePromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        pausePromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
    }

    /**
     * 
     * Pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pausePromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = pausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pausePromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalAccountCatalogsByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdCall(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jsonApiRequestOfCatalogRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{accountId}/catalogs"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalAccountCatalogsByAccountId(Async)");
        }

        return postApiV1ExternalAccountCatalogsByAccountIdCall(accountId, jsonApiRequestOfCatalogRequest, _callback);

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus postApiV1ExternalAccountCatalogsByAccountId(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo(accountId, jsonApiRequestOfCatalogRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequest, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdAsync(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAddToBasketTargetByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAddToBasketTargetByLineItemIdCall(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addToBasketTarget202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAddToBasketTargetByLineItemIdValidateBeforeCall(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putAddToBasketTargetByLineItemId(Async)");
        }

        return putAddToBasketTargetByLineItemIdCall(lineItemId, addToBasketTarget202110Request, _callback);

    }

    /**
     * 
     * This endpoint sets the scope of the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response putAddToBasketTargetByLineItemId(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = putAddToBasketTargetByLineItemIdWithHttpInfo(lineItemId, addToBasketTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint sets the scope of the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> putAddToBasketTargetByLineItemIdWithHttpInfo(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = putAddToBasketTargetByLineItemIdValidateBeforeCall(lineItemId, addToBasketTarget202110Request, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint sets the scope of the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAddToBasketTargetByLineItemIdAsync(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAddToBasketTargetByLineItemIdValidateBeforeCall(lineItemId, addToBasketTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAudienceTargetsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAudienceTargetsByLineItemIdCall(String lineItemId, AudienceTarget202110Request audienceTarget202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceTarget202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAudienceTargetsByLineItemIdValidateBeforeCall(String lineItemId, AudienceTarget202110Request audienceTarget202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putAudienceTargetsByLineItemId(Async)");
        }

        return putAudienceTargetsByLineItemIdCall(lineItemId, audienceTarget202110Request, _callback);

    }

    /**
     * 
     * This endpoint sets the scope of the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response putAudienceTargetsByLineItemId(String lineItemId, AudienceTarget202110Request audienceTarget202110Request) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = putAudienceTargetsByLineItemIdWithHttpInfo(lineItemId, audienceTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint sets the scope of the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> putAudienceTargetsByLineItemIdWithHttpInfo(String lineItemId, AudienceTarget202110Request audienceTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = putAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, audienceTarget202110Request, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint sets the scope of the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAudienceTargetsByLineItemIdAsync(String lineItemId, AudienceTarget202110Request audienceTarget202110Request, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAudienceTargetsByLineItemIdValidateBeforeCall(lineItemId, audienceTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putStoreTargetByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoreTargetByLineItemIdCall(String lineItemId, StoreTarget202110Request storeTarget202110Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storeTarget202110Request;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putStoreTargetByLineItemIdValidateBeforeCall(String lineItemId, StoreTarget202110Request storeTarget202110Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putStoreTargetByLineItemId(Async)");
        }

        return putStoreTargetByLineItemIdCall(lineItemId, storeTarget202110Request, _callback);

    }

    /**
     * 
     * This endpoint sets the scope of the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response putStoreTargetByLineItemId(String lineItemId, StoreTarget202110Request storeTarget202110Request) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = putStoreTargetByLineItemIdWithHttpInfo(lineItemId, storeTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint sets the scope of the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> putStoreTargetByLineItemIdWithHttpInfo(String lineItemId, StoreTarget202110Request storeTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = putStoreTargetByLineItemIdValidateBeforeCall(lineItemId, storeTarget202110Request, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint sets the scope of the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoreTargetByLineItemIdAsync(String lineItemId, StoreTarget202110Request storeTarget202110Request, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putStoreTargetByLineItemIdValidateBeforeCall(lineItemId, storeTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setKeywordBids
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setKeywordBidsCall(String id, SetBidsModelRequest setBidsModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setBidsModelRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{id}/keywords/set-bid"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setKeywordBidsValidateBeforeCall(String id, SetBidsModelRequest setBidsModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setKeywordBids(Async)");
        }

        return setKeywordBidsCall(id, setBidsModelRequest, _callback);

    }

    /**
     * 
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @return ResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcome setKeywordBids(String id, SetBidsModelRequest setBidsModelRequest) throws ApiException {
        ApiResponse<ResourceOutcome> localVarResp = setKeywordBidsWithHttpInfo(id, setBidsModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @return ApiResponse&lt;ResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcome> setKeywordBidsWithHttpInfo(String id, SetBidsModelRequest setBidsModelRequest) throws ApiException {
        okhttp3.Call localVarCall = setKeywordBidsValidateBeforeCall(id, setBidsModelRequest, null);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setKeywordBidsAsync(String id, SetBidsModelRequest setBidsModelRequest, final ApiCallback<ResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = setKeywordBidsValidateBeforeCall(id, setBidsModelRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpausePromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpausePromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{line-item-id}/products/unpause"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpausePromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling unpausePromotedProducts(Async)");
        }

        return unpausePromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Un-pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
     </table>
     */
    public void unpausePromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        unpausePromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
    }

    /**
     * 
     * Un-pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unpausePromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = unpausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Un-pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpausePromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuctionLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuctionLineItemByLineItemIdCall(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auctionLineItemUpdateModelRequest;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/auction-line-items/{line-item-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuctionLineItemByLineItemIdValidateBeforeCall(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling updateAuctionLineItemByLineItemId(Async)");
        }

        return updateAuctionLineItemByLineItemIdCall(lineItemId, auctionLineItemUpdateModelRequest, _callback);

    }

    /**
     * 
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse updateAuctionLineItemByLineItemId(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = updateAuctionLineItemByLineItemIdWithHttpInfo(lineItemId, auctionLineItemUpdateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> updateAuctionLineItemByLineItemIdWithHttpInfo(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, auctionLineItemUpdateModelRequest, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuctionLineItemByLineItemIdAsync(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, auctionLineItemUpdateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCampaignBudgetOverrides
     * @param campaignId Campaign id. (required)
     * @param valueResourceInputOfCampaignBudgetOverrides New campaign budget overrides settings value resource input. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCampaignBudgetOverridesCall(Long campaignId, ValueResourceInputOfCampaignBudgetOverrides valueResourceInputOfCampaignBudgetOverrides, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfCampaignBudgetOverrides;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/campaigns/{campaignId}/campaign-budget-overrides"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCampaignBudgetOverridesValidateBeforeCall(Long campaignId, ValueResourceInputOfCampaignBudgetOverrides valueResourceInputOfCampaignBudgetOverrides, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateCampaignBudgetOverrides(Async)");
        }

        return updateCampaignBudgetOverridesCall(campaignId, valueResourceInputOfCampaignBudgetOverrides, _callback);

    }

    /**
     * 
     * Update campaign budget overrides by given campaign id and new campaign budget overrides settings.
     * @param campaignId Campaign id. (required)
     * @param valueResourceInputOfCampaignBudgetOverrides New campaign budget overrides settings value resource input. (optional)
     * @return ValueResourceOutcomeOfCampaignBudgetOverrides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfCampaignBudgetOverrides updateCampaignBudgetOverrides(Long campaignId, ValueResourceInputOfCampaignBudgetOverrides valueResourceInputOfCampaignBudgetOverrides) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfCampaignBudgetOverrides> localVarResp = updateCampaignBudgetOverridesWithHttpInfo(campaignId, valueResourceInputOfCampaignBudgetOverrides);
        return localVarResp.getData();
    }

    /**
     * 
     * Update campaign budget overrides by given campaign id and new campaign budget overrides settings.
     * @param campaignId Campaign id. (required)
     * @param valueResourceInputOfCampaignBudgetOverrides New campaign budget overrides settings value resource input. (optional)
     * @return ApiResponse&lt;ValueResourceOutcomeOfCampaignBudgetOverrides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfCampaignBudgetOverrides> updateCampaignBudgetOverridesWithHttpInfo(Long campaignId, ValueResourceInputOfCampaignBudgetOverrides valueResourceInputOfCampaignBudgetOverrides) throws ApiException {
        okhttp3.Call localVarCall = updateCampaignBudgetOverridesValidateBeforeCall(campaignId, valueResourceInputOfCampaignBudgetOverrides, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfCampaignBudgetOverrides>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update campaign budget overrides by given campaign id and new campaign budget overrides settings.
     * @param campaignId Campaign id. (required)
     * @param valueResourceInputOfCampaignBudgetOverrides New campaign budget overrides settings value resource input. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCampaignBudgetOverridesAsync(Long campaignId, ValueResourceInputOfCampaignBudgetOverrides valueResourceInputOfCampaignBudgetOverrides, final ApiCallback<ValueResourceOutcomeOfCampaignBudgetOverrides> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCampaignBudgetOverridesValidateBeforeCall(campaignId, valueResourceInputOfCampaignBudgetOverrides, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfCampaignBudgetOverrides>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param putCampaignV202301 The campaign settings to update that campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCampaignByCampaignIdCall(String campaignId, PutCampaignV202301 putCampaignV202301, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putCampaignV202301;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/campaigns/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCampaignByCampaignIdValidateBeforeCall(String campaignId, PutCampaignV202301 putCampaignV202301, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateCampaignByCampaignId(Async)");
        }

        return updateCampaignByCampaignIdCall(campaignId, putCampaignV202301, _callback);

    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param putCampaignV202301 The campaign settings to update that campaign with (optional)
     * @return JsonApiSingleResponseOfCampaignV202301
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaignV202301 updateCampaignByCampaignId(String campaignId, PutCampaignV202301 putCampaignV202301) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaignV202301> localVarResp = updateCampaignByCampaignIdWithHttpInfo(campaignId, putCampaignV202301);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param putCampaignV202301 The campaign settings to update that campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaignV202301&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaignV202301> updateCampaignByCampaignIdWithHttpInfo(String campaignId, PutCampaignV202301 putCampaignV202301) throws ApiException {
        okhttp3.Call localVarCall = updateCampaignByCampaignIdValidateBeforeCall(campaignId, putCampaignV202301, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaignV202301>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param putCampaignV202301 The campaign settings to update that campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCampaignByCampaignIdAsync(String campaignId, PutCampaignV202301 putCampaignV202301, final ApiCallback<JsonApiSingleResponseOfCampaignV202301> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCampaignByCampaignIdValidateBeforeCall(campaignId, putCampaignV202301, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaignV202301>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCreative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreativeCall(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creativeUpdateModel202207;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/accounts/{account-id}/creatives/{creative-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "creative-id" + "}", localVarApiClient.escapeString(creativeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCreativeValidateBeforeCall(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateCreative(Async)");
        }

        // verify the required parameter 'creativeId' is set
        if (creativeId == null) {
            throw new ApiException("Missing the required parameter 'creativeId' when calling updateCreative(Async)");
        }

        return updateCreativeCall(accountId, creativeId, creativeUpdateModel202207, _callback);

    }

    /**
     * 
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @return Creative202210Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public Creative202210Response updateCreative(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207) throws ApiException {
        ApiResponse<Creative202210Response> localVarResp = updateCreativeWithHttpInfo(accountId, creativeId, creativeUpdateModel202207);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @return ApiResponse&lt;Creative202210Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202210Response> updateCreativeWithHttpInfo(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207) throws ApiException {
        okhttp3.Call localVarCall = updateCreativeValidateBeforeCall(accountId, creativeId, creativeUpdateModel202207, null);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreativeAsync(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207, final ApiCallback<Creative202210Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCreativeValidateBeforeCall(accountId, creativeId, creativeUpdateModel202207, _callback);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLineItemBudgetOverrides
     * @param lineItemId Line item external id. (required)
     * @param valueResourceInputOfLineItemBudgetOverrides New line item budget overrides settings value resource input. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLineItemBudgetOverridesCall(String lineItemId, ValueResourceInputOfLineItemBudgetOverrides valueResourceInputOfLineItemBudgetOverrides, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfLineItemBudgetOverrides;

        // create path and map variables
        String localVarPath = "/2024-07/retail-media/line-items/{lineItemId}/line-item-budget-overrides"
            .replace("{" + "lineItemId" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLineItemBudgetOverridesValidateBeforeCall(String lineItemId, ValueResourceInputOfLineItemBudgetOverrides valueResourceInputOfLineItemBudgetOverrides, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling updateLineItemBudgetOverrides(Async)");
        }

        return updateLineItemBudgetOverridesCall(lineItemId, valueResourceInputOfLineItemBudgetOverrides, _callback);

    }

    /**
     * 
     * Update line item budget overrides by given external line item id and new line item budget overrides settings.
     * @param lineItemId Line item external id. (required)
     * @param valueResourceInputOfLineItemBudgetOverrides New line item budget overrides settings value resource input. (optional)
     * @return ValueResourceOutcomeOfLineItemBudgetOverrides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfLineItemBudgetOverrides updateLineItemBudgetOverrides(String lineItemId, ValueResourceInputOfLineItemBudgetOverrides valueResourceInputOfLineItemBudgetOverrides) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfLineItemBudgetOverrides> localVarResp = updateLineItemBudgetOverridesWithHttpInfo(lineItemId, valueResourceInputOfLineItemBudgetOverrides);
        return localVarResp.getData();
    }

    /**
     * 
     * Update line item budget overrides by given external line item id and new line item budget overrides settings.
     * @param lineItemId Line item external id. (required)
     * @param valueResourceInputOfLineItemBudgetOverrides New line item budget overrides settings value resource input. (optional)
     * @return ApiResponse&lt;ValueResourceOutcomeOfLineItemBudgetOverrides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfLineItemBudgetOverrides> updateLineItemBudgetOverridesWithHttpInfo(String lineItemId, ValueResourceInputOfLineItemBudgetOverrides valueResourceInputOfLineItemBudgetOverrides) throws ApiException {
        okhttp3.Call localVarCall = updateLineItemBudgetOverridesValidateBeforeCall(lineItemId, valueResourceInputOfLineItemBudgetOverrides, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfLineItemBudgetOverrides>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update line item budget overrides by given external line item id and new line item budget overrides settings.
     * @param lineItemId Line item external id. (required)
     * @param valueResourceInputOfLineItemBudgetOverrides New line item budget overrides settings value resource input. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLineItemBudgetOverridesAsync(String lineItemId, ValueResourceInputOfLineItemBudgetOverrides valueResourceInputOfLineItemBudgetOverrides, final ApiCallback<ValueResourceOutcomeOfLineItemBudgetOverrides> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLineItemBudgetOverridesValidateBeforeCall(lineItemId, valueResourceInputOfLineItemBudgetOverrides, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfLineItemBudgetOverrides>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
