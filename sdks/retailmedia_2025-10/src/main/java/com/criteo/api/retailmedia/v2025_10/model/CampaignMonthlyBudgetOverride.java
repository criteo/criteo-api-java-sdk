/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_10.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2025_10.JSON;

/**
 * Campaign monthly budget override.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CampaignMonthlyBudgetOverride {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_MAX_MONTHLY_SPEND = "maxMonthlySpend";
  @SerializedName(SERIALIZED_NAME_MAX_MONTHLY_SPEND)
  private Double maxMonthlySpend;

  public static final String SERIALIZED_NAME_START_MONTH = "startMonth";
  @SerializedName(SERIALIZED_NAME_START_MONTH)
  private OffsetDateTime startMonth;

  /**
   * Monthly budget override computed status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    EXPIRED("Expired"),
    
    ACTIVE("Active"),
    
    UPCOMING("Upcoming");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public CampaignMonthlyBudgetOverride() {
  }

  public CampaignMonthlyBudgetOverride duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * The number of MONTHs that the override is active from StartMonth, e.g. \&quot;1M\&quot;. Must end with &#39;M&#39; or &#39;m&#39;.
   * @return duration
  **/
  @javax.annotation.Nonnull

  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public CampaignMonthlyBudgetOverride maxMonthlySpend(Double maxMonthlySpend) {
    
    this.maxMonthlySpend = maxMonthlySpend;
    return this;
  }

   /**
   * Monthly budget override maximum monthly spend amount.
   * @return maxMonthlySpend
  **/
  @javax.annotation.Nonnull

  public Double getMaxMonthlySpend() {
    return maxMonthlySpend;
  }


  public void setMaxMonthlySpend(Double maxMonthlySpend) {
    this.maxMonthlySpend = maxMonthlySpend;
  }


  public CampaignMonthlyBudgetOverride startMonth(OffsetDateTime startMonth) {
    
    this.startMonth = startMonth;
    return this;
  }

   /**
   * Monthly budget override start month, format \&quot;yyyy-MM\&quot;. If it is null, the StartMonth would be the following month of the last item in the override sequence.
   * @return startMonth
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getStartMonth() {
    return startMonth;
  }


  public void setStartMonth(OffsetDateTime startMonth) {
    this.startMonth = startMonth;
  }


  public CampaignMonthlyBudgetOverride status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Monthly budget override computed status.
   * @return status
  **/
  @javax.annotation.Nullable

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignMonthlyBudgetOverride campaignMonthlyBudgetOverride = (CampaignMonthlyBudgetOverride) o;
    return Objects.equals(this.duration, campaignMonthlyBudgetOverride.duration) &&
        Objects.equals(this.maxMonthlySpend, campaignMonthlyBudgetOverride.maxMonthlySpend) &&
        Objects.equals(this.startMonth, campaignMonthlyBudgetOverride.startMonth) &&
        Objects.equals(this.status, campaignMonthlyBudgetOverride.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, maxMonthlySpend, startMonth, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignMonthlyBudgetOverride {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    maxMonthlySpend: ").append(toIndentedString(maxMonthlySpend)).append("\n");
    sb.append("    startMonth: ").append(toIndentedString(startMonth)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("maxMonthlySpend");
    openapiFields.add("startMonth");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("maxMonthlySpend");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignMonthlyBudgetOverride
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignMonthlyBudgetOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignMonthlyBudgetOverride is not found in the empty JSON string", CampaignMonthlyBudgetOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CampaignMonthlyBudgetOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignMonthlyBudgetOverride` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignMonthlyBudgetOverride.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignMonthlyBudgetOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignMonthlyBudgetOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignMonthlyBudgetOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignMonthlyBudgetOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignMonthlyBudgetOverride>() {
           @Override
           public void write(JsonWriter out, CampaignMonthlyBudgetOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignMonthlyBudgetOverride read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignMonthlyBudgetOverride given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignMonthlyBudgetOverride
  * @throws IOException if the JSON string is invalid with respect to CampaignMonthlyBudgetOverride
  */
  public static CampaignMonthlyBudgetOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignMonthlyBudgetOverride.class);
  }

 /**
  * Convert an instance of CampaignMonthlyBudgetOverride to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

