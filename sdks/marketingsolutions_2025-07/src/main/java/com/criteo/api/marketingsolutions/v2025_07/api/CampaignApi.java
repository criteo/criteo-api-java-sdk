/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: 2025-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.v2025_07.api;

import com.criteo.api.marketingsolutions.v2025_07.ApiCallback;
import com.criteo.api.marketingsolutions.v2025_07.ApiClient;
import com.criteo.api.marketingsolutions.v2025_07.ApiException;
import com.criteo.api.marketingsolutions.v2025_07.ApiResponse;
import com.criteo.api.marketingsolutions.v2025_07.Configuration;
import com.criteo.api.marketingsolutions.v2025_07.Pair;
import com.criteo.api.marketingsolutions.v2025_07.ProgressRequestBody;
import com.criteo.api.marketingsolutions.v2025_07.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.marketingsolutions.v2025_07.model.AdSetAudienceLinkEntityV1Response;
import com.criteo.api.marketingsolutions.v2025_07.model.AdSetAudienceLinkInputEntityV1;
import com.criteo.api.marketingsolutions.v2025_07.model.AdSetCategoryBidListResponse;
import com.criteo.api.marketingsolutions.v2025_07.model.AdSetDisplayMultiplierListResponse;
import com.criteo.api.marketingsolutions.v2025_07.model.AdSetSearchRequestV24Q3;
import com.criteo.api.marketingsolutions.v2025_07.model.CampaignSearchRequestV23Q1;
import com.criteo.api.marketingsolutions.v2025_07.model.CampaignV23Q1ListResponse;
import com.criteo.api.marketingsolutions.v2025_07.model.CampaignV23Q1Response;
import com.criteo.api.marketingsolutions.v2025_07.model.CreateAdSetV24Q3Request;
import com.criteo.api.marketingsolutions.v2025_07.model.CreateCampaignRequest;
import com.criteo.api.marketingsolutions.v2025_07.model.CreateSellerBudgetMapiMessage;
import com.criteo.api.marketingsolutions.v2025_07.model.CreateSellerCampaignMessageMapi;
import java.time.OffsetDateTime;
import com.criteo.api.marketingsolutions.v2025_07.model.PatchAdSetCategoryBidListRequest;
import com.criteo.api.marketingsolutions.v2025_07.model.PatchAdSetCategoryBidResultListResponse;
import com.criteo.api.marketingsolutions.v2025_07.model.PatchAdSetDisplayMultiplierListRequest;
import com.criteo.api.marketingsolutions.v2025_07.model.PatchAdSetDisplayMultiplierResultListResponse;
import com.criteo.api.marketingsolutions.v2025_07.model.PatchCampaignListRequest;
import com.criteo.api.marketingsolutions.v2025_07.model.PatchResultCampaignListResponse;
import com.criteo.api.marketingsolutions.v2025_07.model.RequestsAdSetId;
import com.criteo.api.marketingsolutions.v2025_07.model.RequestsPatchAdSetV24Q3;
import com.criteo.api.marketingsolutions.v2025_07.model.ResponseReadAdSetV24Q3;
import com.criteo.api.marketingsolutions.v2025_07.model.ResponsesAdSetId;
import com.criteo.api.marketingsolutions.v2025_07.model.ResponsesAdSetIdV24Q3;
import com.criteo.api.marketingsolutions.v2025_07.model.ResponsesReadAdSetV24Q3;
import com.criteo.api.marketingsolutions.v2025_07.model.SellerBase;
import com.criteo.api.marketingsolutions.v2025_07.model.SellerBudgetMessage;
import com.criteo.api.marketingsolutions.v2025_07.model.SellerCampaignMessage;
import com.criteo.api.marketingsolutions.v2025_07.model.SellerCampaignUpdate;
import com.criteo.api.marketingsolutions.v2025_07.model.UpdateSellerBudgetMessage;
import com.criteo.api.marketingsolutions.v2025_07.model.UpdateSellerBudgetMessageBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAdSet
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdSetCall(CreateAdSetV24Q3Request createAdSetV24Q3Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAdSetV24Q3Request;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdSetValidateBeforeCall(CreateAdSetV24Q3Request createAdSetV24Q3Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAdSetV24Q3Request' is set
        if (createAdSetV24Q3Request == null) {
            throw new ApiException("Missing the required parameter 'createAdSetV24Q3Request' when calling createAdSet(Async)");
        }

        return createAdSetCall(createAdSetV24Q3Request, _callback);

    }

    /**
     * 
     * Create the specified ad set
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @return ResponseReadAdSetV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public ResponseReadAdSetV24Q3 createAdSet(CreateAdSetV24Q3Request createAdSetV24Q3Request) throws ApiException {
        ApiResponse<ResponseReadAdSetV24Q3> localVarResp = createAdSetWithHttpInfo(createAdSetV24Q3Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Create the specified ad set
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @return ApiResponse&lt;ResponseReadAdSetV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseReadAdSetV24Q3> createAdSetWithHttpInfo(CreateAdSetV24Q3Request createAdSetV24Q3Request) throws ApiException {
        okhttp3.Call localVarCall = createAdSetValidateBeforeCall(createAdSetV24Q3Request, null);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create the specified ad set
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdSetAsync(CreateAdSetV24Q3Request createAdSetV24Q3Request, final ApiCallback<ResponseReadAdSetV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdSetValidateBeforeCall(createAdSetV24Q3Request, _callback);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCampaign
     * @param createCampaignRequest the campaigns to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignCall(CreateCampaignRequest createCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCampaignRequest;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCampaignValidateBeforeCall(CreateCampaignRequest createCampaignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCampaignRequest' is set
        if (createCampaignRequest == null) {
            throw new ApiException("Missing the required parameter 'createCampaignRequest' when calling createCampaign(Async)");
        }

        return createCampaignCall(createCampaignRequest, _callback);

    }

    /**
     * 
     * Create the specified campaign
     * @param createCampaignRequest the campaigns to create (required)
     * @return CampaignV23Q1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public CampaignV23Q1Response createCampaign(CreateCampaignRequest createCampaignRequest) throws ApiException {
        ApiResponse<CampaignV23Q1Response> localVarResp = createCampaignWithHttpInfo(createCampaignRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create the specified campaign
     * @param createCampaignRequest the campaigns to create (required)
     * @return ApiResponse&lt;CampaignV23Q1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignV23Q1Response> createCampaignWithHttpInfo(CreateCampaignRequest createCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(createCampaignRequest, null);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create the specified campaign
     * @param createCampaignRequest the campaigns to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignAsync(CreateCampaignRequest createCampaignRequest, final ApiCallback<CampaignV23Q1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(createCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMarketplaceSellerBudgets
     * @param createSellerBudgetMapiMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMarketplaceSellerBudgetsCall(List<CreateSellerBudgetMapiMessage> createSellerBudgetMapiMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSellerBudgetMapiMessage;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMarketplaceSellerBudgetsValidateBeforeCall(List<CreateSellerBudgetMapiMessage> createSellerBudgetMapiMessage, final ApiCallback _callback) throws ApiException {
        return createMarketplaceSellerBudgetsCall(createSellerBudgetMapiMessage, _callback);

    }

    /**
     * 
     * Create one or more new budgets to enable spending with the given limitations.  All three types of budgets can be created this way.                The following constraints apply when creating a new budget.                • &lt;b&gt;sellerId&lt;/b&gt;: the seller MUST be supplied&lt;br /&gt;  • &lt;b&gt;campaignIds&lt;/b&gt;: a non-empty array of campaign ids MUST be supplied&lt;br /&gt;  • &lt;b&gt;budgetType&lt;/b&gt;: a budget type MUST be supplied&lt;br /&gt;  • &lt;b&gt;amount&lt;/b&gt;: an amount MAY be supplied only if the type is not Uncapped and if supplied it MUST be non-negative&lt;br /&gt;  • &lt;b&gt;startDate&lt;/b&gt;: a future start date MUST be supplied&lt;br /&gt;  • &lt;b&gt;endDate&lt;/b&gt;: an end date MAY be supplied and if supplied MUST be greater than the start date&lt;br /&gt;                Other attributes MUST NOT be supplied.
     * @param createSellerBudgetMapiMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createMarketplaceSellerBudgets(List<CreateSellerBudgetMapiMessage> createSellerBudgetMapiMessage) throws ApiException {
        createMarketplaceSellerBudgetsWithHttpInfo(createSellerBudgetMapiMessage);
    }

    /**
     * 
     * Create one or more new budgets to enable spending with the given limitations.  All three types of budgets can be created this way.                The following constraints apply when creating a new budget.                • &lt;b&gt;sellerId&lt;/b&gt;: the seller MUST be supplied&lt;br /&gt;  • &lt;b&gt;campaignIds&lt;/b&gt;: a non-empty array of campaign ids MUST be supplied&lt;br /&gt;  • &lt;b&gt;budgetType&lt;/b&gt;: a budget type MUST be supplied&lt;br /&gt;  • &lt;b&gt;amount&lt;/b&gt;: an amount MAY be supplied only if the type is not Uncapped and if supplied it MUST be non-negative&lt;br /&gt;  • &lt;b&gt;startDate&lt;/b&gt;: a future start date MUST be supplied&lt;br /&gt;  • &lt;b&gt;endDate&lt;/b&gt;: an end date MAY be supplied and if supplied MUST be greater than the start date&lt;br /&gt;                Other attributes MUST NOT be supplied.
     * @param createSellerBudgetMapiMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createMarketplaceSellerBudgetsWithHttpInfo(List<CreateSellerBudgetMapiMessage> createSellerBudgetMapiMessage) throws ApiException {
        okhttp3.Call localVarCall = createMarketplaceSellerBudgetsValidateBeforeCall(createSellerBudgetMapiMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create one or more new budgets to enable spending with the given limitations.  All three types of budgets can be created this way.                The following constraints apply when creating a new budget.                • &lt;b&gt;sellerId&lt;/b&gt;: the seller MUST be supplied&lt;br /&gt;  • &lt;b&gt;campaignIds&lt;/b&gt;: a non-empty array of campaign ids MUST be supplied&lt;br /&gt;  • &lt;b&gt;budgetType&lt;/b&gt;: a budget type MUST be supplied&lt;br /&gt;  • &lt;b&gt;amount&lt;/b&gt;: an amount MAY be supplied only if the type is not Uncapped and if supplied it MUST be non-negative&lt;br /&gt;  • &lt;b&gt;startDate&lt;/b&gt;: a future start date MUST be supplied&lt;br /&gt;  • &lt;b&gt;endDate&lt;/b&gt;: an end date MAY be supplied and if supplied MUST be greater than the start date&lt;br /&gt;                Other attributes MUST NOT be supplied.
     * @param createSellerBudgetMapiMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMarketplaceSellerBudgetsAsync(List<CreateSellerBudgetMapiMessage> createSellerBudgetMapiMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMarketplaceSellerBudgetsValidateBeforeCall(createSellerBudgetMapiMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMarketplaceSellerCampaignsBySeller
     * @param sellerId Supply a generated Id of an existing Seller (required)
     * @param createSellerCampaignMessageMapi Supply the campaign Id and bid to create the mapping (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMarketplaceSellerCampaignsBySellerCall(String sellerId, CreateSellerCampaignMessageMapi createSellerCampaignMessageMapi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSellerCampaignMessageMapi;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/sellers/{sellerId}/seller-campaigns"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMarketplaceSellerCampaignsBySellerValidateBeforeCall(String sellerId, CreateSellerCampaignMessageMapi createSellerCampaignMessageMapi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling createMarketplaceSellerCampaignsBySeller(Async)");
        }

        return createMarketplaceSellerCampaignsBySellerCall(sellerId, createSellerCampaignMessageMapi, _callback);

    }

    /**
     * 
     * Associate an existing Seller with an existing Campaign allowing for budget creation
     * @param sellerId Supply a generated Id of an existing Seller (required)
     * @param createSellerCampaignMessageMapi Supply the campaign Id and bid to create the mapping (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createMarketplaceSellerCampaignsBySeller(String sellerId, CreateSellerCampaignMessageMapi createSellerCampaignMessageMapi) throws ApiException {
        createMarketplaceSellerCampaignsBySellerWithHttpInfo(sellerId, createSellerCampaignMessageMapi);
    }

    /**
     * 
     * Associate an existing Seller with an existing Campaign allowing for budget creation
     * @param sellerId Supply a generated Id of an existing Seller (required)
     * @param createSellerCampaignMessageMapi Supply the campaign Id and bid to create the mapping (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createMarketplaceSellerCampaignsBySellerWithHttpInfo(String sellerId, CreateSellerCampaignMessageMapi createSellerCampaignMessageMapi) throws ApiException {
        okhttp3.Call localVarCall = createMarketplaceSellerCampaignsBySellerValidateBeforeCall(sellerId, createSellerCampaignMessageMapi, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Associate an existing Seller with an existing Campaign allowing for budget creation
     * @param sellerId Supply a generated Id of an existing Seller (required)
     * @param createSellerCampaignMessageMapi Supply the campaign Id and bid to create the mapping (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMarketplaceSellerCampaignsBySellerAsync(String sellerId, CreateSellerCampaignMessageMapi createSellerCampaignMessageMapi, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMarketplaceSellerCampaignsBySellerValidateBeforeCall(sellerId, createSellerCampaignMessageMapi, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdSet
     * @param adSetId Id of the ad set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/{ad-set-id}"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdSetValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getAdSet(Async)");
        }

        return getAdSetCall(adSetId, _callback);

    }

    /**
     * 
     * Get the data for the specified ad set
     * @param adSetId Id of the ad set (required)
     * @return ResponseReadAdSetV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
     </table>
     */
    public ResponseReadAdSetV24Q3 getAdSet(String adSetId) throws ApiException {
        ApiResponse<ResponseReadAdSetV24Q3> localVarResp = getAdSetWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the data for the specified ad set
     * @param adSetId Id of the ad set (required)
     * @return ApiResponse&lt;ResponseReadAdSetV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseReadAdSetV24Q3> getAdSetWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getAdSetValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the data for the specified ad set
     * @param adSetId Id of the ad set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetAsync(String adSetId, final ApiCallback<ResponseReadAdSetV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdSetValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdSetCategoryBids
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetCategoryBidsCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/{ad-set-id}/category-bids"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdSetCategoryBidsValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getAdSetCategoryBids(Async)");
        }

        return getAdSetCategoryBidsCall(adSetId, _callback);

    }

    /**
     * 
     * Get the Category Bids for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetCategoryBidListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetCategoryBidListResponse getAdSetCategoryBids(String adSetId) throws ApiException {
        ApiResponse<AdSetCategoryBidListResponse> localVarResp = getAdSetCategoryBidsWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Category Bids for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetCategoryBidListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetCategoryBidListResponse> getAdSetCategoryBidsWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getAdSetCategoryBidsValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetCategoryBidListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Category Bids for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetCategoryBidsAsync(String adSetId, final ApiCallback<AdSetCategoryBidListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdSetCategoryBidsValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetCategoryBidListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaign
     * @param campaignId Id of the campaign (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/campaigns/{campaign-id}"
            .replace("{" + "campaign-id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaign(Async)");
        }

        return getCampaignCall(campaignId, _callback);

    }

    /**
     * 
     * Get the data for the specified campaign
     * @param campaignId Id of the campaign (required)
     * @return CampaignV23Q1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
     </table>
     */
    public CampaignV23Q1Response getCampaign(String campaignId) throws ApiException {
        ApiResponse<CampaignV23Q1Response> localVarResp = getCampaignWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the data for the specified campaign
     * @param campaignId Id of the campaign (required)
     * @return ApiResponse&lt;CampaignV23Q1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignV23Q1Response> getCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the data for the specified campaign
     * @param campaignId Id of the campaign (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignAsync(String campaignId, final ApiCallback<CampaignV23Q1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDisplayMultipliers
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisplayMultipliersCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisplayMultipliersValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getDisplayMultipliers(Async)");
        }

        return getDisplayMultipliersCall(adSetId, _callback);

    }

    /**
     * 
     * Get the Display Multipliers for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetDisplayMultiplierListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetDisplayMultiplierListResponse getDisplayMultipliers(String adSetId) throws ApiException {
        ApiResponse<AdSetDisplayMultiplierListResponse> localVarResp = getDisplayMultipliersWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Display Multipliers for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetDisplayMultiplierListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetDisplayMultiplierListResponse> getDisplayMultipliersWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getDisplayMultipliersValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetDisplayMultiplierListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Display Multipliers for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisplayMultipliersAsync(String adSetId, final ApiCallback<AdSetDisplayMultiplierListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisplayMultipliersValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetDisplayMultiplierListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceAdSetsByAdvertiser
     * @param advertiserId Id of the advertiser (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdSetsByAdvertiserCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}/adsets"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceAdSetsByAdvertiserValidateBeforeCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceAdSetsByAdvertiser(Async)");
        }

        return getMarketplaceAdSetsByAdvertiserCall(advertiserId, _callback);

    }

    /**
     * 
     * Get the collection of adsets associated with the advertiserId.
     * @param advertiserId Id of the advertiser (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceAdSetsByAdvertiser(Integer advertiserId) throws ApiException {
        getMarketplaceAdSetsByAdvertiserWithHttpInfo(advertiserId);
    }

    /**
     * 
     * Get the collection of adsets associated with the advertiserId.
     * @param advertiserId Id of the advertiser (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceAdSetsByAdvertiserWithHttpInfo(Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceAdSetsByAdvertiserValidateBeforeCall(advertiserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the collection of adsets associated with the advertiserId.
     * @param advertiserId Id of the advertiser (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdSetsByAdvertiserAsync(Integer advertiserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceAdSetsByAdvertiserValidateBeforeCall(advertiserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceAdvertiser
     * @param advertiserId Id of the advertiser (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdvertiserCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceAdvertiserValidateBeforeCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceAdvertiser(Async)");
        }

        return getMarketplaceAdvertiserCall(advertiserId, _callback);

    }

    /**
     * 
     * Get an advertiser.
     * @param advertiserId Id of the advertiser (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceAdvertiser(Integer advertiserId) throws ApiException {
        getMarketplaceAdvertiserWithHttpInfo(advertiserId);
    }

    /**
     * 
     * Get an advertiser.
     * @param advertiserId Id of the advertiser (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceAdvertiserWithHttpInfo(Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceAdvertiserValidateBeforeCall(advertiserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get an advertiser.
     * @param advertiserId Id of the advertiser (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdvertiserAsync(Integer advertiserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceAdvertiserValidateBeforeCall(advertiserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceAdvertiserPreviewLimits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdvertiserPreviewLimitsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/preview-limit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceAdvertiserPreviewLimitsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMarketplaceAdvertiserPreviewLimitsCall(_callback);

    }

    /**
     * 
     * Get the collection of advertisers preview limits associated with the authorized user.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceAdvertiserPreviewLimits() throws ApiException {
        getMarketplaceAdvertiserPreviewLimitsWithHttpInfo();
    }

    /**
     * 
     * Get the collection of advertisers preview limits associated with the authorized user.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceAdvertiserPreviewLimitsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceAdvertiserPreviewLimitsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the collection of advertisers preview limits associated with the authorized user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdvertiserPreviewLimitsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceAdvertiserPreviewLimitsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceAdvertisers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdvertisersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceAdvertisersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMarketplaceAdvertisersCall(_callback);

    }

    /**
     * 
     * Get the collection of advertisers associated with the user.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceAdvertisers() throws ApiException {
        getMarketplaceAdvertisersWithHttpInfo();
    }

    /**
     * 
     * Get the collection of advertisers associated with the user.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceAdvertisersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceAdvertisersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the collection of advertisers associated with the user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAdvertisersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceAdvertisersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceBudgetsByAdvertiser
     * @param advertiserId Id of the advertiser (required)
     * @param budgetId Return only budgets with given Id (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to given sellerId (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceBudgetsByAdvertiserCall(Integer advertiserId, Long budgetId, OffsetDateTime endAfterDate, Long sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}/budgets"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (budgetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("budgetId", budgetId));
        }

        if (endAfterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withSpend", withSpend));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceBudgetsByAdvertiserValidateBeforeCall(Integer advertiserId, Long budgetId, OffsetDateTime endAfterDate, Long sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceBudgetsByAdvertiser(Async)");
        }

        return getMarketplaceBudgetsByAdvertiserCall(advertiserId, budgetId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend, _callback);

    }

    /**
     * 
     * Get CRP budgets for a specific advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param budgetId Return only budgets with given Id (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to given sellerId (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceBudgetsByAdvertiser(Integer advertiserId, Long budgetId, OffsetDateTime endAfterDate, Long sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        getMarketplaceBudgetsByAdvertiserWithHttpInfo(advertiserId, budgetId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend);
    }

    /**
     * 
     * Get CRP budgets for a specific advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param budgetId Return only budgets with given Id (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to given sellerId (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceBudgetsByAdvertiserWithHttpInfo(Integer advertiserId, Long budgetId, OffsetDateTime endAfterDate, Long sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceBudgetsByAdvertiserValidateBeforeCall(advertiserId, budgetId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get CRP budgets for a specific advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param budgetId Return only budgets with given Id (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to given sellerId (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceBudgetsByAdvertiserAsync(Integer advertiserId, Long budgetId, OffsetDateTime endAfterDate, Long sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceBudgetsByAdvertiserValidateBeforeCall(advertiserId, budgetId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceBudgetsBySeller
     * @param sellerId Return only budgets belonging to the given seller. (required)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceBudgetsBySellerCall(String sellerId, Integer campaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/sellers/{sellerId}/budgets"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (endAfterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withSpend", withSpend));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceBudgetsBySellerValidateBeforeCall(String sellerId, Integer campaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getMarketplaceBudgetsBySeller(Async)");
        }

        return getMarketplaceBudgetsBySellerCall(sellerId, campaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend, _callback);

    }

    /**
     * 
     * Return a collection of budgets for this seller filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used. See the budgets endpoint for additional details.
     * @param sellerId Return only budgets belonging to the given seller. (required)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerBudgetMessage> getMarketplaceBudgetsBySeller(String sellerId, Integer campaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> localVarResp = getMarketplaceBudgetsBySellerWithHttpInfo(sellerId, campaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a collection of budgets for this seller filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used. See the budgets endpoint for additional details.
     * @param sellerId Return only budgets belonging to the given seller. (required)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerBudgetMessage>> getMarketplaceBudgetsBySellerWithHttpInfo(String sellerId, Integer campaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceBudgetsBySellerValidateBeforeCall(sellerId, campaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a collection of budgets for this seller filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used. See the budgets endpoint for additional details.
     * @param sellerId Return only budgets belonging to the given seller. (required)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.              If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceBudgetsBySellerAsync(String sellerId, Integer campaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback<List<SellerBudgetMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceBudgetsBySellerValidateBeforeCall(sellerId, campaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend, _callback);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceBudgetsBySellerCampaign
     * @param sellerCampaignId Return only budgets belonging to the given seller campaign. (required)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with a positive balance. (optional)
     * @param withSpend Return budgets with a positive spend. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceBudgetsBySellerCampaignCall(String sellerCampaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/seller-campaigns/{sellerCampaignId}/budgets"
            .replace("{" + "sellerCampaignId" + "}", localVarApiClient.escapeString(sellerCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endAfterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withSpend", withSpend));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceBudgetsBySellerCampaignValidateBeforeCall(String sellerCampaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerCampaignId' is set
        if (sellerCampaignId == null) {
            throw new ApiException("Missing the required parameter 'sellerCampaignId' when calling getMarketplaceBudgetsBySellerCampaign(Async)");
        }

        return getMarketplaceBudgetsBySellerCampaignCall(sellerCampaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend, _callback);

    }

    /**
     * 
     * Return a collection of budgets for this seller campaign filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used.                See the budgets endpoint for additional details.
     * @param sellerCampaignId Return only budgets belonging to the given seller campaign. (required)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with a positive balance. (optional)
     * @param withSpend Return budgets with a positive spend. (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerBudgetMessage> getMarketplaceBudgetsBySellerCampaign(String sellerCampaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> localVarResp = getMarketplaceBudgetsBySellerCampaignWithHttpInfo(sellerCampaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a collection of budgets for this seller campaign filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used.                See the budgets endpoint for additional details.
     * @param sellerCampaignId Return only budgets belonging to the given seller campaign. (required)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with a positive balance. (optional)
     * @param withSpend Return budgets with a positive spend. (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerBudgetMessage>> getMarketplaceBudgetsBySellerCampaignWithHttpInfo(String sellerCampaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceBudgetsBySellerCampaignValidateBeforeCall(sellerCampaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a collection of budgets for this seller campaign filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used.                See the budgets endpoint for additional details.
     * @param sellerCampaignId Return only budgets belonging to the given seller campaign. (required)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with a positive balance. (optional)
     * @param withSpend Return budgets with a positive spend. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceBudgetsBySellerCampaignAsync(String sellerCampaignId, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback<List<SellerBudgetMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceBudgetsBySellerCampaignValidateBeforeCall(sellerCampaignId, endAfterDate, startBeforeDate, status, type, withBalance, withSpend, _callback);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceCampaignsByAdvertiser
     * @param advertiserId Id of the advertiser (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceCampaignsByAdvertiserCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}/campaigns"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceCampaignsByAdvertiserValidateBeforeCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceCampaignsByAdvertiser(Async)");
        }

        return getMarketplaceCampaignsByAdvertiserCall(advertiserId, _callback);

    }

    /**
     * 
     * Get the collection of CRP campaigns associated with the advertiserId.
     * @param advertiserId Id of the advertiser (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceCampaignsByAdvertiser(Integer advertiserId) throws ApiException {
        getMarketplaceCampaignsByAdvertiserWithHttpInfo(advertiserId);
    }

    /**
     * 
     * Get the collection of CRP campaigns associated with the advertiserId.
     * @param advertiserId Id of the advertiser (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceCampaignsByAdvertiserWithHttpInfo(Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceCampaignsByAdvertiserValidateBeforeCall(advertiserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the collection of CRP campaigns associated with the advertiserId.
     * @param advertiserId Id of the advertiser (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceCampaignsByAdvertiserAsync(Integer advertiserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceCampaignsByAdvertiserValidateBeforeCall(advertiserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceCampaignsStats
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceCampaignsStatsCall(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, OffsetDateTime startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/stats/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (clickAttributionPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clickAttributionPolicy", clickAttributionPolicy));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (intervalSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervalSize", intervalSize));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceCampaignsStatsValidateBeforeCall(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, OffsetDateTime startDate, final ApiCallback _callback) throws ApiException {
        return getMarketplaceCampaignsStatsCall(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, startDate, _callback);

    }

    /**
     * 
     * ## Dimensions                Get performance statistics aggregated for _campaigns_. The campaign id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by campaign, date or count.                Filtering the results to events associated with a specific campaign is done by setting  the &#x60;campaignId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {     \&quot;columns\&quot;: [ \&quot;campaignId\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot; ],     \&quot;data\&quot;: [         [168423, \&quot;2019-05-01\&quot;, 3969032, 13410, 1111.295, 985, 190758099, 0.073, 1.128, 0.000, 171653.880 ],         [168423, \&quot;2019-06-01\&quot;, 8479603, 25619, 2190.705, 740, 152783656, 0.028, 2.960, 0.000, 69741.775 ]         ],     \&quot;rows\&quot;: 2  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  column comes first and consists of the campaign id.  The interval column comes next and defines the aggregation period.  The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getMarketplaceCampaignsStats(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, OffsetDateTime startDate) throws ApiException {
        ApiResponse<byte[]> localVarResp = getMarketplaceCampaignsStatsWithHttpInfo(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, startDate);
        return localVarResp.getData();
    }

    /**
     * 
     * ## Dimensions                Get performance statistics aggregated for _campaigns_. The campaign id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by campaign, date or count.                Filtering the results to events associated with a specific campaign is done by setting  the &#x60;campaignId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {     \&quot;columns\&quot;: [ \&quot;campaignId\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot; ],     \&quot;data\&quot;: [         [168423, \&quot;2019-05-01\&quot;, 3969032, 13410, 1111.295, 985, 190758099, 0.073, 1.128, 0.000, 171653.880 ],         [168423, \&quot;2019-06-01\&quot;, 8479603, 25619, 2190.705, 740, 152783656, 0.028, 2.960, 0.000, 69741.775 ]         ],     \&quot;rows\&quot;: 2  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  column comes first and consists of the campaign id.  The interval column comes next and defines the aggregation period.  The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getMarketplaceCampaignsStatsWithHttpInfo(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, OffsetDateTime startDate) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceCampaignsStatsValidateBeforeCall(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, startDate, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ## Dimensions                Get performance statistics aggregated for _campaigns_. The campaign id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by campaign, date or count.                Filtering the results to events associated with a specific campaign is done by setting  the &#x60;campaignId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {     \&quot;columns\&quot;: [ \&quot;campaignId\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot; ],     \&quot;data\&quot;: [         [168423, \&quot;2019-05-01\&quot;, 3969032, 13410, 1111.295, 985, 190758099, 0.073, 1.128, 0.000, 171653.880 ],         [168423, \&quot;2019-06-01\&quot;, 8479603, 25619, 2190.705, 740, 152783656, 0.028, 2.960, 0.000, 69741.775 ]         ],     \&quot;rows\&quot;: 2  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  column comes first and consists of the campaign id.  The interval column comes next and defines the aggregation period.  The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceCampaignsStatsAsync(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, OffsetDateTime startDate, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceCampaignsStatsValidateBeforeCall(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, startDate, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSeller
     * @param sellerId Id of the seller. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCall(String sellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/sellers/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerValidateBeforeCall(String sellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getMarketplaceSeller(Async)");
        }

        return getMarketplaceSellerCall(sellerId, _callback);

    }

    /**
     * 
     * Return details for the selected seller. For example,                    {          \&quot;id\&quot; : \&quot;123456\&quot;          \&quot;sellerName\&quot;: \&quot;HBogart\&quot;,      }
     * @param sellerId Id of the seller. (required)
     * @return SellerBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SellerBase getMarketplaceSeller(String sellerId) throws ApiException {
        ApiResponse<SellerBase> localVarResp = getMarketplaceSellerWithHttpInfo(sellerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details for the selected seller. For example,                    {          \&quot;id\&quot; : \&quot;123456\&quot;          \&quot;sellerName\&quot;: \&quot;HBogart\&quot;,      }
     * @param sellerId Id of the seller. (required)
     * @return ApiResponse&lt;SellerBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerBase> getMarketplaceSellerWithHttpInfo(String sellerId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerValidateBeforeCall(sellerId, null);
        Type localVarReturnType = new TypeToken<SellerBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details for the selected seller. For example,                    {          \&quot;id\&quot; : \&quot;123456\&quot;          \&quot;sellerName\&quot;: \&quot;HBogart\&quot;,      }
     * @param sellerId Id of the seller. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerAsync(String sellerId, final ApiCallback<SellerBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerValidateBeforeCall(sellerId, _callback);
        Type localVarReturnType = new TypeToken<SellerBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerAdPreview
     * @param advertiserId Id of the advertiser (required)
     * @param sellerId Id of the seller (required)
     * @param campaignId Seller CampaignId (optional)
     * @param height Height of the ad to display (optional)
     * @param width Width of the ad to display (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerAdPreviewCall(Integer advertiserId, Long sellerId, Integer campaignId, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}/ad-preview"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerAdPreviewValidateBeforeCall(Integer advertiserId, Long sellerId, Integer campaignId, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceSellerAdPreview(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getMarketplaceSellerAdPreview(Async)");
        }

        return getMarketplaceSellerAdPreviewCall(advertiserId, sellerId, campaignId, height, width, _callback);

    }

    /**
     * 
     * Get a preview of an HTML ad with products belonging to the provided seller  • &lt;b&gt;advertiserId&lt;/b&gt;: Valid crp advertiserId, seller belongs to provided advertiser&lt;br /&gt;  • &lt;b&gt;sellerId&lt;/b&gt;: Products from given SellerId will fill the ad preview, must be existing crp sellerId&lt;br /&gt;  • &lt;b&gt;height&lt;/b&gt;: height may be supplied to request a specific ad preview height. Default height: 250&lt;br /&gt;  • &lt;b&gt;width&lt;/b&gt;: width may be supplied to request a specific ad preview width. Default width: 300&lt;br /&gt;                Ad preview api calls are capped to 1000 per day per advertiser by default. Current usage, limit, and period can be found using v2/crp/advertisers/preview-limit
     * @param advertiserId Id of the advertiser (required)
     * @param sellerId Id of the seller (required)
     * @param campaignId Seller CampaignId (optional)
     * @param height Height of the ad to display (optional)
     * @param width Width of the ad to display (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String getMarketplaceSellerAdPreview(Integer advertiserId, Long sellerId, Integer campaignId, Integer height, Integer width) throws ApiException {
        ApiResponse<String> localVarResp = getMarketplaceSellerAdPreviewWithHttpInfo(advertiserId, sellerId, campaignId, height, width);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a preview of an HTML ad with products belonging to the provided seller  • &lt;b&gt;advertiserId&lt;/b&gt;: Valid crp advertiserId, seller belongs to provided advertiser&lt;br /&gt;  • &lt;b&gt;sellerId&lt;/b&gt;: Products from given SellerId will fill the ad preview, must be existing crp sellerId&lt;br /&gt;  • &lt;b&gt;height&lt;/b&gt;: height may be supplied to request a specific ad preview height. Default height: 250&lt;br /&gt;  • &lt;b&gt;width&lt;/b&gt;: width may be supplied to request a specific ad preview width. Default width: 300&lt;br /&gt;                Ad preview api calls are capped to 1000 per day per advertiser by default. Current usage, limit, and period can be found using v2/crp/advertisers/preview-limit
     * @param advertiserId Id of the advertiser (required)
     * @param sellerId Id of the seller (required)
     * @param campaignId Seller CampaignId (optional)
     * @param height Height of the ad to display (optional)
     * @param width Width of the ad to display (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getMarketplaceSellerAdPreviewWithHttpInfo(Integer advertiserId, Long sellerId, Integer campaignId, Integer height, Integer width) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerAdPreviewValidateBeforeCall(advertiserId, sellerId, campaignId, height, width, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a preview of an HTML ad with products belonging to the provided seller  • &lt;b&gt;advertiserId&lt;/b&gt;: Valid crp advertiserId, seller belongs to provided advertiser&lt;br /&gt;  • &lt;b&gt;sellerId&lt;/b&gt;: Products from given SellerId will fill the ad preview, must be existing crp sellerId&lt;br /&gt;  • &lt;b&gt;height&lt;/b&gt;: height may be supplied to request a specific ad preview height. Default height: 250&lt;br /&gt;  • &lt;b&gt;width&lt;/b&gt;: width may be supplied to request a specific ad preview width. Default width: 300&lt;br /&gt;                Ad preview api calls are capped to 1000 per day per advertiser by default. Current usage, limit, and period can be found using v2/crp/advertisers/preview-limit
     * @param advertiserId Id of the advertiser (required)
     * @param sellerId Id of the seller (required)
     * @param campaignId Seller CampaignId (optional)
     * @param height Height of the ad to display (optional)
     * @param width Width of the ad to display (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerAdPreviewAsync(Integer advertiserId, Long sellerId, Integer campaignId, Integer height, Integer width, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerAdPreviewValidateBeforeCall(advertiserId, sellerId, campaignId, height, width, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerBudget
     * @param budgetId Id of the budget. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerBudgetCall(Long budgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/budgets/{budgetId}"
            .replace("{" + "budgetId" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerBudgetValidateBeforeCall(Long budgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getMarketplaceSellerBudget(Async)");
        }

        return getMarketplaceSellerBudgetCall(budgetId, _callback);

    }

    /**
     * 
     * Return a budget. For example,                    {          \&quot;id\&quot;: \&quot;1759183\&quot;,          \&quot;sellerId\&quot;: \&quot;321392\&quot;,          \&quot;campaignIds\&quot;: [              143962          ],          \&quot;budgetType\&quot;: \&quot;Capped\&quot;,          \&quot;amount\&quot;: 1000,          \&quot;startDate\&quot;: \&quot;2021-01-11\&quot;,          \&quot;endDate\&quot;: \&quot;2021-01-12\&quot;,          \&quot;spend\&quot;: null,          \&quot;status\&quot;: \&quot;Active\&quot;      }                A budget limits the spend of a seller for one or more campaigns.                There are three types of budget:&lt;br /&gt;&lt;b&gt;Uncapped&lt;/b&gt; budgets put no limit on the total amount of spend.&lt;br /&gt;&lt;b&gt;Capped&lt;/b&gt; budgets limit the total spend to a fixed amount.&lt;br /&gt;&lt;b&gt;Daily&lt;/b&gt; budgets limit daily spend to a fixed amount.&lt;br /&gt;                In addition, budgets can limit the spend to a specific range of dates using  the start and end date attributes. Finally a budget must be active to be used.                &lt;b&gt;Spend&lt;/b&gt; approximates the current spend against this budget. There may be a lag  between when an ad is clicked and the time it accrues to the spend. Daily budgets  show spend against the most recent day only.
     * @param budgetId Id of the budget. (required)
     * @return SellerBudgetMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SellerBudgetMessage getMarketplaceSellerBudget(Long budgetId) throws ApiException {
        ApiResponse<SellerBudgetMessage> localVarResp = getMarketplaceSellerBudgetWithHttpInfo(budgetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a budget. For example,                    {          \&quot;id\&quot;: \&quot;1759183\&quot;,          \&quot;sellerId\&quot;: \&quot;321392\&quot;,          \&quot;campaignIds\&quot;: [              143962          ],          \&quot;budgetType\&quot;: \&quot;Capped\&quot;,          \&quot;amount\&quot;: 1000,          \&quot;startDate\&quot;: \&quot;2021-01-11\&quot;,          \&quot;endDate\&quot;: \&quot;2021-01-12\&quot;,          \&quot;spend\&quot;: null,          \&quot;status\&quot;: \&quot;Active\&quot;      }                A budget limits the spend of a seller for one or more campaigns.                There are three types of budget:&lt;br /&gt;&lt;b&gt;Uncapped&lt;/b&gt; budgets put no limit on the total amount of spend.&lt;br /&gt;&lt;b&gt;Capped&lt;/b&gt; budgets limit the total spend to a fixed amount.&lt;br /&gt;&lt;b&gt;Daily&lt;/b&gt; budgets limit daily spend to a fixed amount.&lt;br /&gt;                In addition, budgets can limit the spend to a specific range of dates using  the start and end date attributes. Finally a budget must be active to be used.                &lt;b&gt;Spend&lt;/b&gt; approximates the current spend against this budget. There may be a lag  between when an ad is clicked and the time it accrues to the spend. Daily budgets  show spend against the most recent day only.
     * @param budgetId Id of the budget. (required)
     * @return ApiResponse&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerBudgetMessage> getMarketplaceSellerBudgetWithHttpInfo(Long budgetId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerBudgetValidateBeforeCall(budgetId, null);
        Type localVarReturnType = new TypeToken<SellerBudgetMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a budget. For example,                    {          \&quot;id\&quot;: \&quot;1759183\&quot;,          \&quot;sellerId\&quot;: \&quot;321392\&quot;,          \&quot;campaignIds\&quot;: [              143962          ],          \&quot;budgetType\&quot;: \&quot;Capped\&quot;,          \&quot;amount\&quot;: 1000,          \&quot;startDate\&quot;: \&quot;2021-01-11\&quot;,          \&quot;endDate\&quot;: \&quot;2021-01-12\&quot;,          \&quot;spend\&quot;: null,          \&quot;status\&quot;: \&quot;Active\&quot;      }                A budget limits the spend of a seller for one or more campaigns.                There are three types of budget:&lt;br /&gt;&lt;b&gt;Uncapped&lt;/b&gt; budgets put no limit on the total amount of spend.&lt;br /&gt;&lt;b&gt;Capped&lt;/b&gt; budgets limit the total spend to a fixed amount.&lt;br /&gt;&lt;b&gt;Daily&lt;/b&gt; budgets limit daily spend to a fixed amount.&lt;br /&gt;                In addition, budgets can limit the spend to a specific range of dates using  the start and end date attributes. Finally a budget must be active to be used.                &lt;b&gt;Spend&lt;/b&gt; approximates the current spend against this budget. There may be a lag  between when an ad is clicked and the time it accrues to the spend. Daily budgets  show spend against the most recent day only.
     * @param budgetId Id of the budget. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerBudgetAsync(Long budgetId, final ApiCallback<SellerBudgetMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerBudgetValidateBeforeCall(budgetId, _callback);
        Type localVarReturnType = new TypeToken<SellerBudgetMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerBudgets
     * @param advertiserId Return only budgets belonging to the specified advertiser (optional)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to the given seller. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerBudgetsCall(Integer advertiserId, Integer campaignId, OffsetDateTime endAfterDate, String sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (endAfterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withSpend", withSpend));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerBudgetsValidateBeforeCall(Integer advertiserId, Integer campaignId, OffsetDateTime endAfterDate, String sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback _callback) throws ApiException {
        return getMarketplaceSellerBudgetsCall(advertiserId, campaignId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend, _callback);

    }

    /**
     * 
     * Return a collection of budgets filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used.                &lt;b&gt;Date filter.&lt;/b&gt; Filtering can return only budgets that were active for a  date range by specifying the startBeforeDate and endAfterDate. Leaving off the startBeforeDate  value makes budgets with any startDate qualify, whereas when leaving off the endAfterDate value will only return  budgets whose endDate has not already passed. To get budgets that were active  on a specific date, set both values to that day.                &lt;b&gt;Spend.&lt;/b&gt; If the endAfterDate is supplied, the spend excludes spend that  happened after that date. In the case of a daily budget, only the spend for  the final day is displayed.                See the budgets endpoint for additional details.
     * @param advertiserId Return only budgets belonging to the specified advertiser (optional)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to the given seller. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerBudgetMessage> getMarketplaceSellerBudgets(Integer advertiserId, Integer campaignId, OffsetDateTime endAfterDate, String sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> localVarResp = getMarketplaceSellerBudgetsWithHttpInfo(advertiserId, campaignId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a collection of budgets filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used.                &lt;b&gt;Date filter.&lt;/b&gt; Filtering can return only budgets that were active for a  date range by specifying the startBeforeDate and endAfterDate. Leaving off the startBeforeDate  value makes budgets with any startDate qualify, whereas when leaving off the endAfterDate value will only return  budgets whose endDate has not already passed. To get budgets that were active  on a specific date, set both values to that day.                &lt;b&gt;Spend.&lt;/b&gt; If the endAfterDate is supplied, the spend excludes spend that  happened after that date. In the case of a daily budget, only the spend for  the final day is displayed.                See the budgets endpoint for additional details.
     * @param advertiserId Return only budgets belonging to the specified advertiser (optional)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to the given seller. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerBudgetMessage>> getMarketplaceSellerBudgetsWithHttpInfo(Integer advertiserId, Integer campaignId, OffsetDateTime endAfterDate, String sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerBudgetsValidateBeforeCall(advertiserId, campaignId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a collection of budgets filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned, except those whose endDate is in the past. Returned budgets must satisfy all supplied filter  criteria if multiple parameters are used.                &lt;b&gt;Date filter.&lt;/b&gt; Filtering can return only budgets that were active for a  date range by specifying the startBeforeDate and endAfterDate. Leaving off the startBeforeDate  value makes budgets with any startDate qualify, whereas when leaving off the endAfterDate value will only return  budgets whose endDate has not already passed. To get budgets that were active  on a specific date, set both values to that day.                &lt;b&gt;Spend.&lt;/b&gt; If the endAfterDate is supplied, the spend excludes spend that  happened after that date. In the case of a daily budget, only the spend for  the final day is displayed.                See the budgets endpoint for additional details.
     * @param advertiserId Return only budgets belonging to the specified advertiser (optional)
     * @param campaignId Return only budgets that pay for a given campaign. (optional)
     * @param endAfterDate Return budgets that end after the given date using the &#x60;yyyy-MM-DD&#x60; format.               If param is not provided, default behavior is to only return budgets that have not yet ended. (optional)
     * @param sellerId Return only budgets belonging to the given seller. (optional)
     * @param startBeforeDate Return budgets that start on or before the given date using the &#x60;yyyy-MM-DD&#x60; format. (optional)
     * @param status Return only budgets with the given status. (optional)
     * @param type Return only budgets with the given budget type. (optional)
     * @param withBalance Return only budgets with the given status. (optional)
     * @param withSpend Return budgets with any positive spend. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerBudgetsAsync(Integer advertiserId, Integer campaignId, OffsetDateTime endAfterDate, String sellerId, OffsetDateTime startBeforeDate, String status, String type, Boolean withBalance, Boolean withSpend, final ApiCallback<List<SellerBudgetMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerBudgetsValidateBeforeCall(advertiserId, campaignId, endAfterDate, sellerId, startBeforeDate, status, type, withBalance, withSpend, _callback);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerCampaign
     * @param sellerCampaignId Id of the seller campaign. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignCall(String sellerCampaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/seller-campaigns/{sellerCampaignId}"
            .replace("{" + "sellerCampaignId" + "}", localVarApiClient.escapeString(sellerCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerCampaignValidateBeforeCall(String sellerCampaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerCampaignId' is set
        if (sellerCampaignId == null) {
            throw new ApiException("Missing the required parameter 'sellerCampaignId' when calling getMarketplaceSellerCampaign(Async)");
        }

        return getMarketplaceSellerCampaignCall(sellerCampaignId, _callback);

    }

    /**
     * 
     * Return details for a seller campaign. For example,                    {          \&quot;id\&quot;: \&quot;543210.123456\&quot;,          \&quot;sellerId\&quot;: \&quot;543210\&quot;,          \&quot;campaignId\&quot;: 123456,          \&quot;bid\&quot;: 1.55,          \&quot;suspendedSince\&quot;: \&quot;2018-07-30T15:15:24.813\&quot;,          \&quot;suspensionReasons\&quot;: [              \&quot;NoMoreBudget\&quot;          ]      }                An active seller campaign is one for which the value of &lt;b&gt;suspendedSince&lt;/b&gt; is null and  the &lt;b&gt;bid&lt;/b&gt; is positive. The currency of the bid is the &lt;b&gt;bidCurrency&lt;/b&gt; of the  associated campaign.                Any active seller campaign must also have an active total (capped or uncapped) budget.  It may optionally have an active daily budget as well to further limit spending.                Suspension reasons:  - ManuallyStopped: The Seller-Campaign has been manually paused. This is not related to the other suspension reasons.  - NoBudgetDefined: No valid budget has been linked to the Seller-Campaign.  - NoCpcDefined: No CPC has been set for the Seller-Campaign.  - NoMoreBudget: The current budget of the Seller-Campaign has been exhausted.  - RemovedFromCatalog: All the products of the Seller-Campaign have been deleted from the catalog.  - NotYetStarted: The Seller-Campaign has just been created and has not yet been processed.
     * @param sellerCampaignId Id of the seller campaign. (required)
     * @return SellerCampaignMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SellerCampaignMessage getMarketplaceSellerCampaign(String sellerCampaignId) throws ApiException {
        ApiResponse<SellerCampaignMessage> localVarResp = getMarketplaceSellerCampaignWithHttpInfo(sellerCampaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return details for a seller campaign. For example,                    {          \&quot;id\&quot;: \&quot;543210.123456\&quot;,          \&quot;sellerId\&quot;: \&quot;543210\&quot;,          \&quot;campaignId\&quot;: 123456,          \&quot;bid\&quot;: 1.55,          \&quot;suspendedSince\&quot;: \&quot;2018-07-30T15:15:24.813\&quot;,          \&quot;suspensionReasons\&quot;: [              \&quot;NoMoreBudget\&quot;          ]      }                An active seller campaign is one for which the value of &lt;b&gt;suspendedSince&lt;/b&gt; is null and  the &lt;b&gt;bid&lt;/b&gt; is positive. The currency of the bid is the &lt;b&gt;bidCurrency&lt;/b&gt; of the  associated campaign.                Any active seller campaign must also have an active total (capped or uncapped) budget.  It may optionally have an active daily budget as well to further limit spending.                Suspension reasons:  - ManuallyStopped: The Seller-Campaign has been manually paused. This is not related to the other suspension reasons.  - NoBudgetDefined: No valid budget has been linked to the Seller-Campaign.  - NoCpcDefined: No CPC has been set for the Seller-Campaign.  - NoMoreBudget: The current budget of the Seller-Campaign has been exhausted.  - RemovedFromCatalog: All the products of the Seller-Campaign have been deleted from the catalog.  - NotYetStarted: The Seller-Campaign has just been created and has not yet been processed.
     * @param sellerCampaignId Id of the seller campaign. (required)
     * @return ApiResponse&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerCampaignMessage> getMarketplaceSellerCampaignWithHttpInfo(String sellerCampaignId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerCampaignValidateBeforeCall(sellerCampaignId, null);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return details for a seller campaign. For example,                    {          \&quot;id\&quot;: \&quot;543210.123456\&quot;,          \&quot;sellerId\&quot;: \&quot;543210\&quot;,          \&quot;campaignId\&quot;: 123456,          \&quot;bid\&quot;: 1.55,          \&quot;suspendedSince\&quot;: \&quot;2018-07-30T15:15:24.813\&quot;,          \&quot;suspensionReasons\&quot;: [              \&quot;NoMoreBudget\&quot;          ]      }                An active seller campaign is one for which the value of &lt;b&gt;suspendedSince&lt;/b&gt; is null and  the &lt;b&gt;bid&lt;/b&gt; is positive. The currency of the bid is the &lt;b&gt;bidCurrency&lt;/b&gt; of the  associated campaign.                Any active seller campaign must also have an active total (capped or uncapped) budget.  It may optionally have an active daily budget as well to further limit spending.                Suspension reasons:  - ManuallyStopped: The Seller-Campaign has been manually paused. This is not related to the other suspension reasons.  - NoBudgetDefined: No valid budget has been linked to the Seller-Campaign.  - NoCpcDefined: No CPC has been set for the Seller-Campaign.  - NoMoreBudget: The current budget of the Seller-Campaign has been exhausted.  - RemovedFromCatalog: All the products of the Seller-Campaign have been deleted from the catalog.  - NotYetStarted: The Seller-Campaign has just been created and has not yet been processed.
     * @param sellerCampaignId Id of the seller campaign. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignAsync(String sellerCampaignId, final ApiCallback<SellerCampaignMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerCampaignValidateBeforeCall(sellerCampaignId, _callback);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerCampaigns
     * @param advertiserId Return only seller belonging to the specified advertiser (optional)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerId Return only seller campaigns belonging to the given seller. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsCall(Integer advertiserId, String budgetStatus, Integer campaignId, String sellerId, String sellerStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/seller-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (budgetStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("budgetStatus", budgetStatus));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (sellerStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerStatus", sellerStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerCampaignsValidateBeforeCall(Integer advertiserId, String budgetStatus, Integer campaignId, String sellerId, String sellerStatus, final ApiCallback _callback) throws ApiException {
        return getMarketplaceSellerCampaignsCall(advertiserId, budgetStatus, campaignId, sellerId, sellerStatus, _callback);

    }

    /**
     * 
     * Return a collection of seller campaigns filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used.
     * @param advertiserId Return only seller belonging to the specified advertiser (optional)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerId Return only seller campaigns belonging to the given seller. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @return List&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerCampaignMessage> getMarketplaceSellerCampaigns(Integer advertiserId, String budgetStatus, Integer campaignId, String sellerId, String sellerStatus) throws ApiException {
        ApiResponse<List<SellerCampaignMessage>> localVarResp = getMarketplaceSellerCampaignsWithHttpInfo(advertiserId, budgetStatus, campaignId, sellerId, sellerStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a collection of seller campaigns filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used.
     * @param advertiserId Return only seller belonging to the specified advertiser (optional)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerId Return only seller campaigns belonging to the given seller. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @return ApiResponse&lt;List&lt;SellerCampaignMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerCampaignMessage>> getMarketplaceSellerCampaignsWithHttpInfo(Integer advertiserId, String budgetStatus, Integer campaignId, String sellerId, String sellerStatus) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsValidateBeforeCall(advertiserId, budgetStatus, campaignId, sellerId, sellerStatus, null);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a collection of seller campaigns filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used.
     * @param advertiserId Return only seller belonging to the specified advertiser (optional)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerId Return only seller campaigns belonging to the given seller. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsAsync(Integer advertiserId, String budgetStatus, Integer campaignId, String sellerId, String sellerStatus, final ApiCallback<List<SellerCampaignMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsValidateBeforeCall(advertiserId, budgetStatus, campaignId, sellerId, sellerStatus, _callback);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerCampaignsByAdvertiser
     * @param advertiserId Id of the advertiser (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsByAdvertiserCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}/seller-campaigns"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerCampaignsByAdvertiserValidateBeforeCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceSellerCampaignsByAdvertiser(Async)");
        }

        return getMarketplaceSellerCampaignsByAdvertiserCall(advertiserId, _callback);

    }

    /**
     * 
     * Get CRP seller campaigns for a specific advertiser
     * @param advertiserId Id of the advertiser (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceSellerCampaignsByAdvertiser(Integer advertiserId) throws ApiException {
        getMarketplaceSellerCampaignsByAdvertiserWithHttpInfo(advertiserId);
    }

    /**
     * 
     * Get CRP seller campaigns for a specific advertiser
     * @param advertiserId Id of the advertiser (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceSellerCampaignsByAdvertiserWithHttpInfo(Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsByAdvertiserValidateBeforeCall(advertiserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get CRP seller campaigns for a specific advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsByAdvertiserAsync(Integer advertiserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsByAdvertiserValidateBeforeCall(advertiserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerCampaignsBySeller
     * @param sellerId Return only seller campaigns belonging to the given seller. (required)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsBySellerCall(String sellerId, String budgetStatus, Integer campaignId, String sellerStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/sellers/{sellerId}/seller-campaigns"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (budgetStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("budgetStatus", budgetStatus));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (sellerStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerStatus", sellerStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerCampaignsBySellerValidateBeforeCall(String sellerId, String budgetStatus, Integer campaignId, String sellerStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getMarketplaceSellerCampaignsBySeller(Async)");
        }

        return getMarketplaceSellerCampaignsBySellerCall(sellerId, budgetStatus, campaignId, sellerStatus, _callback);

    }

    /**
     * 
     * Return a collection of seller campaigns for this seller filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used. See the seller campaigns endpoint for additional details.
     * @param sellerId Return only seller campaigns belonging to the given seller. (required)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @return List&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerCampaignMessage> getMarketplaceSellerCampaignsBySeller(String sellerId, String budgetStatus, Integer campaignId, String sellerStatus) throws ApiException {
        ApiResponse<List<SellerCampaignMessage>> localVarResp = getMarketplaceSellerCampaignsBySellerWithHttpInfo(sellerId, budgetStatus, campaignId, sellerStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a collection of seller campaigns for this seller filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used. See the seller campaigns endpoint for additional details.
     * @param sellerId Return only seller campaigns belonging to the given seller. (required)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @return ApiResponse&lt;List&lt;SellerCampaignMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerCampaignMessage>> getMarketplaceSellerCampaignsBySellerWithHttpInfo(String sellerId, String budgetStatus, Integer campaignId, String sellerStatus) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsBySellerValidateBeforeCall(sellerId, budgetStatus, campaignId, sellerStatus, null);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a collection of seller campaigns for this seller filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used. See the seller campaigns endpoint for additional details.
     * @param sellerId Return only seller campaigns belonging to the given seller. (required)
     * @param budgetStatus Return only seller campaigns whose budget has the given status. (optional)
     * @param campaignId Return only seller campaigns associated with the given campaign. (optional)
     * @param sellerStatus Return only seller campaigns for sellers with the given status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsBySellerAsync(String sellerId, String budgetStatus, Integer campaignId, String sellerStatus, final ApiCallback<List<SellerCampaignMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsBySellerValidateBeforeCall(sellerId, budgetStatus, campaignId, sellerStatus, _callback);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellerCampaignsStats
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsStatsCall(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/stats/seller-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (clickAttributionPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clickAttributionPolicy", clickAttributionPolicy));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (intervalSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervalSize", intervalSize));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellerCampaignsStatsValidateBeforeCall(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate, final ApiCallback _callback) throws ApiException {
        return getMarketplaceSellerCampaignsStatsCall(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate, _callback);

    }

    /**
     * 
     * ## Dimensions                Get performance statistics aggregated for _seller campaigns_.The campaign id, seller id, and  seller name appear in the first three columns of the output. These are followed by the interval  size column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The remaining columns are metrics.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events associated with a specific campaign is done by setting  the &#x60;campaignId&#x60; filter parameter to the desired value.                Filtering the results to events associated with a specific seller is done by setting  the &#x60;sellerId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {      \&quot;columns\&quot;: [          \&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;sellerName\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot;      ],      \&quot;data\&quot;: [          [168423, 1110222, \&quot;118883955\&quot;, \&quot;2019-05-01\&quot;, 14542, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110222, \&quot;118883955\&quot;, \&quot;2019-06-01\&quot;, 16619, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110225, \&quot;117980027\&quot;, \&quot;2019-05-01\&quot;, 12502, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110225, \&quot;117980027\&quot;, \&quot;2019-06-01\&quot;, 20266, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0]      ],      \&quot;rows\&quot;: 4  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and include the campaign id, seller id, and seller name.  The interval column comes next and defines the aggregation period. The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getMarketplaceSellerCampaignsStats(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate) throws ApiException {
        ApiResponse<byte[]> localVarResp = getMarketplaceSellerCampaignsStatsWithHttpInfo(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate);
        return localVarResp.getData();
    }

    /**
     * 
     * ## Dimensions                Get performance statistics aggregated for _seller campaigns_.The campaign id, seller id, and  seller name appear in the first three columns of the output. These are followed by the interval  size column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The remaining columns are metrics.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events associated with a specific campaign is done by setting  the &#x60;campaignId&#x60; filter parameter to the desired value.                Filtering the results to events associated with a specific seller is done by setting  the &#x60;sellerId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {      \&quot;columns\&quot;: [          \&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;sellerName\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot;      ],      \&quot;data\&quot;: [          [168423, 1110222, \&quot;118883955\&quot;, \&quot;2019-05-01\&quot;, 14542, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110222, \&quot;118883955\&quot;, \&quot;2019-06-01\&quot;, 16619, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110225, \&quot;117980027\&quot;, \&quot;2019-05-01\&quot;, 12502, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110225, \&quot;117980027\&quot;, \&quot;2019-06-01\&quot;, 20266, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0]      ],      \&quot;rows\&quot;: 4  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and include the campaign id, seller id, and seller name.  The interval column comes next and defines the aggregation period. The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getMarketplaceSellerCampaignsStatsWithHttpInfo(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsStatsValidateBeforeCall(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ## Dimensions                Get performance statistics aggregated for _seller campaigns_.The campaign id, seller id, and  seller name appear in the first three columns of the output. These are followed by the interval  size column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The remaining columns are metrics.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events associated with a specific campaign is done by setting  the &#x60;campaignId&#x60; filter parameter to the desired value.                Filtering the results to events associated with a specific seller is done by setting  the &#x60;sellerId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {      \&quot;columns\&quot;: [          \&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;sellerName\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot;      ],      \&quot;data\&quot;: [          [168423, 1110222, \&quot;118883955\&quot;, \&quot;2019-05-01\&quot;, 14542, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110222, \&quot;118883955\&quot;, \&quot;2019-06-01\&quot;, 16619, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110225, \&quot;117980027\&quot;, \&quot;2019-05-01\&quot;, 12502, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],          [168423, 1110225, \&quot;117980027\&quot;, \&quot;2019-06-01\&quot;, 20266, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0]      ],      \&quot;rows\&quot;: 4  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and include the campaign id, seller id, and seller name.  The interval column comes next and defines the aggregation period. The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param campaignId Show only metrics for this campaign (default all campaigns) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellerCampaignsStatsAsync(Integer advertiserId, String campaignId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellerCampaignsStatsValidateBeforeCall(advertiserId, campaignId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellers
     * @param advertiserId Return only sellers belonging to the specified advertiser (optional)
     * @param campaignId Return only sellers belonging to the specified campaign (optional)
     * @param sellerName Return only sellers with the matching name. (optional)
     * @param sellerStatus Return only sellers with specific status. (optional)
     * @param withBudgetStatus Return only sellers with specific budget status. (optional)
     * @param withProducts Return only sellers with or without products in catalog. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellersCall(Integer advertiserId, Integer campaignId, String sellerName, String sellerStatus, String withBudgetStatus, Boolean withProducts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (sellerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerName", sellerName));
        }

        if (sellerStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerStatus", sellerStatus));
        }

        if (withBudgetStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withBudgetStatus", withBudgetStatus));
        }

        if (withProducts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withProducts", withProducts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellersValidateBeforeCall(Integer advertiserId, Integer campaignId, String sellerName, String sellerStatus, String withBudgetStatus, Boolean withProducts, final ApiCallback _callback) throws ApiException {
        return getMarketplaceSellersCall(advertiserId, campaignId, sellerName, sellerStatus, withBudgetStatus, withProducts, _callback);

    }

    /**
     * 
     * Return a collection of sellers filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used.
     * @param advertiserId Return only sellers belonging to the specified advertiser (optional)
     * @param campaignId Return only sellers belonging to the specified campaign (optional)
     * @param sellerName Return only sellers with the matching name. (optional)
     * @param sellerStatus Return only sellers with specific status. (optional)
     * @param withBudgetStatus Return only sellers with specific budget status. (optional)
     * @param withProducts Return only sellers with or without products in catalog. (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerBudgetMessage> getMarketplaceSellers(Integer advertiserId, Integer campaignId, String sellerName, String sellerStatus, String withBudgetStatus, Boolean withProducts) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> localVarResp = getMarketplaceSellersWithHttpInfo(advertiserId, campaignId, sellerName, sellerStatus, withBudgetStatus, withProducts);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a collection of sellers filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used.
     * @param advertiserId Return only sellers belonging to the specified advertiser (optional)
     * @param campaignId Return only sellers belonging to the specified campaign (optional)
     * @param sellerName Return only sellers with the matching name. (optional)
     * @param sellerStatus Return only sellers with specific status. (optional)
     * @param withBudgetStatus Return only sellers with specific budget status. (optional)
     * @param withProducts Return only sellers with or without products in catalog. (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerBudgetMessage>> getMarketplaceSellersWithHttpInfo(Integer advertiserId, Integer campaignId, String sellerName, String sellerStatus, String withBudgetStatus, Boolean withProducts) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellersValidateBeforeCall(advertiserId, campaignId, sellerName, sellerStatus, withBudgetStatus, withProducts, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a collection of sellers filtered by optional filter parameters.  If all parameters are omitted the entire collection to which the user has  access is returned. Returned sellers must satisfy all supplied filter  criteria if multiple parameters are used.
     * @param advertiserId Return only sellers belonging to the specified advertiser (optional)
     * @param campaignId Return only sellers belonging to the specified campaign (optional)
     * @param sellerName Return only sellers with the matching name. (optional)
     * @param sellerStatus Return only sellers with specific status. (optional)
     * @param withBudgetStatus Return only sellers with specific budget status. (optional)
     * @param withProducts Return only sellers with or without products in catalog. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellersAsync(Integer advertiserId, Integer campaignId, String sellerName, String sellerStatus, String withBudgetStatus, Boolean withProducts, final ApiCallback<List<SellerBudgetMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellersValidateBeforeCall(advertiserId, campaignId, sellerName, sellerStatus, withBudgetStatus, withProducts, _callback);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellersByAdvertiser
     * @param advertiserId Id of the advertiser (required)
     * @param partnerId Id of the partner (optional)
     * @param requestBody Names of the sellers to associate with new Ids (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellersByAdvertiserCall(Integer advertiserId, Integer partnerId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/advertisers/{advertiserId}/sellers"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (partnerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partnerId", partnerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellersByAdvertiserValidateBeforeCall(Integer advertiserId, Integer partnerId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getMarketplaceSellersByAdvertiser(Async)");
        }

        return getMarketplaceSellersByAdvertiserCall(advertiserId, partnerId, requestBody, _callback);

    }

    /**
     * 
     * Create new sellers for an advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param partnerId Id of the partner (optional)
     * @param requestBody Names of the sellers to associate with new Ids (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getMarketplaceSellersByAdvertiser(Integer advertiserId, Integer partnerId, List<String> requestBody) throws ApiException {
        getMarketplaceSellersByAdvertiserWithHttpInfo(advertiserId, partnerId, requestBody);
    }

    /**
     * 
     * Create new sellers for an advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param partnerId Id of the partner (optional)
     * @param requestBody Names of the sellers to associate with new Ids (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMarketplaceSellersByAdvertiserWithHttpInfo(Integer advertiserId, Integer partnerId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellersByAdvertiserValidateBeforeCall(advertiserId, partnerId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create new sellers for an advertiser
     * @param advertiserId Id of the advertiser (required)
     * @param partnerId Id of the partner (optional)
     * @param requestBody Names of the sellers to associate with new Ids (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellersByAdvertiserAsync(Integer advertiserId, Integer partnerId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellersByAdvertiserValidateBeforeCall(advertiserId, partnerId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceSellersStats
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellersStatsCall(Integer advertiserId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/stats/sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (clickAttributionPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clickAttributionPolicy", clickAttributionPolicy));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (intervalSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervalSize", intervalSize));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceSellersStatsValidateBeforeCall(Integer advertiserId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate, final ApiCallback _callback) throws ApiException {
        return getMarketplaceSellersStatsCall(advertiserId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate, _callback);

    }

    /**
     * 
     * ## Dimensions                Get performance statistics aggregated for _sellers_. The seller id appears  in the output in the first column and the seller name appears in the second.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by seller id, date or count.                Filtering the results to events associated with a specific seller is done by setting  the &#x60;sellerId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {      \&quot;columns\&quot;: [\&quot;sellerId\&quot;, \&quot;sellerName\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot;],      \&quot;data\&quot;: [         [1200972, \&quot;sellerA\&quot;, \&quot;2019-05-01\&quot;, 14542, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],         [1200972, \&quot;sellerA\&quot;, \&quot;2019-06-01\&quot;, 16619, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0],         [1200974, \&quot;sellerB\&quot;, \&quot;2019-05-01\&quot;, 10102, 47, 3.29, 3, 396000.0, 0.063, 1.096, 8.308E-6, 120364.741],         [1200974, \&quot;sellerB\&quot;, \&quot;2019-06-01\&quot;, 11576, 54, 3.78, 1, 132000.0, 0.018, 3.78, 2.863E-5, 34920.634]      ],      \&quot;rows\&quot;: 4  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and include the seller id and seller name.  The interval column comes next and defines the aggregation period. The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining metrics depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getMarketplaceSellersStats(Integer advertiserId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate) throws ApiException {
        ApiResponse<byte[]> localVarResp = getMarketplaceSellersStatsWithHttpInfo(advertiserId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate);
        return localVarResp.getData();
    }

    /**
     * 
     * ## Dimensions                Get performance statistics aggregated for _sellers_. The seller id appears  in the output in the first column and the seller name appears in the second.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by seller id, date or count.                Filtering the results to events associated with a specific seller is done by setting  the &#x60;sellerId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {      \&quot;columns\&quot;: [\&quot;sellerId\&quot;, \&quot;sellerName\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot;],      \&quot;data\&quot;: [         [1200972, \&quot;sellerA\&quot;, \&quot;2019-05-01\&quot;, 14542, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],         [1200972, \&quot;sellerA\&quot;, \&quot;2019-06-01\&quot;, 16619, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0],         [1200974, \&quot;sellerB\&quot;, \&quot;2019-05-01\&quot;, 10102, 47, 3.29, 3, 396000.0, 0.063, 1.096, 8.308E-6, 120364.741],         [1200974, \&quot;sellerB\&quot;, \&quot;2019-06-01\&quot;, 11576, 54, 3.78, 1, 132000.0, 0.018, 3.78, 2.863E-5, 34920.634]      ],      \&quot;rows\&quot;: 4  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and include the seller id and seller name.  The interval column comes next and defines the aggregation period. The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining metrics depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getMarketplaceSellersStatsWithHttpInfo(Integer advertiserId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceSellersStatsValidateBeforeCall(advertiserId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ## Dimensions                Get performance statistics aggregated for _sellers_. The seller id appears  in the output in the first column and the seller name appears in the second.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by seller id, date or count.                Filtering the results to events associated with a specific seller is done by setting  the &#x60;sellerId&#x60; filter parameter to the desired value.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 31 days. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {      \&quot;columns\&quot;: [\&quot;sellerId\&quot;, \&quot;sellerName\&quot;, \&quot;month\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;saleUnits\&quot;, \&quot;revenue\&quot;, \&quot;cr\&quot;, \&quot;cpo\&quot;, \&quot;cos\&quot;, \&quot;roas\&quot;],      \&quot;data\&quot;: [         [1200972, \&quot;sellerA\&quot;, \&quot;2019-05-01\&quot;, 14542, 48, 3.36, 0, 0.0, 0.0, null, null, 0.0],         [1200972, \&quot;sellerA\&quot;, \&quot;2019-06-01\&quot;, 16619, 53, 3.71, 0, 0.0, 0.0, null, null, 0.0],         [1200974, \&quot;sellerB\&quot;, \&quot;2019-05-01\&quot;, 10102, 47, 3.29, 3, 396000.0, 0.063, 1.096, 8.308E-6, 120364.741],         [1200974, \&quot;sellerB\&quot;, \&quot;2019-06-01\&quot;, 11576, 54, 3.78, 1, 132000.0, 0.018, 3.78, 2.863E-5, 34920.634]      ],      \&quot;rows\&quot;: 4  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and include the seller id and seller name.  The interval column comes next and defines the aggregation period. The interval size is  determined by the &#x60;intervalSize&#x60; parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining metrics depend on the &#x60;clickAttributionPolicy&#x60; parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. Id dimensions are numbers while name and date dimensions are strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. A divide by zero yields null. The  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param advertiserId Show only metrics for this advertiser. (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional, default to AnySeller)
     * @param count Return up to the first count rows of data (default is all rows) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional, default to Day)
     * @param sellerId Show only metrics for this seller (default all sellers) (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceSellersStatsAsync(Integer advertiserId, String clickAttributionPolicy, Integer count, OffsetDateTime endDate, String intervalSize, String sellerId, OffsetDateTime startDate, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceSellersStatsValidateBeforeCall(advertiserId, clickAttributionPolicy, count, endDate, intervalSize, sellerId, startDate, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAdSetCategoryBids
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAdSetCategoryBidsCall(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAdSetCategoryBidListRequest;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/{ad-set-id}/category-bids"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAdSetCategoryBidsValidateBeforeCall(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling patchAdSetCategoryBids(Async)");
        }

        return patchAdSetCategoryBidsCall(adSetId, patchAdSetCategoryBidListRequest, _callback);

    }

    /**
     * 
     * Patch Category Bids for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @return PatchAdSetCategoryBidResultListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public PatchAdSetCategoryBidResultListResponse patchAdSetCategoryBids(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest) throws ApiException {
        ApiResponse<PatchAdSetCategoryBidResultListResponse> localVarResp = patchAdSetCategoryBidsWithHttpInfo(adSetId, patchAdSetCategoryBidListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch Category Bids for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @return ApiResponse&lt;PatchAdSetCategoryBidResultListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchAdSetCategoryBidResultListResponse> patchAdSetCategoryBidsWithHttpInfo(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest) throws ApiException {
        okhttp3.Call localVarCall = patchAdSetCategoryBidsValidateBeforeCall(adSetId, patchAdSetCategoryBidListRequest, null);
        Type localVarReturnType = new TypeToken<PatchAdSetCategoryBidResultListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch Category Bids for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAdSetCategoryBidsAsync(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest, final ApiCallback<PatchAdSetCategoryBidResultListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAdSetCategoryBidsValidateBeforeCall(adSetId, patchAdSetCategoryBidListRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchAdSetCategoryBidResultListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAdSets
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAdSetsCall(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestsPatchAdSetV24Q3;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAdSetsValidateBeforeCall(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3, final ApiCallback _callback) throws ApiException {
        return patchAdSetsCall(requestsPatchAdSetV24Q3, _callback);

    }

    /**
     * 
     * Patch a list of AdSets.
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @return ResponsesAdSetIdV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesAdSetIdV24Q3 patchAdSets(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3) throws ApiException {
        ApiResponse<ResponsesAdSetIdV24Q3> localVarResp = patchAdSetsWithHttpInfo(requestsPatchAdSetV24Q3);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch a list of AdSets.
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @return ApiResponse&lt;ResponsesAdSetIdV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesAdSetIdV24Q3> patchAdSetsWithHttpInfo(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3) throws ApiException {
        okhttp3.Call localVarCall = patchAdSetsValidateBeforeCall(requestsPatchAdSetV24Q3, null);
        Type localVarReturnType = new TypeToken<ResponsesAdSetIdV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch a list of AdSets.
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAdSetsAsync(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3, final ApiCallback<ResponsesAdSetIdV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAdSetsValidateBeforeCall(requestsPatchAdSetV24Q3, _callback);
        Type localVarReturnType = new TypeToken<ResponsesAdSetIdV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCampaigns
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCampaignsCall(PatchCampaignListRequest patchCampaignListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchCampaignListRequest;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCampaignsValidateBeforeCall(PatchCampaignListRequest patchCampaignListRequest, final ApiCallback _callback) throws ApiException {
        return patchCampaignsCall(patchCampaignListRequest, _callback);

    }

    /**
     * 
     * Patch a list of Campaigns.
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @return PatchResultCampaignListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
     </table>
     */
    public PatchResultCampaignListResponse patchCampaigns(PatchCampaignListRequest patchCampaignListRequest) throws ApiException {
        ApiResponse<PatchResultCampaignListResponse> localVarResp = patchCampaignsWithHttpInfo(patchCampaignListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch a list of Campaigns.
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @return ApiResponse&lt;PatchResultCampaignListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchResultCampaignListResponse> patchCampaignsWithHttpInfo(PatchCampaignListRequest patchCampaignListRequest) throws ApiException {
        okhttp3.Call localVarCall = patchCampaignsValidateBeforeCall(patchCampaignListRequest, null);
        Type localVarReturnType = new TypeToken<PatchResultCampaignListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch a list of Campaigns.
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCampaignsAsync(PatchCampaignListRequest patchCampaignListRequest, final ApiCallback<PatchResultCampaignListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCampaignsValidateBeforeCall(patchCampaignListRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchResultCampaignListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDisplayMultipliers
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDisplayMultipliersCall(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAdSetDisplayMultiplierListRequest;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDisplayMultipliersValidateBeforeCall(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling patchDisplayMultipliers(Async)");
        }

        return patchDisplayMultipliersCall(adSetId, patchAdSetDisplayMultiplierListRequest, _callback);

    }

    /**
     * 
     * Patch Display Multipliers for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @return PatchAdSetDisplayMultiplierResultListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public PatchAdSetDisplayMultiplierResultListResponse patchDisplayMultipliers(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest) throws ApiException {
        ApiResponse<PatchAdSetDisplayMultiplierResultListResponse> localVarResp = patchDisplayMultipliersWithHttpInfo(adSetId, patchAdSetDisplayMultiplierListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch Display Multipliers for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @return ApiResponse&lt;PatchAdSetDisplayMultiplierResultListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchAdSetDisplayMultiplierResultListResponse> patchDisplayMultipliersWithHttpInfo(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest) throws ApiException {
        okhttp3.Call localVarCall = patchDisplayMultipliersValidateBeforeCall(adSetId, patchAdSetDisplayMultiplierListRequest, null);
        Type localVarReturnType = new TypeToken<PatchAdSetDisplayMultiplierResultListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch Display Multipliers for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDisplayMultipliersAsync(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest, final ApiCallback<PatchAdSetDisplayMultiplierResultListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDisplayMultipliersValidateBeforeCall(adSetId, patchAdSetDisplayMultiplierListRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchAdSetDisplayMultiplierResultListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAdSets
     * @param adSetSearchRequestV24Q3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAdSetsCall(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adSetSearchRequestV24Q3;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAdSetsValidateBeforeCall(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3, final ApiCallback _callback) throws ApiException {
        return searchAdSetsCall(adSetSearchRequestV24Q3, _callback);

    }

    /**
     * 
     * Search for ad sets
     * @param adSetSearchRequestV24Q3  (optional)
     * @return ResponsesReadAdSetV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesReadAdSetV24Q3 searchAdSets(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3) throws ApiException {
        ApiResponse<ResponsesReadAdSetV24Q3> localVarResp = searchAdSetsWithHttpInfo(adSetSearchRequestV24Q3);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for ad sets
     * @param adSetSearchRequestV24Q3  (optional)
     * @return ApiResponse&lt;ResponsesReadAdSetV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesReadAdSetV24Q3> searchAdSetsWithHttpInfo(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3) throws ApiException {
        okhttp3.Call localVarCall = searchAdSetsValidateBeforeCall(adSetSearchRequestV24Q3, null);
        Type localVarReturnType = new TypeToken<ResponsesReadAdSetV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for ad sets
     * @param adSetSearchRequestV24Q3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAdSetsAsync(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3, final ApiCallback<ResponsesReadAdSetV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAdSetsValidateBeforeCall(adSetSearchRequestV24Q3, _callback);
        Type localVarReturnType = new TypeToken<ResponsesReadAdSetV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCampaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCampaignsCall(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignSearchRequestV23Q1;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/campaigns/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCampaignsValidateBeforeCall(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1, final ApiCallback _callback) throws ApiException {
        return searchCampaignsCall(campaignSearchRequestV23Q1, _callback);

    }

    /**
     * 
     * Search for campaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @return CampaignV23Q1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
     </table>
     */
    public CampaignV23Q1ListResponse searchCampaigns(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1) throws ApiException {
        ApiResponse<CampaignV23Q1ListResponse> localVarResp = searchCampaignsWithHttpInfo(campaignSearchRequestV23Q1);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for campaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @return ApiResponse&lt;CampaignV23Q1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignV23Q1ListResponse> searchCampaignsWithHttpInfo(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1) throws ApiException {
        okhttp3.Call localVarCall = searchCampaignsValidateBeforeCall(campaignSearchRequestV23Q1, null);
        Type localVarReturnType = new TypeToken<CampaignV23Q1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for campaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCampaignsAsync(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1, final ApiCallback<CampaignV23Q1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCampaignsValidateBeforeCall(campaignSearchRequestV23Q1, _callback);
        Type localVarReturnType = new TypeToken<CampaignV23Q1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startAdSets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startAdSetsCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestsAdSetId;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startAdSetsValidateBeforeCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        return startAdSetsCall(requestsAdSetId, _callback);

    }

    /**
     * 
     * Start the specified list of ad sets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @return ResponsesAdSetId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesAdSetId startAdSets(RequestsAdSetId requestsAdSetId) throws ApiException {
        ApiResponse<ResponsesAdSetId> localVarResp = startAdSetsWithHttpInfo(requestsAdSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Start the specified list of ad sets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @return ApiResponse&lt;ResponsesAdSetId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesAdSetId> startAdSetsWithHttpInfo(RequestsAdSetId requestsAdSetId) throws ApiException {
        okhttp3.Call localVarCall = startAdSetsValidateBeforeCall(requestsAdSetId, null);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start the specified list of ad sets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startAdSetsAsync(RequestsAdSetId requestsAdSetId, final ApiCallback<ResponsesAdSetId> _callback) throws ApiException {

        okhttp3.Call localVarCall = startAdSetsValidateBeforeCall(requestsAdSetId, _callback);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopAdSets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopAdSetsCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestsAdSetId;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopAdSetsValidateBeforeCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        return stopAdSetsCall(requestsAdSetId, _callback);

    }

    /**
     * 
     * Stop the specified list of ad sets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @return ResponsesAdSetId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesAdSetId stopAdSets(RequestsAdSetId requestsAdSetId) throws ApiException {
        ApiResponse<ResponsesAdSetId> localVarResp = stopAdSetsWithHttpInfo(requestsAdSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Stop the specified list of ad sets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @return ApiResponse&lt;ResponsesAdSetId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesAdSetId> stopAdSetsWithHttpInfo(RequestsAdSetId requestsAdSetId) throws ApiException {
        okhttp3.Call localVarCall = stopAdSetsValidateBeforeCall(requestsAdSetId, null);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop the specified list of ad sets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopAdSetsAsync(RequestsAdSetId requestsAdSetId, final ApiCallback<ResponsesAdSetId> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopAdSetsValidateBeforeCall(requestsAdSetId, _callback);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdSetAudience
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdSetAudienceCall(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adSetAudienceLinkInputEntityV1;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/ad-sets/{ad-set-id}/audience"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdSetAudienceValidateBeforeCall(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling updateAdSetAudience(Async)");
        }

        // verify the required parameter 'adSetAudienceLinkInputEntityV1' is set
        if (adSetAudienceLinkInputEntityV1 == null) {
            throw new ApiException("Missing the required parameter 'adSetAudienceLinkInputEntityV1' when calling updateAdSetAudience(Async)");
        }

        return updateAdSetAudienceCall(adSetId, adSetAudienceLinkInputEntityV1, _callback);

    }

    /**
     * 
     * Link or unlink an audience with an ad set
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @return AdSetAudienceLinkEntityV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdSetAudienceLinkEntityV1Response updateAdSetAudience(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1) throws ApiException {
        ApiResponse<AdSetAudienceLinkEntityV1Response> localVarResp = updateAdSetAudienceWithHttpInfo(adSetId, adSetAudienceLinkInputEntityV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Link or unlink an audience with an ad set
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @return ApiResponse&lt;AdSetAudienceLinkEntityV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetAudienceLinkEntityV1Response> updateAdSetAudienceWithHttpInfo(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1) throws ApiException {
        okhttp3.Call localVarCall = updateAdSetAudienceValidateBeforeCall(adSetId, adSetAudienceLinkInputEntityV1, null);
        Type localVarReturnType = new TypeToken<AdSetAudienceLinkEntityV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Link or unlink an audience with an ad set
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdSetAudienceAsync(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1, final ApiCallback<AdSetAudienceLinkEntityV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdSetAudienceValidateBeforeCall(adSetId, adSetAudienceLinkInputEntityV1, _callback);
        Type localVarReturnType = new TypeToken<AdSetAudienceLinkEntityV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMarketplaceSellerBudget
     * @param budgetId Id of the budget (required)
     * @param updateSellerBudgetMessageBase  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerBudgetCall(Long budgetId, UpdateSellerBudgetMessageBase updateSellerBudgetMessageBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSellerBudgetMessageBase;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/budgets/{budgetId}"
            .replace("{" + "budgetId" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMarketplaceSellerBudgetValidateBeforeCall(Long budgetId, UpdateSellerBudgetMessageBase updateSellerBudgetMessageBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateMarketplaceSellerBudget(Async)");
        }

        return updateMarketplaceSellerBudgetCall(budgetId, updateSellerBudgetMessageBase, _callback);

    }

    /**
     * 
     * Modify an existing active budget to change its limitations or status.  All three types of budgets can be modified.                See the additional restrictions listed in the PATCH budgets endpoint.
     * @param budgetId Id of the budget (required)
     * @param updateSellerBudgetMessageBase  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateMarketplaceSellerBudget(Long budgetId, UpdateSellerBudgetMessageBase updateSellerBudgetMessageBase) throws ApiException {
        updateMarketplaceSellerBudgetWithHttpInfo(budgetId, updateSellerBudgetMessageBase);
    }

    /**
     * 
     * Modify an existing active budget to change its limitations or status.  All three types of budgets can be modified.                See the additional restrictions listed in the PATCH budgets endpoint.
     * @param budgetId Id of the budget (required)
     * @param updateSellerBudgetMessageBase  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMarketplaceSellerBudgetWithHttpInfo(Long budgetId, UpdateSellerBudgetMessageBase updateSellerBudgetMessageBase) throws ApiException {
        okhttp3.Call localVarCall = updateMarketplaceSellerBudgetValidateBeforeCall(budgetId, updateSellerBudgetMessageBase, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Modify an existing active budget to change its limitations or status.  All three types of budgets can be modified.                See the additional restrictions listed in the PATCH budgets endpoint.
     * @param budgetId Id of the budget (required)
     * @param updateSellerBudgetMessageBase  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerBudgetAsync(Long budgetId, UpdateSellerBudgetMessageBase updateSellerBudgetMessageBase, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMarketplaceSellerBudgetValidateBeforeCall(budgetId, updateSellerBudgetMessageBase, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMarketplaceSellerBudgets
     * @param updateSellerBudgetMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerBudgetsCall(List<UpdateSellerBudgetMessage> updateSellerBudgetMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSellerBudgetMessage;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMarketplaceSellerBudgetsValidateBeforeCall(List<UpdateSellerBudgetMessage> updateSellerBudgetMessage, final ApiCallback _callback) throws ApiException {
        return updateMarketplaceSellerBudgetsCall(updateSellerBudgetMessage, _callback);

    }

    /**
     * 
     * Modify one or more existing active budgets to change their limitations or status.  All three types of budgets can be modified.                The following constraints apply when modifying an existing budget.                • &lt;b&gt;campaignIds&lt;/b&gt;: a non-empty subset of the original campaign ids MAY be supplied&lt;br /&gt;  • &lt;b&gt;amount&lt;/b&gt;: an amount MAY be supplied only if the type is not Uncapped and if supplied it MUST be non-negative&lt;br /&gt;  • &lt;b&gt;startDate&lt;/b&gt;: a future start date MAY be supplied for budgets that have not yet started&lt;br /&gt;  • &lt;b&gt;endDate&lt;/b&gt;: an end date MAY be supplied and if supplied MUST be a future date greater than the start date&lt;br /&gt;                Other attributes MUST NOT be supplied.                Adding new campaigns to a budget is not allowed. In addition, reducing the amount for  a Capped budget to a value less than the current spend not allowed.
     * @param updateSellerBudgetMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateMarketplaceSellerBudgets(List<UpdateSellerBudgetMessage> updateSellerBudgetMessage) throws ApiException {
        updateMarketplaceSellerBudgetsWithHttpInfo(updateSellerBudgetMessage);
    }

    /**
     * 
     * Modify one or more existing active budgets to change their limitations or status.  All three types of budgets can be modified.                The following constraints apply when modifying an existing budget.                • &lt;b&gt;campaignIds&lt;/b&gt;: a non-empty subset of the original campaign ids MAY be supplied&lt;br /&gt;  • &lt;b&gt;amount&lt;/b&gt;: an amount MAY be supplied only if the type is not Uncapped and if supplied it MUST be non-negative&lt;br /&gt;  • &lt;b&gt;startDate&lt;/b&gt;: a future start date MAY be supplied for budgets that have not yet started&lt;br /&gt;  • &lt;b&gt;endDate&lt;/b&gt;: an end date MAY be supplied and if supplied MUST be a future date greater than the start date&lt;br /&gt;                Other attributes MUST NOT be supplied.                Adding new campaigns to a budget is not allowed. In addition, reducing the amount for  a Capped budget to a value less than the current spend not allowed.
     * @param updateSellerBudgetMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMarketplaceSellerBudgetsWithHttpInfo(List<UpdateSellerBudgetMessage> updateSellerBudgetMessage) throws ApiException {
        okhttp3.Call localVarCall = updateMarketplaceSellerBudgetsValidateBeforeCall(updateSellerBudgetMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Modify one or more existing active budgets to change their limitations or status.  All three types of budgets can be modified.                The following constraints apply when modifying an existing budget.                • &lt;b&gt;campaignIds&lt;/b&gt;: a non-empty subset of the original campaign ids MAY be supplied&lt;br /&gt;  • &lt;b&gt;amount&lt;/b&gt;: an amount MAY be supplied only if the type is not Uncapped and if supplied it MUST be non-negative&lt;br /&gt;  • &lt;b&gt;startDate&lt;/b&gt;: a future start date MAY be supplied for budgets that have not yet started&lt;br /&gt;  • &lt;b&gt;endDate&lt;/b&gt;: an end date MAY be supplied and if supplied MUST be a future date greater than the start date&lt;br /&gt;                Other attributes MUST NOT be supplied.                Adding new campaigns to a budget is not allowed. In addition, reducing the amount for  a Capped budget to a value less than the current spend not allowed.
     * @param updateSellerBudgetMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerBudgetsAsync(List<UpdateSellerBudgetMessage> updateSellerBudgetMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMarketplaceSellerBudgetsValidateBeforeCall(updateSellerBudgetMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMarketplaceSellerCampaign
     * @param sellerCampaignId Id of the existing seller campaign to update (required)
     * @param bid The new bid for the seller campaign. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerCampaignCall(String sellerCampaignId, Double bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/seller-campaigns/{sellerCampaignId}"
            .replace("{" + "sellerCampaignId" + "}", localVarApiClient.escapeString(sellerCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bid", bid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMarketplaceSellerCampaignValidateBeforeCall(String sellerCampaignId, Double bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerCampaignId' is set
        if (sellerCampaignId == null) {
            throw new ApiException("Missing the required parameter 'sellerCampaignId' when calling updateMarketplaceSellerCampaign(Async)");
        }

        return updateMarketplaceSellerCampaignCall(sellerCampaignId, bid, _callback);

    }

    /**
     * 
     * Patching a seller campaign allows the bid to be modified. The bid must be a non-negative value.  Setting the bid to zero will make a seller campaign inactive.                The currency used for bids will be the default currency of the campaign.
     * @param sellerCampaignId Id of the existing seller campaign to update (required)
     * @param bid The new bid for the seller campaign. (optional)
     * @return SellerCampaignMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SellerCampaignMessage updateMarketplaceSellerCampaign(String sellerCampaignId, Double bid) throws ApiException {
        ApiResponse<SellerCampaignMessage> localVarResp = updateMarketplaceSellerCampaignWithHttpInfo(sellerCampaignId, bid);
        return localVarResp.getData();
    }

    /**
     * 
     * Patching a seller campaign allows the bid to be modified. The bid must be a non-negative value.  Setting the bid to zero will make a seller campaign inactive.                The currency used for bids will be the default currency of the campaign.
     * @param sellerCampaignId Id of the existing seller campaign to update (required)
     * @param bid The new bid for the seller campaign. (optional)
     * @return ApiResponse&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerCampaignMessage> updateMarketplaceSellerCampaignWithHttpInfo(String sellerCampaignId, Double bid) throws ApiException {
        okhttp3.Call localVarCall = updateMarketplaceSellerCampaignValidateBeforeCall(sellerCampaignId, bid, null);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patching a seller campaign allows the bid to be modified. The bid must be a non-negative value.  Setting the bid to zero will make a seller campaign inactive.                The currency used for bids will be the default currency of the campaign.
     * @param sellerCampaignId Id of the existing seller campaign to update (required)
     * @param bid The new bid for the seller campaign. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerCampaignAsync(String sellerCampaignId, Double bid, final ApiCallback<SellerCampaignMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMarketplaceSellerCampaignValidateBeforeCall(sellerCampaignId, bid, _callback);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMarketplaceSellerCampaigns
     * @param sellerCampaignUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerCampaignsCall(List<SellerCampaignUpdate> sellerCampaignUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sellerCampaignUpdate;

        // create path and map variables
        String localVarPath = "/2025-07/marketing-solutions/marketplace-performance-outcomes/seller-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMarketplaceSellerCampaignsValidateBeforeCall(List<SellerCampaignUpdate> sellerCampaignUpdate, final ApiCallback _callback) throws ApiException {
        return updateMarketplaceSellerCampaignsCall(sellerCampaignUpdate, _callback);

    }

    /**
     * 
     * Patching a collection of seller campaigns allows their bids to be modified.  Each bid must be a non-negative value. Setting the bid to zero will make a seller campaign inactive.                The currency used for bids will be the default currency of the campaign.
     * @param sellerCampaignUpdate  (optional)
     * @return List&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerCampaignMessage> updateMarketplaceSellerCampaigns(List<SellerCampaignUpdate> sellerCampaignUpdate) throws ApiException {
        ApiResponse<List<SellerCampaignMessage>> localVarResp = updateMarketplaceSellerCampaignsWithHttpInfo(sellerCampaignUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Patching a collection of seller campaigns allows their bids to be modified.  Each bid must be a non-negative value. Setting the bid to zero will make a seller campaign inactive.                The currency used for bids will be the default currency of the campaign.
     * @param sellerCampaignUpdate  (optional)
     * @return ApiResponse&lt;List&lt;SellerCampaignMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerCampaignMessage>> updateMarketplaceSellerCampaignsWithHttpInfo(List<SellerCampaignUpdate> sellerCampaignUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateMarketplaceSellerCampaignsValidateBeforeCall(sellerCampaignUpdate, null);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patching a collection of seller campaigns allows their bids to be modified.  Each bid must be a non-negative value. Setting the bid to zero will make a seller campaign inactive.                The currency used for bids will be the default currency of the campaign.
     * @param sellerCampaignUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceSellerCampaignsAsync(List<SellerCampaignUpdate> sellerCampaignUpdate, final ApiCallback<List<SellerCampaignMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMarketplaceSellerCampaignsValidateBeforeCall(sellerCampaignUpdate, _callback);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
