/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2024-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2024_10.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2024_10.JSON;

/**
 * Async Revenue report body request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AsyncRevenueReport {
  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "accountIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  private List<String> accountIds = null;

  /**
   * Gets or Sets advertiserTypes
   */
  @JsonAdapter(AdvertiserTypesEnum.Adapter.class)
  public enum AdvertiserTypesEnum {
    RETAILER("retailer"),
    
    BRAND("brand"),
    
    SELLER("seller");

    private String value;

    AdvertiserTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdvertiserTypesEnum fromValue(String value) {
      for (AdvertiserTypesEnum b : AdvertiserTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdvertiserTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdvertiserTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdvertiserTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdvertiserTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADVERTISER_TYPES = "advertiserTypes";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_TYPES)
  private List<AdvertiserTypesEnum> advertiserTypes = null;

  /**
   * Filter on buy type: Auction, Preferred Deals or Sponsorship
   */
  @JsonAdapter(BuyTypeEnum.Adapter.class)
  public enum BuyTypeEnum {
    AUCTION("auction"),
    
    PREFERREDDEALS("preferredDeals"),
    
    SPONSORSHIP("sponsorship");

    private String value;

    BuyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BuyTypeEnum fromValue(String value) {
      for (BuyTypeEnum b : BuyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BuyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BuyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BuyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BuyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BUY_TYPE = "buyType";
  @SerializedName(SERIALIZED_NAME_BUY_TYPE)
  private BuyTypeEnum buyType;

  public static final String SERIALIZED_NAME_CAMPAIGN_IDS = "campaignIds";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_IDS)
  private List<String> campaignIds = null;

  /**
   * Filter the type of campaigns to report on: sponsoredProducts or onSiteDisplays
   */
  @JsonAdapter(CampaignTypeEnum.Adapter.class)
  public enum CampaignTypeEnum {
    ALL("all"),
    
    SPONSOREDPRODUCTS("sponsoredProducts"),
    
    ONSITEDISPLAYS("onSiteDisplays");

    private String value;

    CampaignTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CampaignTypeEnum fromValue(String value) {
      for (CampaignTypeEnum b : CampaignTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CampaignTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CampaignTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CampaignTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CampaignTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CAMPAIGN_TYPE = "campaignType";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_TYPE)
  private CampaignTypeEnum campaignType = CampaignTypeEnum.ALL;

  /**
   * Click attribution window
   */
  @JsonAdapter(ClickAttributionWindowEnum.Adapter.class)
  public enum ClickAttributionWindowEnum {
    NONE("none"),
    
    _7D("7D"),
    
    _14D("14D"),
    
    _30D("30D");

    private String value;

    ClickAttributionWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClickAttributionWindowEnum fromValue(String value) {
      for (ClickAttributionWindowEnum b : ClickAttributionWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClickAttributionWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClickAttributionWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClickAttributionWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClickAttributionWindowEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLICK_ATTRIBUTION_WINDOW = "clickAttributionWindow";
  @SerializedName(SERIALIZED_NAME_CLICK_ATTRIBUTION_WINDOW)
  private ClickAttributionWindowEnum clickAttributionWindow = ClickAttributionWindowEnum.NONE;

  /**
   * Click Match Level: Campaign, Same SKU, Same Category or Same Brand
   */
  @JsonAdapter(ClickMatchLevelEnum.Adapter.class)
  public enum ClickMatchLevelEnum {
    SAMESKU("sameSku"),
    
    SAMECATEGORY("sameCategory"),
    
    SAMEBRAND("sameBrand"),
    
    CAMPAIGN("campaign");

    private String value;

    ClickMatchLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClickMatchLevelEnum fromValue(String value) {
      for (ClickMatchLevelEnum b : ClickMatchLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClickMatchLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClickMatchLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClickMatchLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClickMatchLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLICK_MATCH_LEVEL = "clickMatchLevel";
  @SerializedName(SERIALIZED_NAME_CLICK_MATCH_LEVEL)
  private ClickMatchLevelEnum clickMatchLevel = ClickMatchLevelEnum.CAMPAIGN;

  /**
   * Gets or Sets dimensions
   */
  @JsonAdapter(DimensionsEnum.Adapter.class)
  public enum DimensionsEnum {
    DATE("date"),
    
    HOUR("hour"),
    
    PARENTACCOUNT("parentAccount"),
    
    ACCOUNTID("accountId"),
    
    ACCOUNTNAME("accountName"),
    
    ACCOUNTTYPENAME("accountTypeName"),
    
    ADVERTISERTYPE("advertiserType"),
    
    CAMPAIGNID("campaignId"),
    
    CAMPAIGNNAME("campaignName"),
    
    CAMPAIGNTYPENAME("campaignTypeName"),
    
    CAMPAIGNSTARTDATE("campaignStartDate"),
    
    CAMPAIGNENDDATE("campaignEndDate"),
    
    LINEITEMID("lineItemId"),
    
    LINEITEMNAME("lineItemName"),
    
    LINEITEMSTARTDATE("lineItemStartDate"),
    
    LINEITEMENDDATE("lineItemEndDate"),
    
    LINEITEMSTATUS("lineItemStatus"),
    
    RETAILERID("retailerId"),
    
    RETAILERNAME("retailerName"),
    
    BRANDID("brandId"),
    
    BRANDNAME("brandName"),
    
    PLACEMENTID("placementId"),
    
    PLACEMENTNAME("placementName"),
    
    PAGETYPENAME("pageTypeName"),
    
    ENVIRONMENT("environment"),
    
    PAGECATEGORY("pageCategory"),
    
    ADVPRODUCTID("advProductId"),
    
    ADVPRODUCTNAME("advProductName"),
    
    ADVPRODUCTGTIN("advProductGtin"),
    
    ADVPRODUCTMPN("advProductMpn"),
    
    BUYTYPE("buyType"),
    
    SOLDBY("soldBy"),
    
    SALECHANNEL("saleChannel"),
    
    SALESCHANNEL("salesChannel"),
    
    ATTRIBUTIONSETTINGS("attributionSettings"),
    
    ACTIVITYTYPE("activityType"),
    
    KEYWORD("keyword"),
    
    SKURELATION("skuRelation"),
    
    RETAILERCATEGORYID("retailerCategoryId"),
    
    RETAILERCATEGORYNAME("retailerCategoryName"),
    
    TAXONOMYBREADCRUMB("taxonomyBreadcrumb"),
    
    TAXONOMY1ID("taxonomy1Id"),
    
    TAXONOMY1NAME("taxonomy1Name"),
    
    TAXONOMY2ID("taxonomy2Id"),
    
    TAXONOMY2NAME("taxonomy2Name"),
    
    TAXONOMY3ID("taxonomy3Id"),
    
    TAXONOMY3NAME("taxonomy3Name"),
    
    TAXONOMY4ID("taxonomy4Id"),
    
    TAXONOMY4NAME("taxonomy4Name"),
    
    TAXONOMY5ID("taxonomy5Id"),
    
    TAXONOMY5NAME("taxonomy5Name"),
    
    TAXONOMY6ID("taxonomy6Id"),
    
    TAXONOMY6NAME("taxonomy6Name"),
    
    TAXONOMY7ID("taxonomy7Id"),
    
    TAXONOMY7NAME("taxonomy7Name"),
    
    TARGETEDKEYWORDTYPE("targetedKeywordType");

    private String value;

    DimensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionsEnum fromValue(String value) {
      for (DimensionsEnum b : DimensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<DimensionsEnum> dimensions = null;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  /**
   * Format of the output
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    JSON("json"),
    
    JSON_COMPACT("json-compact"),
    
    JSON_NEWLINE("json-newline"),
    
    CSV("csv");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.JSON;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<String> ids = null;

  public static final String SERIALIZED_NAME_LINE_ITEM_IDS = "lineItemIds";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_IDS)
  private List<String> lineItemIds = null;

  /**
   * Gets or Sets metrics
   */
  @JsonAdapter(MetricsEnum.Adapter.class)
  public enum MetricsEnum {
    NUMBEROFCAMPAIGNS("numberOfCampaigns"),
    
    NUMBEROFLINEITEMS("numberOfLineItems"),
    
    NUMBEROFSKUS("numberOfSkus"),
    
    SKUPRICE("skuPrice"),
    
    PAGEVIEWS("pageViews"),
    
    IMPRESSIONS("impressions"),
    
    PRODUCTCLICKS("productClicks"),
    
    PLACEMENTCLICKS("placementClicks"),
    
    CLICKS("clicks"),
    
    SALES("sales"),
    
    UNITS("units"),
    
    TRANSACTIONS("transactions"),
    
    ASSISTEDSALES("assistedSales"),
    
    ASSISTEDUNITS("assistedUnits"),
    
    REVENUE("revenue"),
    
    OPENAUCTIONREVENUE("openAuctionRevenue"),
    
    PREFERREDDEALSREVENUE("preferredDealsRevenue"),
    
    CTR("ctr"),
    
    CR("cr"),
    
    CPC("cpc"),
    
    CPM("cpm"),
    
    ROAS("roas"),
    
    WORKINGMEDIA("workingMedia"),
    
    NETREVENUE("netRevenue"),
    
    VIDEOVIEWS("videoViews"),
    
    VIDEOSSTARTED("videosStarted"),
    
    VIDEOSPLAYEDTO25("videosPlayedTo25"),
    
    VIDEOSPLAYEDTO50("videosPlayedTo50"),
    
    VIDEOSPLAYEDTO75("videosPlayedTo75"),
    
    VIDEOSPLAYEDTO100("videosPlayedTo100"),
    
    VIDEOPLAYINGRATE("videoPlayingRate"),
    
    VIDEOCOMPLETIONRATE("videoCompletionRate"),
    
    VIDEOIMPRESSIONS("videoImpressions"),
    
    VIDEOMUTED("videoMuted"),
    
    VIDEOUNMUTED("videoUnmuted"),
    
    VIDEORESUMED("videoResumed"),
    
    VIDEOPAUSED("videoPaused"),
    
    VIDEOAVGINTERACTIONRATE("videoAvgInteractionRate"),
    
    VIDEOVIEWABILITY("videoViewability"),
    
    VIDEOSTARTINGRATE("videoStartingRate"),
    
    VIDEOCPC("videoCPC"),
    
    VIDEOCPCV("videoCPCV"),
    
    UNIQUEVISITORS("uniqueVisitors"),
    
    FREQUENCY("frequency");

    private String value;

    MetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricsEnum fromValue(String value) {
      for (MetricsEnum b : MetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricsEnum> metrics = null;

  /**
   * Type of report, if no dimensions and metrics are provided, falls back to advertiser reportType
   */
  @JsonAdapter(ReportTypeEnum.Adapter.class)
  public enum ReportTypeEnum {
    ADVERTISER("advertiser"),
    
    ENVIRONMENT("environment"),
    
    PAGETYPE("pageType"),
    
    PRODUCTCATEGORY("productCategory"),
    
    BRAND("brand");

    private String value;

    ReportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportTypeEnum fromValue(String value) {
      for (ReportTypeEnum b : ReportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private ReportTypeEnum reportType;

  public static final String SERIALIZED_NAME_RETAILER_IDS = "retailerIds";
  @SerializedName(SERIALIZED_NAME_RETAILER_IDS)
  private List<String> retailerIds = null;

  /**
   * Type of revenue
   */
  @JsonAdapter(RevenueTypeEnum.Adapter.class)
  public enum RevenueTypeEnum {
    AUCTION("auction"),
    
    PREFERRED("preferred");

    private String value;

    RevenueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RevenueTypeEnum fromValue(String value) {
      for (RevenueTypeEnum b : RevenueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RevenueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RevenueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RevenueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RevenueTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REVENUE_TYPE = "revenueType";
  @SerializedName(SERIALIZED_NAME_REVENUE_TYPE)
  private RevenueTypeEnum revenueType;

  /**
   * Filter on specific sales channel: offline or online
   */
  @JsonAdapter(SalesChannelEnum.Adapter.class)
  public enum SalesChannelEnum {
    ONLINE("online"),
    
    OFFLINE("offline"),
    
    ALL("all");

    private String value;

    SalesChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalesChannelEnum fromValue(String value) {
      for (SalesChannelEnum b : SalesChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SalesChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalesChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalesChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SalesChannelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private SalesChannelEnum salesChannel = SalesChannelEnum.ALL;

  /**
   * Gets or Sets skuRelations
   */
  @JsonAdapter(SkuRelationsEnum.Adapter.class)
  public enum SkuRelationsEnum {
    SAMESKU("sameSku"),
    
    SAMEPARENTSKU("sameParentSku"),
    
    SAMECATEGORY("sameCategory"),
    
    SAMEBRAND("sameBrand"),
    
    SAMESELLER("sameSeller");

    private String value;

    SkuRelationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkuRelationsEnum fromValue(String value) {
      for (SkuRelationsEnum b : SkuRelationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkuRelationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkuRelationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkuRelationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkuRelationsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SKU_RELATIONS = "skuRelations";
  @SerializedName(SERIALIZED_NAME_SKU_RELATIONS)
  private List<SkuRelationsEnum> skuRelations = null;

  /**
   * Filter on the seller: Indirect Sold, Direct Sold or Private Market
   */
  @JsonAdapter(SoldByEnum.Adapter.class)
  public enum SoldByEnum {
    DIRECTSOLD("directSold"),
    
    INDIRECTSOLD("indirectSold"),
    
    PRIVATEMARKET("privateMarket");

    private String value;

    SoldByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SoldByEnum fromValue(String value) {
      for (SoldByEnum b : SoldByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SoldByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SoldByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SoldByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SoldByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SOLD_BY = "soldBy";
  @SerializedName(SERIALIZED_NAME_SOLD_BY)
  private SoldByEnum soldBy;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * Gets or Sets targetedKeywordTypes
   */
  @JsonAdapter(TargetedKeywordTypesEnum.Adapter.class)
  public enum TargetedKeywordTypesEnum {
    UNKNOWN("unknown"),
    
    GENERIC("generic"),
    
    BRANDED("branded"),
    
    CONQUESTING("conquesting");

    private String value;

    TargetedKeywordTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetedKeywordTypesEnum fromValue(String value) {
      for (TargetedKeywordTypesEnum b : TargetedKeywordTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetedKeywordTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetedKeywordTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetedKeywordTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetedKeywordTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGETED_KEYWORD_TYPES = "targetedKeywordTypes";
  @SerializedName(SERIALIZED_NAME_TARGETED_KEYWORD_TYPES)
  private List<TargetedKeywordTypesEnum> targetedKeywordTypes = null;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone = "UTC";

  /**
   * View attribution window
   */
  @JsonAdapter(ViewAttributionWindowEnum.Adapter.class)
  public enum ViewAttributionWindowEnum {
    NONE("none"),
    
    _1D("1D"),
    
    _7D("7D"),
    
    _14D("14D"),
    
    _30D("30D");

    private String value;

    ViewAttributionWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewAttributionWindowEnum fromValue(String value) {
      for (ViewAttributionWindowEnum b : ViewAttributionWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewAttributionWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewAttributionWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewAttributionWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewAttributionWindowEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIEW_ATTRIBUTION_WINDOW = "viewAttributionWindow";
  @SerializedName(SERIALIZED_NAME_VIEW_ATTRIBUTION_WINDOW)
  private ViewAttributionWindowEnum viewAttributionWindow = ViewAttributionWindowEnum.NONE;

  /**
   * View Match Level: Campaign, Same SKU, Same Category or Same Brand
   */
  @JsonAdapter(ViewMatchLevelEnum.Adapter.class)
  public enum ViewMatchLevelEnum {
    SAMESKU("sameSku"),
    
    SAMECATEGORY("sameCategory"),
    
    SAMEBRAND("sameBrand"),
    
    CAMPAIGN("campaign");

    private String value;

    ViewMatchLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewMatchLevelEnum fromValue(String value) {
      for (ViewMatchLevelEnum b : ViewMatchLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewMatchLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewMatchLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewMatchLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewMatchLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIEW_MATCH_LEVEL = "viewMatchLevel";
  @SerializedName(SERIALIZED_NAME_VIEW_MATCH_LEVEL)
  private ViewMatchLevelEnum viewMatchLevel = ViewMatchLevelEnum.CAMPAIGN;

  public AsyncRevenueReport() {
  }

  public AsyncRevenueReport accountIds(List<String> accountIds) {
    
    this.accountIds = accountIds;
    return this;
  }

  public AsyncRevenueReport addAccountIdsItem(String accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

   /**
   * Account ids to filter
   * @return accountIds
  **/
  @javax.annotation.Nullable

  public List<String> getAccountIds() {
    return accountIds;
  }


  public void setAccountIds(List<String> accountIds) {
    this.accountIds = accountIds;
  }


  public AsyncRevenueReport advertiserTypes(List<AdvertiserTypesEnum> advertiserTypes) {
    
    this.advertiserTypes = advertiserTypes;
    return this;
  }

  public AsyncRevenueReport addAdvertiserTypesItem(AdvertiserTypesEnum advertiserTypesItem) {
    if (this.advertiserTypes == null) {
      this.advertiserTypes = new ArrayList<>();
    }
    this.advertiserTypes.add(advertiserTypesItem);
    return this;
  }

   /**
   * Filter on the type of advertiser: retailer, brand, seller
   * @return advertiserTypes
  **/
  @javax.annotation.Nullable

  public List<AdvertiserTypesEnum> getAdvertiserTypes() {
    return advertiserTypes;
  }


  public void setAdvertiserTypes(List<AdvertiserTypesEnum> advertiserTypes) {
    this.advertiserTypes = advertiserTypes;
  }


  public AsyncRevenueReport buyType(BuyTypeEnum buyType) {
    
    this.buyType = buyType;
    return this;
  }

   /**
   * Filter on buy type: Auction, Preferred Deals or Sponsorship
   * @return buyType
  **/
  @javax.annotation.Nullable

  public BuyTypeEnum getBuyType() {
    return buyType;
  }


  public void setBuyType(BuyTypeEnum buyType) {
    this.buyType = buyType;
  }


  public AsyncRevenueReport campaignIds(List<String> campaignIds) {
    
    this.campaignIds = campaignIds;
    return this;
  }

  public AsyncRevenueReport addCampaignIdsItem(String campaignIdsItem) {
    if (this.campaignIds == null) {
      this.campaignIds = new ArrayList<>();
    }
    this.campaignIds.add(campaignIdsItem);
    return this;
  }

   /**
   * Campaign ids to filter
   * @return campaignIds
  **/
  @javax.annotation.Nullable

  public List<String> getCampaignIds() {
    return campaignIds;
  }


  public void setCampaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
  }


  public AsyncRevenueReport campaignType(CampaignTypeEnum campaignType) {
    
    this.campaignType = campaignType;
    return this;
  }

   /**
   * Filter the type of campaigns to report on: sponsoredProducts or onSiteDisplays
   * @return campaignType
  **/
  @javax.annotation.Nullable

  public CampaignTypeEnum getCampaignType() {
    return campaignType;
  }


  public void setCampaignType(CampaignTypeEnum campaignType) {
    this.campaignType = campaignType;
  }


  public AsyncRevenueReport clickAttributionWindow(ClickAttributionWindowEnum clickAttributionWindow) {
    
    this.clickAttributionWindow = clickAttributionWindow;
    return this;
  }

   /**
   * Click attribution window
   * @return clickAttributionWindow
  **/
  @javax.annotation.Nullable

  public ClickAttributionWindowEnum getClickAttributionWindow() {
    return clickAttributionWindow;
  }


  public void setClickAttributionWindow(ClickAttributionWindowEnum clickAttributionWindow) {
    this.clickAttributionWindow = clickAttributionWindow;
  }


  public AsyncRevenueReport clickMatchLevel(ClickMatchLevelEnum clickMatchLevel) {
    
    this.clickMatchLevel = clickMatchLevel;
    return this;
  }

   /**
   * Click Match Level: Campaign, Same SKU, Same Category or Same Brand
   * @return clickMatchLevel
  **/
  @javax.annotation.Nullable

  public ClickMatchLevelEnum getClickMatchLevel() {
    return clickMatchLevel;
  }


  public void setClickMatchLevel(ClickMatchLevelEnum clickMatchLevel) {
    this.clickMatchLevel = clickMatchLevel;
  }


  public AsyncRevenueReport dimensions(List<DimensionsEnum> dimensions) {
    
    this.dimensions = dimensions;
    return this;
  }

  public AsyncRevenueReport addDimensionsItem(DimensionsEnum dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * List of dimensions to report on
   * @return dimensions
  **/
  @javax.annotation.Nullable

  public List<DimensionsEnum> getDimensions() {
    return dimensions;
  }


  public void setDimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
  }


  public AsyncRevenueReport endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date
   * @return endDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public AsyncRevenueReport format(FormatEnum format) {
    
    this.format = format;
    return this;
  }

   /**
   * Format of the output
   * @return format
  **/
  @javax.annotation.Nullable

  public FormatEnum getFormat() {
    return format;
  }


  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public AsyncRevenueReport id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Supply account id to report on
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public AsyncRevenueReport ids(List<String> ids) {
    
    this.ids = ids;
    return this;
  }

  public AsyncRevenueReport addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Supply account ids to report on
   * @return ids
  **/
  @javax.annotation.Nullable

  public List<String> getIds() {
    return ids;
  }


  public void setIds(List<String> ids) {
    this.ids = ids;
  }


  public AsyncRevenueReport lineItemIds(List<String> lineItemIds) {
    
    this.lineItemIds = lineItemIds;
    return this;
  }

  public AsyncRevenueReport addLineItemIdsItem(String lineItemIdsItem) {
    if (this.lineItemIds == null) {
      this.lineItemIds = new ArrayList<>();
    }
    this.lineItemIds.add(lineItemIdsItem);
    return this;
  }

   /**
   * Line item ids to filter
   * @return lineItemIds
  **/
  @javax.annotation.Nullable

  public List<String> getLineItemIds() {
    return lineItemIds;
  }


  public void setLineItemIds(List<String> lineItemIds) {
    this.lineItemIds = lineItemIds;
  }


  public AsyncRevenueReport metrics(List<MetricsEnum> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public AsyncRevenueReport addMetricsItem(MetricsEnum metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * List of metrics to report on
   * @return metrics
  **/
  @javax.annotation.Nullable

  public List<MetricsEnum> getMetrics() {
    return metrics;
  }


  public void setMetrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
  }


  public AsyncRevenueReport reportType(ReportTypeEnum reportType) {
    
    this.reportType = reportType;
    return this;
  }

   /**
   * Type of report, if no dimensions and metrics are provided, falls back to advertiser reportType
   * @return reportType
  **/
  @javax.annotation.Nullable

  public ReportTypeEnum getReportType() {
    return reportType;
  }


  public void setReportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
  }


  public AsyncRevenueReport retailerIds(List<String> retailerIds) {
    
    this.retailerIds = retailerIds;
    return this;
  }

  public AsyncRevenueReport addRetailerIdsItem(String retailerIdsItem) {
    if (this.retailerIds == null) {
      this.retailerIds = new ArrayList<>();
    }
    this.retailerIds.add(retailerIdsItem);
    return this;
  }

   /**
   * Retailer ids to filter
   * @return retailerIds
  **/
  @javax.annotation.Nullable

  public List<String> getRetailerIds() {
    return retailerIds;
  }


  public void setRetailerIds(List<String> retailerIds) {
    this.retailerIds = retailerIds;
  }


  public AsyncRevenueReport revenueType(RevenueTypeEnum revenueType) {
    
    this.revenueType = revenueType;
    return this;
  }

   /**
   * Type of revenue
   * @return revenueType
  **/
  @javax.annotation.Nullable

  public RevenueTypeEnum getRevenueType() {
    return revenueType;
  }


  public void setRevenueType(RevenueTypeEnum revenueType) {
    this.revenueType = revenueType;
  }


  public AsyncRevenueReport salesChannel(SalesChannelEnum salesChannel) {
    
    this.salesChannel = salesChannel;
    return this;
  }

   /**
   * Filter on specific sales channel: offline or online
   * @return salesChannel
  **/
  @javax.annotation.Nullable

  public SalesChannelEnum getSalesChannel() {
    return salesChannel;
  }


  public void setSalesChannel(SalesChannelEnum salesChannel) {
    this.salesChannel = salesChannel;
  }


  public AsyncRevenueReport skuRelations(List<SkuRelationsEnum> skuRelations) {
    
    this.skuRelations = skuRelations;
    return this;
  }

  public AsyncRevenueReport addSkuRelationsItem(SkuRelationsEnum skuRelationsItem) {
    if (this.skuRelations == null) {
      this.skuRelations = new ArrayList<>();
    }
    this.skuRelations.add(skuRelationsItem);
    return this;
  }

   /**
   * Filter on sku relations: Same SKU, Same Parent SKU, Same Category, Same Brand or Same Seller
   * @return skuRelations
  **/
  @javax.annotation.Nullable

  public List<SkuRelationsEnum> getSkuRelations() {
    return skuRelations;
  }


  public void setSkuRelations(List<SkuRelationsEnum> skuRelations) {
    this.skuRelations = skuRelations;
  }


  public AsyncRevenueReport soldBy(SoldByEnum soldBy) {
    
    this.soldBy = soldBy;
    return this;
  }

   /**
   * Filter on the seller: Indirect Sold, Direct Sold or Private Market
   * @return soldBy
  **/
  @javax.annotation.Nullable

  public SoldByEnum getSoldBy() {
    return soldBy;
  }


  public void setSoldBy(SoldByEnum soldBy) {
    this.soldBy = soldBy;
  }


  public AsyncRevenueReport startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public AsyncRevenueReport targetedKeywordTypes(List<TargetedKeywordTypesEnum> targetedKeywordTypes) {
    
    this.targetedKeywordTypes = targetedKeywordTypes;
    return this;
  }

  public AsyncRevenueReport addTargetedKeywordTypesItem(TargetedKeywordTypesEnum targetedKeywordTypesItem) {
    if (this.targetedKeywordTypes == null) {
      this.targetedKeywordTypes = new ArrayList<>();
    }
    this.targetedKeywordTypes.add(targetedKeywordTypesItem);
    return this;
  }

   /**
   * Filter on targeted keyword type: unknown, generic, branded, conquesting
   * @return targetedKeywordTypes
  **/
  @javax.annotation.Nullable

  public List<TargetedKeywordTypesEnum> getTargetedKeywordTypes() {
    return targetedKeywordTypes;
  }


  public void setTargetedKeywordTypes(List<TargetedKeywordTypesEnum> targetedKeywordTypes) {
    this.targetedKeywordTypes = targetedKeywordTypes;
  }


  public AsyncRevenueReport timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Time zone : see criteo developer portal for supported time zones
   * @return timezone
  **/
  @javax.annotation.Nullable

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public AsyncRevenueReport viewAttributionWindow(ViewAttributionWindowEnum viewAttributionWindow) {
    
    this.viewAttributionWindow = viewAttributionWindow;
    return this;
  }

   /**
   * View attribution window
   * @return viewAttributionWindow
  **/
  @javax.annotation.Nullable

  public ViewAttributionWindowEnum getViewAttributionWindow() {
    return viewAttributionWindow;
  }


  public void setViewAttributionWindow(ViewAttributionWindowEnum viewAttributionWindow) {
    this.viewAttributionWindow = viewAttributionWindow;
  }


  public AsyncRevenueReport viewMatchLevel(ViewMatchLevelEnum viewMatchLevel) {
    
    this.viewMatchLevel = viewMatchLevel;
    return this;
  }

   /**
   * View Match Level: Campaign, Same SKU, Same Category or Same Brand
   * @return viewMatchLevel
  **/
  @javax.annotation.Nullable

  public ViewMatchLevelEnum getViewMatchLevel() {
    return viewMatchLevel;
  }


  public void setViewMatchLevel(ViewMatchLevelEnum viewMatchLevel) {
    this.viewMatchLevel = viewMatchLevel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AsyncRevenueReport instance itself
   */
  public AsyncRevenueReport putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncRevenueReport asyncRevenueReport = (AsyncRevenueReport) o;
    return Objects.equals(this.accountIds, asyncRevenueReport.accountIds) &&
        Objects.equals(this.advertiserTypes, asyncRevenueReport.advertiserTypes) &&
        Objects.equals(this.buyType, asyncRevenueReport.buyType) &&
        Objects.equals(this.campaignIds, asyncRevenueReport.campaignIds) &&
        Objects.equals(this.campaignType, asyncRevenueReport.campaignType) &&
        Objects.equals(this.clickAttributionWindow, asyncRevenueReport.clickAttributionWindow) &&
        Objects.equals(this.clickMatchLevel, asyncRevenueReport.clickMatchLevel) &&
        Objects.equals(this.dimensions, asyncRevenueReport.dimensions) &&
        Objects.equals(this.endDate, asyncRevenueReport.endDate) &&
        Objects.equals(this.format, asyncRevenueReport.format) &&
        Objects.equals(this.id, asyncRevenueReport.id) &&
        Objects.equals(this.ids, asyncRevenueReport.ids) &&
        Objects.equals(this.lineItemIds, asyncRevenueReport.lineItemIds) &&
        Objects.equals(this.metrics, asyncRevenueReport.metrics) &&
        Objects.equals(this.reportType, asyncRevenueReport.reportType) &&
        Objects.equals(this.retailerIds, asyncRevenueReport.retailerIds) &&
        Objects.equals(this.revenueType, asyncRevenueReport.revenueType) &&
        Objects.equals(this.salesChannel, asyncRevenueReport.salesChannel) &&
        Objects.equals(this.skuRelations, asyncRevenueReport.skuRelations) &&
        Objects.equals(this.soldBy, asyncRevenueReport.soldBy) &&
        Objects.equals(this.startDate, asyncRevenueReport.startDate) &&
        Objects.equals(this.targetedKeywordTypes, asyncRevenueReport.targetedKeywordTypes) &&
        Objects.equals(this.timezone, asyncRevenueReport.timezone) &&
        Objects.equals(this.viewAttributionWindow, asyncRevenueReport.viewAttributionWindow) &&
        Objects.equals(this.viewMatchLevel, asyncRevenueReport.viewMatchLevel)&&
        Objects.equals(this.additionalProperties, asyncRevenueReport.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountIds, advertiserTypes, buyType, campaignIds, campaignType, clickAttributionWindow, clickMatchLevel, dimensions, endDate, format, id, ids, lineItemIds, metrics, reportType, retailerIds, revenueType, salesChannel, skuRelations, soldBy, startDate, targetedKeywordTypes, timezone, viewAttributionWindow, viewMatchLevel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncRevenueReport {\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    advertiserTypes: ").append(toIndentedString(advertiserTypes)).append("\n");
    sb.append("    buyType: ").append(toIndentedString(buyType)).append("\n");
    sb.append("    campaignIds: ").append(toIndentedString(campaignIds)).append("\n");
    sb.append("    campaignType: ").append(toIndentedString(campaignType)).append("\n");
    sb.append("    clickAttributionWindow: ").append(toIndentedString(clickAttributionWindow)).append("\n");
    sb.append("    clickMatchLevel: ").append(toIndentedString(clickMatchLevel)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    lineItemIds: ").append(toIndentedString(lineItemIds)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    retailerIds: ").append(toIndentedString(retailerIds)).append("\n");
    sb.append("    revenueType: ").append(toIndentedString(revenueType)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    skuRelations: ").append(toIndentedString(skuRelations)).append("\n");
    sb.append("    soldBy: ").append(toIndentedString(soldBy)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    targetedKeywordTypes: ").append(toIndentedString(targetedKeywordTypes)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    viewAttributionWindow: ").append(toIndentedString(viewAttributionWindow)).append("\n");
    sb.append("    viewMatchLevel: ").append(toIndentedString(viewMatchLevel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountIds");
    openapiFields.add("advertiserTypes");
    openapiFields.add("buyType");
    openapiFields.add("campaignIds");
    openapiFields.add("campaignType");
    openapiFields.add("clickAttributionWindow");
    openapiFields.add("clickMatchLevel");
    openapiFields.add("dimensions");
    openapiFields.add("endDate");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("ids");
    openapiFields.add("lineItemIds");
    openapiFields.add("metrics");
    openapiFields.add("reportType");
    openapiFields.add("retailerIds");
    openapiFields.add("revenueType");
    openapiFields.add("salesChannel");
    openapiFields.add("skuRelations");
    openapiFields.add("soldBy");
    openapiFields.add("startDate");
    openapiFields.add("targetedKeywordTypes");
    openapiFields.add("timezone");
    openapiFields.add("viewAttributionWindow");
    openapiFields.add("viewMatchLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AsyncRevenueReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AsyncRevenueReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsyncRevenueReport is not found in the empty JSON string", AsyncRevenueReport.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AsyncRevenueReport.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountIds") != null && !jsonObj.get("accountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("advertiserTypes") != null && !jsonObj.get("advertiserTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserTypes` to be an array in the JSON string but got `%s`", jsonObj.get("advertiserTypes").toString()));
      }
      if ((jsonObj.get("buyType") != null && !jsonObj.get("buyType").isJsonNull()) && !jsonObj.get("buyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("campaignIds") != null && !jsonObj.get("campaignIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignIds` to be an array in the JSON string but got `%s`", jsonObj.get("campaignIds").toString()));
      }
      if ((jsonObj.get("campaignType") != null && !jsonObj.get("campaignType").isJsonNull()) && !jsonObj.get("campaignType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignType").toString()));
      }
      if ((jsonObj.get("clickAttributionWindow") != null && !jsonObj.get("clickAttributionWindow").isJsonNull()) && !jsonObj.get("clickAttributionWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickAttributionWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickAttributionWindow").toString()));
      }
      if ((jsonObj.get("clickMatchLevel") != null && !jsonObj.get("clickMatchLevel").isJsonNull()) && !jsonObj.get("clickMatchLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickMatchLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickMatchLevel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lineItemIds") != null && !jsonObj.get("lineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("lineItemIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("reportType") != null && !jsonObj.get("reportType").isJsonNull()) && !jsonObj.get("reportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retailerIds") != null && !jsonObj.get("retailerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailerIds` to be an array in the JSON string but got `%s`", jsonObj.get("retailerIds").toString()));
      }
      if ((jsonObj.get("revenueType") != null && !jsonObj.get("revenueType").isJsonNull()) && !jsonObj.get("revenueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenueType").toString()));
      }
      if ((jsonObj.get("salesChannel") != null && !jsonObj.get("salesChannel").isJsonNull()) && !jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("skuRelations") != null && !jsonObj.get("skuRelations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuRelations` to be an array in the JSON string but got `%s`", jsonObj.get("skuRelations").toString()));
      }
      if ((jsonObj.get("soldBy") != null && !jsonObj.get("soldBy").isJsonNull()) && !jsonObj.get("soldBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soldBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soldBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetedKeywordTypes") != null && !jsonObj.get("targetedKeywordTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetedKeywordTypes` to be an array in the JSON string but got `%s`", jsonObj.get("targetedKeywordTypes").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("viewAttributionWindow") != null && !jsonObj.get("viewAttributionWindow").isJsonNull()) && !jsonObj.get("viewAttributionWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewAttributionWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewAttributionWindow").toString()));
      }
      if ((jsonObj.get("viewMatchLevel") != null && !jsonObj.get("viewMatchLevel").isJsonNull()) && !jsonObj.get("viewMatchLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewMatchLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewMatchLevel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsyncRevenueReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsyncRevenueReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsyncRevenueReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsyncRevenueReport.class));

       return (TypeAdapter<T>) new TypeAdapter<AsyncRevenueReport>() {
           @Override
           public void write(JsonWriter out, AsyncRevenueReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AsyncRevenueReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AsyncRevenueReport instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AsyncRevenueReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AsyncRevenueReport
  * @throws IOException if the JSON string is invalid with respect to AsyncRevenueReport
  */
  public static AsyncRevenueReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsyncRevenueReport.class);
  }

 /**
  * Convert an instance of AsyncRevenueReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

