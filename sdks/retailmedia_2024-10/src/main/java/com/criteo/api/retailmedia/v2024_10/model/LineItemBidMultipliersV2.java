/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2024-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2024_10.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2024_10.JSON;

/**
 * The Bid Multiplier Entity of a LineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LineItemBidMultipliersV2 {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Double category;

  public static final String SERIALIZED_NAME_CATEGORY_MENU = "categoryMenu";
  @SerializedName(SERIALIZED_NAME_CATEGORY_MENU)
  private Double categoryMenu;

  public static final String SERIALIZED_NAME_CHECKOUT = "checkout";
  @SerializedName(SERIALIZED_NAME_CHECKOUT)
  private Double checkout;

  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private Double confirmation;

  public static final String SERIALIZED_NAME_DEALS = "deals";
  @SerializedName(SERIALIZED_NAME_DEALS)
  private Double deals;

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private Double favorites;

  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private Double home;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERCHANDISING = "merchandising";
  @SerializedName(SERIALIZED_NAME_MERCHANDISING)
  private Double merchandising;

  public static final String SERIALIZED_NAME_PRODUCT_DETAIL = "productDetail";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DETAIL)
  private Double productDetail;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private Double search;

  public static final String SERIALIZED_NAME_SEARCH_BAR = "searchBar";
  @SerializedName(SERIALIZED_NAME_SEARCH_BAR)
  private Double searchBar;

  public LineItemBidMultipliersV2() {
  }

  public LineItemBidMultipliersV2 category(Double category) {
    
    this.category = category;
    return this;
  }

   /**
   * Categories Page Type Bid Multiplier
   * @return category
  **/
  @javax.annotation.Nullable

  public Double getCategory() {
    return category;
  }


  public void setCategory(Double category) {
    this.category = category;
  }


  public LineItemBidMultipliersV2 categoryMenu(Double categoryMenu) {
    
    this.categoryMenu = categoryMenu;
    return this;
  }

   /**
   * CategoryMenu Page Type Bid Multiplier
   * @return categoryMenu
  **/
  @javax.annotation.Nullable

  public Double getCategoryMenu() {
    return categoryMenu;
  }


  public void setCategoryMenu(Double categoryMenu) {
    this.categoryMenu = categoryMenu;
  }


  public LineItemBidMultipliersV2 checkout(Double checkout) {
    
    this.checkout = checkout;
    return this;
  }

   /**
   * Checkout Page Type Bid Multiplier
   * @return checkout
  **/
  @javax.annotation.Nullable

  public Double getCheckout() {
    return checkout;
  }


  public void setCheckout(Double checkout) {
    this.checkout = checkout;
  }


  public LineItemBidMultipliersV2 confirmation(Double confirmation) {
    
    this.confirmation = confirmation;
    return this;
  }

   /**
   * Confirmation Page Type Bid Multiplier
   * @return confirmation
  **/
  @javax.annotation.Nullable

  public Double getConfirmation() {
    return confirmation;
  }


  public void setConfirmation(Double confirmation) {
    this.confirmation = confirmation;
  }


  public LineItemBidMultipliersV2 deals(Double deals) {
    
    this.deals = deals;
    return this;
  }

   /**
   * Deals Page Type Bid Multiplier
   * @return deals
  **/
  @javax.annotation.Nullable

  public Double getDeals() {
    return deals;
  }


  public void setDeals(Double deals) {
    this.deals = deals;
  }


  public LineItemBidMultipliersV2 favorites(Double favorites) {
    
    this.favorites = favorites;
    return this;
  }

   /**
   * Favorites Page Type Bid Multiplier
   * @return favorites
  **/
  @javax.annotation.Nullable

  public Double getFavorites() {
    return favorites;
  }


  public void setFavorites(Double favorites) {
    this.favorites = favorites;
  }


  public LineItemBidMultipliersV2 home(Double home) {
    
    this.home = home;
    return this;
  }

   /**
   * Home Page Type Bid Multiplier
   * @return home
  **/
  @javax.annotation.Nullable

  public Double getHome() {
    return home;
  }


  public void setHome(Double home) {
    this.home = home;
  }


  public LineItemBidMultipliersV2 id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public LineItemBidMultipliersV2 merchandising(Double merchandising) {
    
    this.merchandising = merchandising;
    return this;
  }

   /**
   * Merchandising Page Type Bid Multiplier
   * @return merchandising
  **/
  @javax.annotation.Nullable

  public Double getMerchandising() {
    return merchandising;
  }


  public void setMerchandising(Double merchandising) {
    this.merchandising = merchandising;
  }


  public LineItemBidMultipliersV2 productDetail(Double productDetail) {
    
    this.productDetail = productDetail;
    return this;
  }

   /**
   * ProductDetail Page Type Bid Multiplier
   * @return productDetail
  **/
  @javax.annotation.Nullable

  public Double getProductDetail() {
    return productDetail;
  }


  public void setProductDetail(Double productDetail) {
    this.productDetail = productDetail;
  }


  public LineItemBidMultipliersV2 search(Double search) {
    
    this.search = search;
    return this;
  }

   /**
   * Search Page Type Bid Multiplier
   * @return search
  **/
  @javax.annotation.Nullable

  public Double getSearch() {
    return search;
  }


  public void setSearch(Double search) {
    this.search = search;
  }


  public LineItemBidMultipliersV2 searchBar(Double searchBar) {
    
    this.searchBar = searchBar;
    return this;
  }

   /**
   * SearchBar Page Type Bid Multiplier
   * @return searchBar
  **/
  @javax.annotation.Nullable

  public Double getSearchBar() {
    return searchBar;
  }


  public void setSearchBar(Double searchBar) {
    this.searchBar = searchBar;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LineItemBidMultipliersV2 instance itself
   */
  public LineItemBidMultipliersV2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemBidMultipliersV2 lineItemBidMultipliersV2 = (LineItemBidMultipliersV2) o;
    return Objects.equals(this.category, lineItemBidMultipliersV2.category) &&
        Objects.equals(this.categoryMenu, lineItemBidMultipliersV2.categoryMenu) &&
        Objects.equals(this.checkout, lineItemBidMultipliersV2.checkout) &&
        Objects.equals(this.confirmation, lineItemBidMultipliersV2.confirmation) &&
        Objects.equals(this.deals, lineItemBidMultipliersV2.deals) &&
        Objects.equals(this.favorites, lineItemBidMultipliersV2.favorites) &&
        Objects.equals(this.home, lineItemBidMultipliersV2.home) &&
        Objects.equals(this.id, lineItemBidMultipliersV2.id) &&
        Objects.equals(this.merchandising, lineItemBidMultipliersV2.merchandising) &&
        Objects.equals(this.productDetail, lineItemBidMultipliersV2.productDetail) &&
        Objects.equals(this.search, lineItemBidMultipliersV2.search) &&
        Objects.equals(this.searchBar, lineItemBidMultipliersV2.searchBar)&&
        Objects.equals(this.additionalProperties, lineItemBidMultipliersV2.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, categoryMenu, checkout, confirmation, deals, favorites, home, id, merchandising, productDetail, search, searchBar, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemBidMultipliersV2 {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryMenu: ").append(toIndentedString(categoryMenu)).append("\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    deals: ").append(toIndentedString(deals)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchandising: ").append(toIndentedString(merchandising)).append("\n");
    sb.append("    productDetail: ").append(toIndentedString(productDetail)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    searchBar: ").append(toIndentedString(searchBar)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("categoryMenu");
    openapiFields.add("checkout");
    openapiFields.add("confirmation");
    openapiFields.add("deals");
    openapiFields.add("favorites");
    openapiFields.add("home");
    openapiFields.add("id");
    openapiFields.add("merchandising");
    openapiFields.add("productDetail");
    openapiFields.add("search");
    openapiFields.add("searchBar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LineItemBidMultipliersV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LineItemBidMultipliersV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemBidMultipliersV2 is not found in the empty JSON string", LineItemBidMultipliersV2.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemBidMultipliersV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemBidMultipliersV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemBidMultipliersV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemBidMultipliersV2.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemBidMultipliersV2>() {
           @Override
           public void write(JsonWriter out, LineItemBidMultipliersV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemBidMultipliersV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LineItemBidMultipliersV2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LineItemBidMultipliersV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LineItemBidMultipliersV2
  * @throws IOException if the JSON string is invalid with respect to LineItemBidMultipliersV2
  */
  public static LineItemBidMultipliersV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemBidMultipliersV2.class);
  }

 /**
  * Convert an instance of LineItemBidMultipliersV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

