/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_04.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2025_04.JSON;

/**
 * Keywords submitted by the user binned by type after some cleanup has been performed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InputKeywords {
  public static final String SERIALIZED_NAME_NEGATIVE_BROAD = "negativeBroad";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_BROAD)
  private List<String> negativeBroad = null;

  public static final String SERIALIZED_NAME_NEGATIVE_EXACT = "negativeExact";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_EXACT)
  private List<String> negativeExact = null;

  public static final String SERIALIZED_NAME_POSITIVE_EXACT = "positiveExact";
  @SerializedName(SERIALIZED_NAME_POSITIVE_EXACT)
  private List<String> positiveExact = null;

  public InputKeywords() {
  }

  public InputKeywords negativeBroad(List<String> negativeBroad) {
    
    this.negativeBroad = negativeBroad;
    return this;
  }

  public InputKeywords addNegativeBroadItem(String negativeBroadItem) {
    if (this.negativeBroad == null) {
      this.negativeBroad = null;
    }
    this.negativeBroad.add(negativeBroadItem);
    return this;
  }

   /**
   * The collection of supplied negative broad phrased
   * @return negativeBroad
  **/
  @javax.annotation.Nullable

  public List<String> getNegativeBroad() {
    return negativeBroad;
  }


  public void setNegativeBroad(List<String> negativeBroad) {
    this.negativeBroad = negativeBroad;
  }


  public InputKeywords negativeExact(List<String> negativeExact) {
    
    this.negativeExact = negativeExact;
    return this;
  }

  public InputKeywords addNegativeExactItem(String negativeExactItem) {
    if (this.negativeExact == null) {
      this.negativeExact = null;
    }
    this.negativeExact.add(negativeExactItem);
    return this;
  }

   /**
   * The collection of supplied negative exact phrase
   * @return negativeExact
  **/
  @javax.annotation.Nullable

  public List<String> getNegativeExact() {
    return negativeExact;
  }


  public void setNegativeExact(List<String> negativeExact) {
    this.negativeExact = negativeExact;
  }


  public InputKeywords positiveExact(List<String> positiveExact) {
    
    this.positiveExact = positiveExact;
    return this;
  }

  public InputKeywords addPositiveExactItem(String positiveExactItem) {
    if (this.positiveExact == null) {
      this.positiveExact = null;
    }
    this.positiveExact.add(positiveExactItem);
    return this;
  }

   /**
   * The collection of supplied positive exact phrases
   * @return positiveExact
  **/
  @javax.annotation.Nullable

  public List<String> getPositiveExact() {
    return positiveExact;
  }


  public void setPositiveExact(List<String> positiveExact) {
    this.positiveExact = positiveExact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputKeywords inputKeywords = (InputKeywords) o;
    return Objects.equals(this.negativeBroad, inputKeywords.negativeBroad) &&
        Objects.equals(this.negativeExact, inputKeywords.negativeExact) &&
        Objects.equals(this.positiveExact, inputKeywords.positiveExact);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(negativeBroad, negativeExact, positiveExact);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputKeywords {\n");
    sb.append("    negativeBroad: ").append(toIndentedString(negativeBroad)).append("\n");
    sb.append("    negativeExact: ").append(toIndentedString(negativeExact)).append("\n");
    sb.append("    positiveExact: ").append(toIndentedString(positiveExact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("negativeBroad");
    openapiFields.add("negativeExact");
    openapiFields.add("positiveExact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InputKeywords
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InputKeywords.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputKeywords is not found in the empty JSON string", InputKeywords.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InputKeywords.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputKeywords` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("negativeBroad") != null && !jsonObj.get("negativeBroad").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeBroad` to be an array in the JSON string but got `%s`", jsonObj.get("negativeBroad").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("negativeExact") != null && !jsonObj.get("negativeExact").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeExact` to be an array in the JSON string but got `%s`", jsonObj.get("negativeExact").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positiveExact") != null && !jsonObj.get("positiveExact").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positiveExact` to be an array in the JSON string but got `%s`", jsonObj.get("positiveExact").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputKeywords.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputKeywords' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputKeywords> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputKeywords.class));

       return (TypeAdapter<T>) new TypeAdapter<InputKeywords>() {
           @Override
           public void write(JsonWriter out, InputKeywords value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputKeywords read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InputKeywords given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InputKeywords
  * @throws IOException if the JSON string is invalid with respect to InputKeywords
  */
  public static InputKeywords fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputKeywords.class);
  }

 /**
  * Convert an instance of InputKeywords to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

