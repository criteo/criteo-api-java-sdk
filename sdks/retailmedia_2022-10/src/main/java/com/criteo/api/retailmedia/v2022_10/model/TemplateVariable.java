/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2022-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2022_10.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.retailmedia.v2022_10.model.ChoiceVariableSpecification;
import com.criteo.api.retailmedia.v2022_10.model.FilesVariablesSpecification;
import com.criteo.api.retailmedia.v2022_10.model.TextVariableSpecification;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A variable in a creative template
 */
@ApiModel(description = "A variable in a creative template")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TemplateVariable {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  /**
   * The type of the variable
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("Text"),
    
    CHOICE("Choice"),
    
    COLOR("Color"),
    
    FILES("Files"),
    
    HYPERLINK("Hyperlink");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CHOICE_VARIABLE_SPECIFICATION = "choiceVariableSpecification";
  @SerializedName(SERIALIZED_NAME_CHOICE_VARIABLE_SPECIFICATION)
  private ChoiceVariableSpecification choiceVariableSpecification;

  public static final String SERIALIZED_NAME_TEXT_VARIABLE_SPECIFICATION = "textVariableSpecification";
  @SerializedName(SERIALIZED_NAME_TEXT_VARIABLE_SPECIFICATION)
  private TextVariableSpecification textVariableSpecification;

  public static final String SERIALIZED_NAME_FILES_VARIABLES_SPECIFICATION = "filesVariablesSpecification";
  @SerializedName(SERIALIZED_NAME_FILES_VARIABLES_SPECIFICATION)
  private FilesVariablesSpecification filesVariablesSpecification;


  public TemplateVariable id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The id of the variable
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the variable")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public TemplateVariable required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Whether the variable is required
   * @return required
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the variable is required")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public TemplateVariable type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the variable
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the variable")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public TemplateVariable choiceVariableSpecification(ChoiceVariableSpecification choiceVariableSpecification) {
    
    this.choiceVariableSpecification = choiceVariableSpecification;
    return this;
  }

   /**
   * Get choiceVariableSpecification
   * @return choiceVariableSpecification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChoiceVariableSpecification getChoiceVariableSpecification() {
    return choiceVariableSpecification;
  }


  public void setChoiceVariableSpecification(ChoiceVariableSpecification choiceVariableSpecification) {
    this.choiceVariableSpecification = choiceVariableSpecification;
  }


  public TemplateVariable textVariableSpecification(TextVariableSpecification textVariableSpecification) {
    
    this.textVariableSpecification = textVariableSpecification;
    return this;
  }

   /**
   * Get textVariableSpecification
   * @return textVariableSpecification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TextVariableSpecification getTextVariableSpecification() {
    return textVariableSpecification;
  }


  public void setTextVariableSpecification(TextVariableSpecification textVariableSpecification) {
    this.textVariableSpecification = textVariableSpecification;
  }


  public TemplateVariable filesVariablesSpecification(FilesVariablesSpecification filesVariablesSpecification) {
    
    this.filesVariablesSpecification = filesVariablesSpecification;
    return this;
  }

   /**
   * Get filesVariablesSpecification
   * @return filesVariablesSpecification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilesVariablesSpecification getFilesVariablesSpecification() {
    return filesVariablesSpecification;
  }


  public void setFilesVariablesSpecification(FilesVariablesSpecification filesVariablesSpecification) {
    this.filesVariablesSpecification = filesVariablesSpecification;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateVariable templateVariable = (TemplateVariable) o;
    return Objects.equals(this.id, templateVariable.id) &&
        Objects.equals(this.required, templateVariable.required) &&
        Objects.equals(this.type, templateVariable.type) &&
        Objects.equals(this.choiceVariableSpecification, templateVariable.choiceVariableSpecification) &&
        Objects.equals(this.textVariableSpecification, templateVariable.textVariableSpecification) &&
        Objects.equals(this.filesVariablesSpecification, templateVariable.filesVariablesSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, required, type, choiceVariableSpecification, textVariableSpecification, filesVariablesSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateVariable {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    choiceVariableSpecification: ").append(toIndentedString(choiceVariableSpecification)).append("\n");
    sb.append("    textVariableSpecification: ").append(toIndentedString(textVariableSpecification)).append("\n");
    sb.append("    filesVariablesSpecification: ").append(toIndentedString(filesVariablesSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

