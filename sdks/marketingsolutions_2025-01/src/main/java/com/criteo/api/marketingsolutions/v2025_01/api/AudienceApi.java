/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: 2025-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.v2025_01.api;

import com.criteo.api.marketingsolutions.v2025_01.ApiCallback;
import com.criteo.api.marketingsolutions.v2025_01.ApiClient;
import com.criteo.api.marketingsolutions.v2025_01.ApiException;
import com.criteo.api.marketingsolutions.v2025_01.ApiResponse;
import com.criteo.api.marketingsolutions.v2025_01.Configuration;
import com.criteo.api.marketingsolutions.v2025_01.Pair;
import com.criteo.api.marketingsolutions.v2025_01.ProgressRequestBody;
import com.criteo.api.marketingsolutions.v2025_01.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.marketingsolutions.v2025_01.model.AudienceBulkCreateInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceBulkDeleteInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceBulkUpdateInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceComputeSizesInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceEntityV1AudienceSearchMetadataV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceEstimateSizeInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceIdEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSearchInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentBulkCreateInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentBulkDeleteInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentBulkUpdateInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentComputeSizesInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentEstimateSizeInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentIdEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentSearchInputV1;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentSizeEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSegmentSizeEstimationV1Response;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSizeEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.AudienceSizeEstimationV1Response;
import com.criteo.api.marketingsolutions.v2025_01.model.ContactListStatisticsEntityV1Response;
import com.criteo.api.marketingsolutions.v2025_01.model.ContactlistAmendmentRequest;
import com.criteo.api.marketingsolutions.v2025_01.model.DeleteAudienceContactListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.ErrorCodeResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.InMarketAudienceSegmentBrandEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.InMarketAudienceSegmentInterestEntityV1ListResponse;
import com.criteo.api.marketingsolutions.v2025_01.model.ModifyAudienceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AudienceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AudienceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudienceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkCreateAudienceSegments
     * @param audienceSegmentBulkCreateInputV1 Segment creation parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateAudienceSegmentsCall(AudienceSegmentBulkCreateInputV1 audienceSegmentBulkCreateInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSegmentBulkCreateInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateAudienceSegmentsValidateBeforeCall(AudienceSegmentBulkCreateInputV1 audienceSegmentBulkCreateInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentBulkCreateInputV1' is set
        if (audienceSegmentBulkCreateInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentBulkCreateInputV1' when calling bulkCreateAudienceSegments(Async)");
        }

        return bulkCreateAudienceSegmentsCall(audienceSegmentBulkCreateInputV1, _callback);

    }

    /**
     * 
     * Creates all segments with a valid configuration, and returns their IDs. For those that cannot be created, one or multiple errors are returned.
     * @param audienceSegmentBulkCreateInputV1 Segment creation parameter (required)
     * @return AudienceSegmentEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSegmentEntityV1ListResponse bulkCreateAudienceSegments(AudienceSegmentBulkCreateInputV1 audienceSegmentBulkCreateInputV1) throws ApiException {
        ApiResponse<AudienceSegmentEntityV1ListResponse> localVarResp = bulkCreateAudienceSegmentsWithHttpInfo(audienceSegmentBulkCreateInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates all segments with a valid configuration, and returns their IDs. For those that cannot be created, one or multiple errors are returned.
     * @param audienceSegmentBulkCreateInputV1 Segment creation parameter (required)
     * @return ApiResponse&lt;AudienceSegmentEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSegmentEntityV1ListResponse> bulkCreateAudienceSegmentsWithHttpInfo(AudienceSegmentBulkCreateInputV1 audienceSegmentBulkCreateInputV1) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateAudienceSegmentsValidateBeforeCall(audienceSegmentBulkCreateInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSegmentEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates all segments with a valid configuration, and returns their IDs. For those that cannot be created, one or multiple errors are returned.
     * @param audienceSegmentBulkCreateInputV1 Segment creation parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateAudienceSegmentsAsync(AudienceSegmentBulkCreateInputV1 audienceSegmentBulkCreateInputV1, final ApiCallback<AudienceSegmentEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateAudienceSegmentsValidateBeforeCall(audienceSegmentBulkCreateInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSegmentEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkCreateAudiences
     * @param audienceBulkCreateInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateAudiencesCall(AudienceBulkCreateInputV1 audienceBulkCreateInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceBulkCreateInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audiences/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateAudiencesValidateBeforeCall(AudienceBulkCreateInputV1 audienceBulkCreateInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceBulkCreateInputV1' is set
        if (audienceBulkCreateInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceBulkCreateInputV1' when calling bulkCreateAudiences(Async)");
        }

        return bulkCreateAudiencesCall(audienceBulkCreateInputV1, _callback);

    }

    /**
     * 
     * Creates all audiences with a valid configuration, and returns their IDs. For those that cannot be created, one or multiple errors are returned.
     * @param audienceBulkCreateInputV1  (required)
     * @return AudienceEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceEntityV1ListResponse bulkCreateAudiences(AudienceBulkCreateInputV1 audienceBulkCreateInputV1) throws ApiException {
        ApiResponse<AudienceEntityV1ListResponse> localVarResp = bulkCreateAudiencesWithHttpInfo(audienceBulkCreateInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates all audiences with a valid configuration, and returns their IDs. For those that cannot be created, one or multiple errors are returned.
     * @param audienceBulkCreateInputV1  (required)
     * @return ApiResponse&lt;AudienceEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceEntityV1ListResponse> bulkCreateAudiencesWithHttpInfo(AudienceBulkCreateInputV1 audienceBulkCreateInputV1) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateAudiencesValidateBeforeCall(audienceBulkCreateInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates all audiences with a valid configuration, and returns their IDs. For those that cannot be created, one or multiple errors are returned.
     * @param audienceBulkCreateInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateAudiencesAsync(AudienceBulkCreateInputV1 audienceBulkCreateInputV1, final ApiCallback<AudienceEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateAudiencesValidateBeforeCall(audienceBulkCreateInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkDeleteAudienceSegments
     * @param audienceSegmentBulkDeleteInputV1 Segment delete request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkDeleteAudienceSegmentsCall(AudienceSegmentBulkDeleteInputV1 audienceSegmentBulkDeleteInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSegmentBulkDeleteInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteAudienceSegmentsValidateBeforeCall(AudienceSegmentBulkDeleteInputV1 audienceSegmentBulkDeleteInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentBulkDeleteInputV1' is set
        if (audienceSegmentBulkDeleteInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentBulkDeleteInputV1' when calling bulkDeleteAudienceSegments(Async)");
        }

        return bulkDeleteAudienceSegmentsCall(audienceSegmentBulkDeleteInputV1, _callback);

    }

    /**
     * 
     * Delete the segments associated to the given audience IDs.
     * @param audienceSegmentBulkDeleteInputV1 Segment delete request. (required)
     * @return AudienceSegmentIdEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSegmentIdEntityV1ListResponse bulkDeleteAudienceSegments(AudienceSegmentBulkDeleteInputV1 audienceSegmentBulkDeleteInputV1) throws ApiException {
        ApiResponse<AudienceSegmentIdEntityV1ListResponse> localVarResp = bulkDeleteAudienceSegmentsWithHttpInfo(audienceSegmentBulkDeleteInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the segments associated to the given audience IDs.
     * @param audienceSegmentBulkDeleteInputV1 Segment delete request. (required)
     * @return ApiResponse&lt;AudienceSegmentIdEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSegmentIdEntityV1ListResponse> bulkDeleteAudienceSegmentsWithHttpInfo(AudienceSegmentBulkDeleteInputV1 audienceSegmentBulkDeleteInputV1) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteAudienceSegmentsValidateBeforeCall(audienceSegmentBulkDeleteInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSegmentIdEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the segments associated to the given audience IDs.
     * @param audienceSegmentBulkDeleteInputV1 Segment delete request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkDeleteAudienceSegmentsAsync(AudienceSegmentBulkDeleteInputV1 audienceSegmentBulkDeleteInputV1, final ApiCallback<AudienceSegmentIdEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteAudienceSegmentsValidateBeforeCall(audienceSegmentBulkDeleteInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSegmentIdEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkDeleteAudiences
     * @param audienceBulkDeleteInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkDeleteAudiencesCall(AudienceBulkDeleteInputV1 audienceBulkDeleteInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceBulkDeleteInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audiences/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteAudiencesValidateBeforeCall(AudienceBulkDeleteInputV1 audienceBulkDeleteInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceBulkDeleteInputV1' is set
        if (audienceBulkDeleteInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceBulkDeleteInputV1' when calling bulkDeleteAudiences(Async)");
        }

        return bulkDeleteAudiencesCall(audienceBulkDeleteInputV1, _callback);

    }

    /**
     * 
     * Deletes the audiences associated to the given audience IDs.
     * @param audienceBulkDeleteInputV1  (required)
     * @return AudienceIdEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceIdEntityV1ListResponse bulkDeleteAudiences(AudienceBulkDeleteInputV1 audienceBulkDeleteInputV1) throws ApiException {
        ApiResponse<AudienceIdEntityV1ListResponse> localVarResp = bulkDeleteAudiencesWithHttpInfo(audienceBulkDeleteInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the audiences associated to the given audience IDs.
     * @param audienceBulkDeleteInputV1  (required)
     * @return ApiResponse&lt;AudienceIdEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceIdEntityV1ListResponse> bulkDeleteAudiencesWithHttpInfo(AudienceBulkDeleteInputV1 audienceBulkDeleteInputV1) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteAudiencesValidateBeforeCall(audienceBulkDeleteInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceIdEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the audiences associated to the given audience IDs.
     * @param audienceBulkDeleteInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkDeleteAudiencesAsync(AudienceBulkDeleteInputV1 audienceBulkDeleteInputV1, final ApiCallback<AudienceIdEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteAudiencesValidateBeforeCall(audienceBulkDeleteInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceIdEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkUpdateAudienceSegments
     * @param audienceSegmentBulkUpdateInputV1 Segment Update request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateAudienceSegmentsCall(AudienceSegmentBulkUpdateInputV1 audienceSegmentBulkUpdateInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSegmentBulkUpdateInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateAudienceSegmentsValidateBeforeCall(AudienceSegmentBulkUpdateInputV1 audienceSegmentBulkUpdateInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentBulkUpdateInputV1' is set
        if (audienceSegmentBulkUpdateInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentBulkUpdateInputV1' when calling bulkUpdateAudienceSegments(Async)");
        }

        return bulkUpdateAudienceSegmentsCall(audienceSegmentBulkUpdateInputV1, _callback);

    }

    /**
     * 
     * Updates the properties of all segments with a valid configuration, and returns their IDs. For those that cannot be updated, one or multiple errors are returned.
     * @param audienceSegmentBulkUpdateInputV1 Segment Update request (required)
     * @return AudienceSegmentEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSegmentEntityV1ListResponse bulkUpdateAudienceSegments(AudienceSegmentBulkUpdateInputV1 audienceSegmentBulkUpdateInputV1) throws ApiException {
        ApiResponse<AudienceSegmentEntityV1ListResponse> localVarResp = bulkUpdateAudienceSegmentsWithHttpInfo(audienceSegmentBulkUpdateInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of all segments with a valid configuration, and returns their IDs. For those that cannot be updated, one or multiple errors are returned.
     * @param audienceSegmentBulkUpdateInputV1 Segment Update request (required)
     * @return ApiResponse&lt;AudienceSegmentEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSegmentEntityV1ListResponse> bulkUpdateAudienceSegmentsWithHttpInfo(AudienceSegmentBulkUpdateInputV1 audienceSegmentBulkUpdateInputV1) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateAudienceSegmentsValidateBeforeCall(audienceSegmentBulkUpdateInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSegmentEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of all segments with a valid configuration, and returns their IDs. For those that cannot be updated, one or multiple errors are returned.
     * @param audienceSegmentBulkUpdateInputV1 Segment Update request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateAudienceSegmentsAsync(AudienceSegmentBulkUpdateInputV1 audienceSegmentBulkUpdateInputV1, final ApiCallback<AudienceSegmentEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateAudienceSegmentsValidateBeforeCall(audienceSegmentBulkUpdateInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSegmentEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkUpdateAudiences
     * @param audienceBulkUpdateInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateAudiencesCall(AudienceBulkUpdateInputV1 audienceBulkUpdateInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceBulkUpdateInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audiences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateAudiencesValidateBeforeCall(AudienceBulkUpdateInputV1 audienceBulkUpdateInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceBulkUpdateInputV1' is set
        if (audienceBulkUpdateInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceBulkUpdateInputV1' when calling bulkUpdateAudiences(Async)");
        }

        return bulkUpdateAudiencesCall(audienceBulkUpdateInputV1, _callback);

    }

    /**
     * 
     * Updates the properties of all audiences with a valid configuration, and returns their IDs. For those that cannot be updated, one or multiple errors are returned.
     * @param audienceBulkUpdateInputV1  (required)
     * @return AudienceEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceEntityV1ListResponse bulkUpdateAudiences(AudienceBulkUpdateInputV1 audienceBulkUpdateInputV1) throws ApiException {
        ApiResponse<AudienceEntityV1ListResponse> localVarResp = bulkUpdateAudiencesWithHttpInfo(audienceBulkUpdateInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of all audiences with a valid configuration, and returns their IDs. For those that cannot be updated, one or multiple errors are returned.
     * @param audienceBulkUpdateInputV1  (required)
     * @return ApiResponse&lt;AudienceEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceEntityV1ListResponse> bulkUpdateAudiencesWithHttpInfo(AudienceBulkUpdateInputV1 audienceBulkUpdateInputV1) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateAudiencesValidateBeforeCall(audienceBulkUpdateInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of all audiences with a valid configuration, and returns their IDs. For those that cannot be updated, one or multiple errors are returned.
     * @param audienceBulkUpdateInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateAudiencesAsync(AudienceBulkUpdateInputV1 audienceBulkUpdateInputV1, final ApiCallback<AudienceEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateAudiencesValidateBeforeCall(audienceBulkUpdateInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call01audiencesAudienceSegmentIdContactlistDelete
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01audiencesAudienceSegmentIdContactlistDeleteCall(String audienceSegmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/audiences/{audience-segment-id}/contactlist"
            .replace("{" + "audience-segment-id" + "}", localVarApiClient.escapeString(audienceSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call01audiencesAudienceSegmentIdContactlistDeleteValidateBeforeCall(String audienceSegmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentId' is set
        if (audienceSegmentId == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentId' when calling call01audiencesAudienceSegmentIdContactlistDelete(Async)");
        }

        return call01audiencesAudienceSegmentIdContactlistDeleteCall(audienceSegmentId, _callback);

    }

    /**
     * 
     * Delete all identifiers from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @return DeleteAudienceContactListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAudienceContactListResponse call01audiencesAudienceSegmentIdContactlistDelete(String audienceSegmentId) throws ApiException {
        ApiResponse<DeleteAudienceContactListResponse> localVarResp = call01audiencesAudienceSegmentIdContactlistDeleteWithHttpInfo(audienceSegmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete all identifiers from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @return ApiResponse&lt;DeleteAudienceContactListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAudienceContactListResponse> call01audiencesAudienceSegmentIdContactlistDeleteWithHttpInfo(String audienceSegmentId) throws ApiException {
        okhttp3.Call localVarCall = call01audiencesAudienceSegmentIdContactlistDeleteValidateBeforeCall(audienceSegmentId, null);
        Type localVarReturnType = new TypeToken<DeleteAudienceContactListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete all identifiers from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01audiencesAudienceSegmentIdContactlistDeleteAsync(String audienceSegmentId, final ApiCallback<DeleteAudienceContactListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = call01audiencesAudienceSegmentIdContactlistDeleteValidateBeforeCall(audienceSegmentId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAudienceContactListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call01audiencesAudienceSegmentIdContactlistPatch
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01audiencesAudienceSegmentIdContactlistPatchCall(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactlistAmendmentRequest;

        // create path and map variables
        String localVarPath = "/2025-01/audiences/{audience-segment-id}/contactlist"
            .replace("{" + "audience-segment-id" + "}", localVarApiClient.escapeString(audienceSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call01audiencesAudienceSegmentIdContactlistPatchValidateBeforeCall(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentId' is set
        if (audienceSegmentId == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentId' when calling call01audiencesAudienceSegmentIdContactlistPatch(Async)");
        }

        // verify the required parameter 'contactlistAmendmentRequest' is set
        if (contactlistAmendmentRequest == null) {
            throw new ApiException("Missing the required parameter 'contactlistAmendmentRequest' when calling call01audiencesAudienceSegmentIdContactlistPatch(Async)");
        }

        return call01audiencesAudienceSegmentIdContactlistPatchCall(audienceSegmentId, contactlistAmendmentRequest, _callback);

    }

    /**
     * 
     * Add/remove identifiers to or from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @return ModifyAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public ModifyAudienceResponse call01audiencesAudienceSegmentIdContactlistPatch(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest) throws ApiException {
        ApiResponse<ModifyAudienceResponse> localVarResp = call01audiencesAudienceSegmentIdContactlistPatchWithHttpInfo(audienceSegmentId, contactlistAmendmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add/remove identifiers to or from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @return ApiResponse&lt;ModifyAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyAudienceResponse> call01audiencesAudienceSegmentIdContactlistPatchWithHttpInfo(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest) throws ApiException {
        okhttp3.Call localVarCall = call01audiencesAudienceSegmentIdContactlistPatchValidateBeforeCall(audienceSegmentId, contactlistAmendmentRequest, null);
        Type localVarReturnType = new TypeToken<ModifyAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add/remove identifiers to or from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01audiencesAudienceSegmentIdContactlistPatchAsync(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest, final ApiCallback<ModifyAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = call01audiencesAudienceSegmentIdContactlistPatchValidateBeforeCall(audienceSegmentId, contactlistAmendmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ModifyAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDelete
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteCall(String audienceSegmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/{audience-segment-id}/contact-list"
            .replace("{" + "audience-segment-id" + "}", localVarApiClient.escapeString(audienceSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteValidateBeforeCall(String audienceSegmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentId' is set
        if (audienceSegmentId == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentId' when calling call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDelete(Async)");
        }

        return call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteCall(audienceSegmentId, _callback);

    }

    /**
     * 
     * Delete all identifiers from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @return DeleteAudienceContactListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAudienceContactListResponse call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDelete(String audienceSegmentId) throws ApiException {
        ApiResponse<DeleteAudienceContactListResponse> localVarResp = call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteWithHttpInfo(audienceSegmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete all identifiers from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @return ApiResponse&lt;DeleteAudienceContactListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAudienceContactListResponse> call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteWithHttpInfo(String audienceSegmentId) throws ApiException {
        okhttp3.Call localVarCall = call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteValidateBeforeCall(audienceSegmentId, null);
        Type localVarReturnType = new TypeToken<DeleteAudienceContactListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete all identifiers from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Contact List was emptied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteAsync(String audienceSegmentId, final ApiCallback<DeleteAudienceContactListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListDeleteValidateBeforeCall(audienceSegmentId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAudienceContactListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatch
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchCall(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactlistAmendmentRequest;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/{audience-segment-id}/contact-list"
            .replace("{" + "audience-segment-id" + "}", localVarApiClient.escapeString(audienceSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchValidateBeforeCall(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentId' is set
        if (audienceSegmentId == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentId' when calling call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatch(Async)");
        }

        // verify the required parameter 'contactlistAmendmentRequest' is set
        if (contactlistAmendmentRequest == null) {
            throw new ApiException("Missing the required parameter 'contactlistAmendmentRequest' when calling call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatch(Async)");
        }

        return call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchCall(audienceSegmentId, contactlistAmendmentRequest, _callback);

    }

    /**
     * 
     * Add/remove identifiers to or from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @return ModifyAudienceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public ModifyAudienceResponse call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatch(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest) throws ApiException {
        ApiResponse<ModifyAudienceResponse> localVarResp = call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchWithHttpInfo(audienceSegmentId, contactlistAmendmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add/remove identifiers to or from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @return ApiResponse&lt;ModifyAudienceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyAudienceResponse> call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchWithHttpInfo(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest) throws ApiException {
        okhttp3.Call localVarCall = call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchValidateBeforeCall(audienceSegmentId, contactlistAmendmentRequest, null);
        Type localVarReturnType = new TypeToken<ModifyAudienceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add/remove identifiers to or from a contact list audience-segment.
     * @param audienceSegmentId The id of the contact list audience-segment to amend (required)
     * @param contactlistAmendmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary of created request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience 123 not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchAsync(String audienceSegmentId, ContactlistAmendmentRequest contactlistAmendmentRequest, final ApiCallback<ModifyAudienceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = call01marketingSolutionsAudienceSegmentsAudienceSegmentIdContactListPatchValidateBeforeCall(audienceSegmentId, contactlistAmendmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ModifyAudienceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computeAudienceSegmentsSizes
     * @param audienceSegmentComputeSizesInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeAudienceSegmentsSizesCall(AudienceSegmentComputeSizesInputV1 audienceSegmentComputeSizesInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSegmentComputeSizesInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/compute-sizes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeAudienceSegmentsSizesValidateBeforeCall(AudienceSegmentComputeSizesInputV1 audienceSegmentComputeSizesInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentComputeSizesInputV1' is set
        if (audienceSegmentComputeSizesInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentComputeSizesInputV1' when calling computeAudienceSegmentsSizes(Async)");
        }

        return computeAudienceSegmentsSizesCall(audienceSegmentComputeSizesInputV1, _callback);

    }

    /**
     * 
     * Gets the size of all segments. An error is returned for those whose size calculation is not supported.
     * @param audienceSegmentComputeSizesInputV1  (required)
     * @return AudienceSegmentSizeEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSegmentSizeEntityV1ListResponse computeAudienceSegmentsSizes(AudienceSegmentComputeSizesInputV1 audienceSegmentComputeSizesInputV1) throws ApiException {
        ApiResponse<AudienceSegmentSizeEntityV1ListResponse> localVarResp = computeAudienceSegmentsSizesWithHttpInfo(audienceSegmentComputeSizesInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the size of all segments. An error is returned for those whose size calculation is not supported.
     * @param audienceSegmentComputeSizesInputV1  (required)
     * @return ApiResponse&lt;AudienceSegmentSizeEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSegmentSizeEntityV1ListResponse> computeAudienceSegmentsSizesWithHttpInfo(AudienceSegmentComputeSizesInputV1 audienceSegmentComputeSizesInputV1) throws ApiException {
        okhttp3.Call localVarCall = computeAudienceSegmentsSizesValidateBeforeCall(audienceSegmentComputeSizesInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSegmentSizeEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the size of all segments. An error is returned for those whose size calculation is not supported.
     * @param audienceSegmentComputeSizesInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeAudienceSegmentsSizesAsync(AudienceSegmentComputeSizesInputV1 audienceSegmentComputeSizesInputV1, final ApiCallback<AudienceSegmentSizeEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeAudienceSegmentsSizesValidateBeforeCall(audienceSegmentComputeSizesInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSegmentSizeEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computeAudiencesSizes
     * @param audienceComputeSizesInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeAudiencesSizesCall(AudienceComputeSizesInputV1 audienceComputeSizesInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceComputeSizesInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audiences/compute-sizes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeAudiencesSizesValidateBeforeCall(AudienceComputeSizesInputV1 audienceComputeSizesInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceComputeSizesInputV1' is set
        if (audienceComputeSizesInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceComputeSizesInputV1' when calling computeAudiencesSizes(Async)");
        }

        return computeAudiencesSizesCall(audienceComputeSizesInputV1, _callback);

    }

    /**
     * 
     * Gets the size of all audiences. An error is returned for those whose size calculation is not supported.
     * @param audienceComputeSizesInputV1  (required)
     * @return AudienceSizeEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSizeEntityV1ListResponse computeAudiencesSizes(AudienceComputeSizesInputV1 audienceComputeSizesInputV1) throws ApiException {
        ApiResponse<AudienceSizeEntityV1ListResponse> localVarResp = computeAudiencesSizesWithHttpInfo(audienceComputeSizesInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the size of all audiences. An error is returned for those whose size calculation is not supported.
     * @param audienceComputeSizesInputV1  (required)
     * @return ApiResponse&lt;AudienceSizeEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSizeEntityV1ListResponse> computeAudiencesSizesWithHttpInfo(AudienceComputeSizesInputV1 audienceComputeSizesInputV1) throws ApiException {
        okhttp3.Call localVarCall = computeAudiencesSizesValidateBeforeCall(audienceComputeSizesInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSizeEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the size of all audiences. An error is returned for those whose size calculation is not supported.
     * @param audienceComputeSizesInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call computeAudiencesSizesAsync(AudienceComputeSizesInputV1 audienceComputeSizesInputV1, final ApiCallback<AudienceSizeEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeAudiencesSizesValidateBeforeCall(audienceComputeSizesInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSizeEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for estimateAudienceSegmentSize
     * @param audienceSegmentEstimateSizeInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateAudienceSegmentSizeCall(AudienceSegmentEstimateSizeInputV1 audienceSegmentEstimateSizeInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSegmentEstimateSizeInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/estimate-size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call estimateAudienceSegmentSizeValidateBeforeCall(AudienceSegmentEstimateSizeInputV1 audienceSegmentEstimateSizeInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentEstimateSizeInputV1' is set
        if (audienceSegmentEstimateSizeInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentEstimateSizeInputV1' when calling estimateAudienceSegmentSize(Async)");
        }

        return estimateAudienceSegmentSizeCall(audienceSegmentEstimateSizeInputV1, _callback);

    }

    /**
     * 
     * Gets the size estimation of a non existent segment. An error is returned when size calculation is not supported.
     * @param audienceSegmentEstimateSizeInputV1  (required)
     * @return AudienceSegmentSizeEstimationV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSegmentSizeEstimationV1Response estimateAudienceSegmentSize(AudienceSegmentEstimateSizeInputV1 audienceSegmentEstimateSizeInputV1) throws ApiException {
        ApiResponse<AudienceSegmentSizeEstimationV1Response> localVarResp = estimateAudienceSegmentSizeWithHttpInfo(audienceSegmentEstimateSizeInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the size estimation of a non existent segment. An error is returned when size calculation is not supported.
     * @param audienceSegmentEstimateSizeInputV1  (required)
     * @return ApiResponse&lt;AudienceSegmentSizeEstimationV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSegmentSizeEstimationV1Response> estimateAudienceSegmentSizeWithHttpInfo(AudienceSegmentEstimateSizeInputV1 audienceSegmentEstimateSizeInputV1) throws ApiException {
        okhttp3.Call localVarCall = estimateAudienceSegmentSizeValidateBeforeCall(audienceSegmentEstimateSizeInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSegmentSizeEstimationV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the size estimation of a non existent segment. An error is returned when size calculation is not supported.
     * @param audienceSegmentEstimateSizeInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateAudienceSegmentSizeAsync(AudienceSegmentEstimateSizeInputV1 audienceSegmentEstimateSizeInputV1, final ApiCallback<AudienceSegmentSizeEstimationV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = estimateAudienceSegmentSizeValidateBeforeCall(audienceSegmentEstimateSizeInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSegmentSizeEstimationV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for estimateAudienceSize
     * @param audienceEstimateSizeInputV1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateAudienceSizeCall(AudienceEstimateSizeInputV1 audienceEstimateSizeInputV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceEstimateSizeInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audiences/estimate-size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call estimateAudienceSizeValidateBeforeCall(AudienceEstimateSizeInputV1 audienceEstimateSizeInputV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceEstimateSizeInputV1' is set
        if (audienceEstimateSizeInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceEstimateSizeInputV1' when calling estimateAudienceSize(Async)");
        }

        return estimateAudienceSizeCall(audienceEstimateSizeInputV1, _callback);

    }

    /**
     * 
     * Gets the size estimation of a non existent audience. An error is returned when size calculation is not supported.
     * @param audienceEstimateSizeInputV1  (required)
     * @return AudienceSizeEstimationV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSizeEstimationV1Response estimateAudienceSize(AudienceEstimateSizeInputV1 audienceEstimateSizeInputV1) throws ApiException {
        ApiResponse<AudienceSizeEstimationV1Response> localVarResp = estimateAudienceSizeWithHttpInfo(audienceEstimateSizeInputV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the size estimation of a non existent audience. An error is returned when size calculation is not supported.
     * @param audienceEstimateSizeInputV1  (required)
     * @return ApiResponse&lt;AudienceSizeEstimationV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSizeEstimationV1Response> estimateAudienceSizeWithHttpInfo(AudienceEstimateSizeInputV1 audienceEstimateSizeInputV1) throws ApiException {
        okhttp3.Call localVarCall = estimateAudienceSizeValidateBeforeCall(audienceEstimateSizeInputV1, null);
        Type localVarReturnType = new TypeToken<AudienceSizeEstimationV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the size estimation of a non existent audience. An error is returned when size calculation is not supported.
     * @param audienceEstimateSizeInputV1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success or partial success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateAudienceSizeAsync(AudienceEstimateSizeInputV1 audienceEstimateSizeInputV1, final ApiCallback<AudienceSizeEstimationV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = estimateAudienceSizeValidateBeforeCall(audienceEstimateSizeInputV1, _callback);
        Type localVarReturnType = new TypeToken<AudienceSizeEstimationV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudienceSegmentContactListStatistics
     * @param audienceSegmentId The segment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceSegmentContactListStatisticsCall(Integer audienceSegmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/{audience-segment-id}/contact-list/statistics"
            .replace("{" + "audience-segment-id" + "}", localVarApiClient.escapeString(audienceSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceSegmentContactListStatisticsValidateBeforeCall(Integer audienceSegmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentId' is set
        if (audienceSegmentId == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentId' when calling getAudienceSegmentContactListStatistics(Async)");
        }

        return getAudienceSegmentContactListStatisticsCall(audienceSegmentId, _callback);

    }

    /**
     * 
     * Returns the statistics of a contact list segment.
     * @param audienceSegmentId The segment ID. (required)
     * @return ContactListStatisticsEntityV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ContactListStatisticsEntityV1Response getAudienceSegmentContactListStatistics(Integer audienceSegmentId) throws ApiException {
        ApiResponse<ContactListStatisticsEntityV1Response> localVarResp = getAudienceSegmentContactListStatisticsWithHttpInfo(audienceSegmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the statistics of a contact list segment.
     * @param audienceSegmentId The segment ID. (required)
     * @return ApiResponse&lt;ContactListStatisticsEntityV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactListStatisticsEntityV1Response> getAudienceSegmentContactListStatisticsWithHttpInfo(Integer audienceSegmentId) throws ApiException {
        okhttp3.Call localVarCall = getAudienceSegmentContactListStatisticsValidateBeforeCall(audienceSegmentId, null);
        Type localVarReturnType = new TypeToken<ContactListStatisticsEntityV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the statistics of a contact list segment.
     * @param audienceSegmentId The segment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceSegmentContactListStatisticsAsync(Integer audienceSegmentId, final ApiCallback<ContactListStatisticsEntityV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudienceSegmentContactListStatisticsValidateBeforeCall(audienceSegmentId, _callback);
        Type localVarReturnType = new TypeToken<ContactListStatisticsEntityV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudienceSegmentsInMarketBrands
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceSegmentsInMarketBrandsCall(String advertiserId, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/in-market-brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiser-id", advertiserId));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceSegmentsInMarketBrandsValidateBeforeCall(String advertiserId, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAudienceSegmentsInMarketBrands(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getAudienceSegmentsInMarketBrands(Async)");
        }

        return getAudienceSegmentsInMarketBrandsCall(advertiserId, country, _callback);

    }

    /**
     * 
     * Returns a list with all available in-market brands that can be used to define an in-market segment.
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @return InMarketAudienceSegmentBrandEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public InMarketAudienceSegmentBrandEntityV1ListResponse getAudienceSegmentsInMarketBrands(String advertiserId, String country) throws ApiException {
        ApiResponse<InMarketAudienceSegmentBrandEntityV1ListResponse> localVarResp = getAudienceSegmentsInMarketBrandsWithHttpInfo(advertiserId, country);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list with all available in-market brands that can be used to define an in-market segment.
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @return ApiResponse&lt;InMarketAudienceSegmentBrandEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InMarketAudienceSegmentBrandEntityV1ListResponse> getAudienceSegmentsInMarketBrandsWithHttpInfo(String advertiserId, String country) throws ApiException {
        okhttp3.Call localVarCall = getAudienceSegmentsInMarketBrandsValidateBeforeCall(advertiserId, country, null);
        Type localVarReturnType = new TypeToken<InMarketAudienceSegmentBrandEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list with all available in-market brands that can be used to define an in-market segment.
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceSegmentsInMarketBrandsAsync(String advertiserId, String country, final ApiCallback<InMarketAudienceSegmentBrandEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudienceSegmentsInMarketBrandsValidateBeforeCall(advertiserId, country, _callback);
        Type localVarReturnType = new TypeToken<InMarketAudienceSegmentBrandEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudienceSegmentsInMarketInterests
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceSegmentsInMarketInterestsCall(String advertiserId, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/in-market-interests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiser-id", advertiserId));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceSegmentsInMarketInterestsValidateBeforeCall(String advertiserId, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAudienceSegmentsInMarketInterests(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getAudienceSegmentsInMarketInterests(Async)");
        }

        return getAudienceSegmentsInMarketInterestsCall(advertiserId, country, _callback);

    }

    /**
     * 
     * Returns a list with all available in-market interests that can be used to define an in-market segment. These in-market interests correspond to the Google product taxonomy.
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @return InMarketAudienceSegmentInterestEntityV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public InMarketAudienceSegmentInterestEntityV1ListResponse getAudienceSegmentsInMarketInterests(String advertiserId, String country) throws ApiException {
        ApiResponse<InMarketAudienceSegmentInterestEntityV1ListResponse> localVarResp = getAudienceSegmentsInMarketInterestsWithHttpInfo(advertiserId, country);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list with all available in-market interests that can be used to define an in-market segment. These in-market interests correspond to the Google product taxonomy.
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @return ApiResponse&lt;InMarketAudienceSegmentInterestEntityV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InMarketAudienceSegmentInterestEntityV1ListResponse> getAudienceSegmentsInMarketInterestsWithHttpInfo(String advertiserId, String country) throws ApiException {
        okhttp3.Call localVarCall = getAudienceSegmentsInMarketInterestsValidateBeforeCall(advertiserId, country, null);
        Type localVarReturnType = new TypeToken<InMarketAudienceSegmentInterestEntityV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list with all available in-market interests that can be used to define an in-market segment. These in-market interests correspond to the Google product taxonomy.
     * @param advertiserId The advertiser ID. (required)
     * @param country The ISO 3166-1 alpha-2 country code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudienceSegmentsInMarketInterestsAsync(String advertiserId, String country, final ApiCallback<InMarketAudienceSegmentInterestEntityV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudienceSegmentsInMarketInterestsValidateBeforeCall(advertiserId, country, _callback);
        Type localVarReturnType = new TypeToken<InMarketAudienceSegmentInterestEntityV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAudienceSegments
     * @param audienceSegmentSearchInputV1 Segment search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAudienceSegmentsCall(AudienceSegmentSearchInputV1 audienceSegmentSearchInputV1, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSegmentSearchInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audience-segments/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAudienceSegmentsValidateBeforeCall(AudienceSegmentSearchInputV1 audienceSegmentSearchInputV1, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSegmentSearchInputV1' is set
        if (audienceSegmentSearchInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSegmentSearchInputV1' when calling searchAudienceSegments(Async)");
        }

        return searchAudienceSegmentsCall(audienceSegmentSearchInputV1, limit, offset, _callback);

    }

    /**
     * 
     * Returns a list of segments that match the provided filters. If present, the filters are AND&#39;ed together when applied.
     * @param audienceSegmentSearchInputV1 Segment search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @return AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse searchAudienceSegments(AudienceSegmentSearchInputV1 audienceSegmentSearchInputV1, Integer limit, Integer offset) throws ApiException {
        ApiResponse<AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse> localVarResp = searchAudienceSegmentsWithHttpInfo(audienceSegmentSearchInputV1, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of segments that match the provided filters. If present, the filters are AND&#39;ed together when applied.
     * @param audienceSegmentSearchInputV1 Segment search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @return ApiResponse&lt;AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse> searchAudienceSegmentsWithHttpInfo(AudienceSegmentSearchInputV1 audienceSegmentSearchInputV1, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchAudienceSegmentsValidateBeforeCall(audienceSegmentSearchInputV1, limit, offset, null);
        Type localVarReturnType = new TypeToken<AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of segments that match the provided filters. If present, the filters are AND&#39;ed together when applied.
     * @param audienceSegmentSearchInputV1 Segment search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAudienceSegmentsAsync(AudienceSegmentSearchInputV1 audienceSegmentSearchInputV1, Integer limit, Integer offset, final ApiCallback<AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAudienceSegmentsValidateBeforeCall(audienceSegmentSearchInputV1, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AudienceSegmentEntityV1AudienceSegmentSearchMetadataV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAudiences
     * @param audienceSearchInputV1 Audience search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAudiencesCall(AudienceSearchInputV1 audienceSearchInputV1, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = audienceSearchInputV1;

        // create path and map variables
        String localVarPath = "/2025-01/marketing-solutions/audiences/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAudiencesValidateBeforeCall(AudienceSearchInputV1 audienceSearchInputV1, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceSearchInputV1' is set
        if (audienceSearchInputV1 == null) {
            throw new ApiException("Missing the required parameter 'audienceSearchInputV1' when calling searchAudiences(Async)");
        }

        return searchAudiencesCall(audienceSearchInputV1, limit, offset, _callback);

    }

    /**
     * 
     * Returns a list of audiences that match the provided filters. If present, the filters are AND&#39;ed together when applied.
     * @param audienceSearchInputV1 Audience search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @return AudienceEntityV1AudienceSearchMetadataV1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceEntityV1AudienceSearchMetadataV1ListResponse searchAudiences(AudienceSearchInputV1 audienceSearchInputV1, Integer limit, Integer offset) throws ApiException {
        ApiResponse<AudienceEntityV1AudienceSearchMetadataV1ListResponse> localVarResp = searchAudiencesWithHttpInfo(audienceSearchInputV1, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of audiences that match the provided filters. If present, the filters are AND&#39;ed together when applied.
     * @param audienceSearchInputV1 Audience search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @return ApiResponse&lt;AudienceEntityV1AudienceSearchMetadataV1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceEntityV1AudienceSearchMetadataV1ListResponse> searchAudiencesWithHttpInfo(AudienceSearchInputV1 audienceSearchInputV1, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchAudiencesValidateBeforeCall(audienceSearchInputV1, limit, offset, null);
        Type localVarReturnType = new TypeToken<AudienceEntityV1AudienceSearchMetadataV1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of audiences that match the provided filters. If present, the filters are AND&#39;ed together when applied.
     * @param audienceSearchInputV1 Audience search filters. (required)
     * @param limit The number of elements to be returned. The default is 50 and the maximum is 100. (optional, default to 50)
     * @param offset The (zero-based) offset into the collection. The default is 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAudiencesAsync(AudienceSearchInputV1 audienceSearchInputV1, Integer limit, Integer offset, final ApiCallback<AudienceEntityV1AudienceSearchMetadataV1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAudiencesValidateBeforeCall(audienceSearchInputV1, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AudienceEntityV1AudienceSearchMetadataV1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
