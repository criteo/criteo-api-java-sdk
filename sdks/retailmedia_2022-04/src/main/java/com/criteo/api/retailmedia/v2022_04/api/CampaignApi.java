/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2022-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2022_04.api;

import com.criteo.api.retailmedia.v2022_04.ApiCallback;
import com.criteo.api.retailmedia.v2022_04.ApiClient;
import com.criteo.api.retailmedia.v2022_04.ApiException;
import com.criteo.api.retailmedia.v2022_04.ApiResponse;
import com.criteo.api.retailmedia.v2022_04.Configuration;
import com.criteo.api.retailmedia.v2022_04.Pair;
import com.criteo.api.retailmedia.v2022_04.ProgressRequestBody;
import com.criteo.api.retailmedia.v2022_04.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.v2022_04.model.AddToBasketIdsUpdateModel202110Request;
import com.criteo.api.retailmedia.v2022_04.model.AddToBasketTarget202110Request;
import com.criteo.api.retailmedia.v2022_04.model.AddToBasketTarget202110Response;
import com.criteo.api.retailmedia.v2022_04.model.AssetResponse;
import com.criteo.api.retailmedia.v2022_04.model.AuctionLineItemCreateModelRequest;
import com.criteo.api.retailmedia.v2022_04.model.AuctionLineItemPagedListResponse;
import com.criteo.api.retailmedia.v2022_04.model.AuctionLineItemResponse;
import com.criteo.api.retailmedia.v2022_04.model.AuctionLineItemUpdateModelRequest;
import com.criteo.api.retailmedia.v2022_04.model.AudienceIdsUpdateModel202110Request;
import com.criteo.api.retailmedia.v2022_04.model.AudienceTarget202110Request;
import com.criteo.api.retailmedia.v2022_04.model.AudienceTarget202110Response;
import com.criteo.api.retailmedia.v2022_04.model.Balance202110PagedListResponse;
import com.criteo.api.retailmedia.v2022_04.model.BalanceCampaign202110ListRequest;
import com.criteo.api.retailmedia.v2022_04.model.BalanceCampaign202110PagedListResponse;
import com.criteo.api.retailmedia.v2022_04.model.Category202204;
import com.criteo.api.retailmedia.v2022_04.model.Category202204ListResponse;
import com.criteo.api.retailmedia.v2022_04.model.CommonLineItemPagedListResponse;
import com.criteo.api.retailmedia.v2022_04.model.CommonLineItemResponse;
import com.criteo.api.retailmedia.v2022_04.model.Creative202110ListResponse;
import com.criteo.api.retailmedia.v2022_04.model.ExternalPostCampaign;
import com.criteo.api.retailmedia.v2022_04.model.ExternalPutCampaign;
import com.criteo.api.retailmedia.v2022_04.model.ExternalRetailerPages202110;
import java.io.File;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiPageResponseOfAccount;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiPageResponseOfBrand;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiPageResponseOfCampaign;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiPageResponseOfRetailer;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiRequestOfCatalogRequest;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiSingleResponseOfCampaign;
import com.criteo.api.retailmedia.v2022_04.model.JsonApiSingleResponseOfCatalogStatus;
import com.criteo.api.retailmedia.v2022_04.model.KeywordTarget202110Request;
import com.criteo.api.retailmedia.v2022_04.model.KeywordTarget202110Response;
import com.criteo.api.retailmedia.v2022_04.model.PreferredLineItem202110PagedListResponse;
import com.criteo.api.retailmedia.v2022_04.model.PreferredLineItem202110Response;
import com.criteo.api.retailmedia.v2022_04.model.PreferredLineItemCreateModel202110Request;
import com.criteo.api.retailmedia.v2022_04.model.PreferredLineItemResponse;
import com.criteo.api.retailmedia.v2022_04.model.PreferredLineItemUpdateModelRequest;
import com.criteo.api.retailmedia.v2022_04.model.PromotedProduct202110ListRequest;
import com.criteo.api.retailmedia.v2022_04.model.PromotedProduct202110PagedListResponse;
import com.criteo.api.retailmedia.v2022_04.model.StoreIdsUpdateModel202110Request;
import com.criteo.api.retailmedia.v2022_04.model.StoreTarget202110Request;
import com.criteo.api.retailmedia.v2022_04.model.StoreTarget202110Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient localVarApiClient;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAsset
     * @param assetFile The asset binary content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetCall(File assetFile, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetFile != null) {
            localVarFormParams.put("AssetFile", assetFile);
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetValidateBeforeCall(File assetFile, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetFile' is set
        if (assetFile == null) {
            throw new ApiException("Missing the required parameter 'assetFile' when calling createAsset(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetCall(assetFile, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates an asset
     * @param assetFile The asset binary content (required)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse createAsset(File assetFile) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = createAssetWithHttpInfo(assetFile);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an asset
     * @param assetFile The asset binary content (required)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> createAssetWithHttpInfo(File assetFile) throws ApiException {
        okhttp3.Call localVarCall = createAssetValidateBeforeCall(assetFile, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an asset
     * @param assetFile The asset binary content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetAsync(File assetFile, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetValidateBeforeCall(assetFile, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalAccountBalancesByAccountId
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalAccountBalancesByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{account-id}/balances"
            .replaceAll("\\{" + "account-id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalAccountBalancesByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApi202110ExternalAccountBalancesByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalAccountBalancesByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return Balance202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Balance202110PagedListResponse getApi202110ExternalAccountBalancesByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<Balance202110PagedListResponse> localVarResp = getApi202110ExternalAccountBalancesByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;Balance202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Balance202110PagedListResponse> getApi202110ExternalAccountBalancesByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalAccountBalancesByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<Balance202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalAccountBalancesByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<Balance202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalAccountBalancesByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Balance202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalAccountCreativesByAccountId
     * @param accountId External account id to retrieve creatives for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalAccountCreativesByAccountIdCall(String accountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{account-id}/creatives"
            .replaceAll("\\{" + "account-id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalAccountCreativesByAccountIdValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApi202110ExternalAccountCreativesByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalAccountCreativesByAccountIdCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @return Creative202110ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public Creative202110ListResponse getApi202110ExternalAccountCreativesByAccountId(String accountId) throws ApiException {
        ApiResponse<Creative202110ListResponse> localVarResp = getApi202110ExternalAccountCreativesByAccountIdWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @return ApiResponse&lt;Creative202110ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202110ListResponse> getApi202110ExternalAccountCreativesByAccountIdWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalAccountCreativesByAccountIdValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Creative202110ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalAccountCreativesByAccountIdAsync(String accountId, final ApiCallback<Creative202110ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalAccountCreativesByAccountIdValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Creative202110ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/auction-line-items/{line-item-id}/targeting/keywords"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint gets the keyword target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return KeywordTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public KeywordTarget202110Response getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<KeywordTarget202110Response> localVarResp = getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the keyword target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;KeywordTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordTarget202110Response> getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the keyword target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdAsync(String lineItemId, final ApiCallback<KeywordTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalBalanceCampaignsByBalanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalBalanceCampaignsByBalanceIdCall(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/balances/{balance-id}/campaigns"
            .replaceAll("\\{" + "balance-id" + "\\}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling getApi202110ExternalBalanceCampaignsByBalanceId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalBalanceCampaignsByBalanceIdCall(balanceId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return BalanceCampaign202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceCampaign202110PagedListResponse getApi202110ExternalBalanceCampaignsByBalanceId(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<BalanceCampaign202110PagedListResponse> localVarResp = getApi202110ExternalBalanceCampaignsByBalanceIdWithHttpInfo(balanceId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;BalanceCampaign202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceCampaign202110PagedListResponse> getApi202110ExternalBalanceCampaignsByBalanceIdWithHttpInfo(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalBalanceCampaignsByBalanceIdAsync(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<BalanceCampaign202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalCampaignPreferredLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalCampaignPreferredLineItemsByCampaignIdCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/campaigns/{campaign-id}/preferred-line-items"
            .replaceAll("\\{" + "campaign-id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApi202110ExternalCampaignPreferredLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalCampaignPreferredLineItemsByCampaignIdCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of preferred line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return PreferredLineItem202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItem202110PagedListResponse getApi202110ExternalCampaignPreferredLineItemsByCampaignId(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<PreferredLineItem202110PagedListResponse> localVarResp = getApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(campaignId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of preferred line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;PreferredLineItem202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItem202110PagedListResponse> getApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<PreferredLineItem202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of preferred line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<PreferredLineItem202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItem202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalLineItemProductsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalLineItemProductsByLineItemIdCall(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/line-items/{line-item-id}/products"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalLineItemProductsByLineItemIdValidateBeforeCall(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202110ExternalLineItemProductsByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalLineItemProductsByLineItemIdCall(lineItemId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint gets the promoted products on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return PromotedProduct202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PromotedProduct202110PagedListResponse getApi202110ExternalLineItemProductsByLineItemId(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<PromotedProduct202110PagedListResponse> localVarResp = getApi202110ExternalLineItemProductsByLineItemIdWithHttpInfo(lineItemId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the promoted products on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;PromotedProduct202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromotedProduct202110PagedListResponse> getApi202110ExternalLineItemProductsByLineItemIdWithHttpInfo(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<PromotedProduct202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the promoted products on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalLineItemProductsByLineItemIdAsync(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<PromotedProduct202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PromotedProduct202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint gets the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsync(String lineItemId, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/audiences"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint gets the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsync(String lineItemId, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/stores"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint gets the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsync(String lineItemId, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202110ExternalRetailerPagesByRetailerId
     * @param retailerId The retailers to fetch pages for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalRetailerPagesByRetailerIdCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/retailers/{retailerId}/pages"
            .replaceAll("\\{" + "retailerId" + "\\}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202110ExternalRetailerPagesByRetailerIdValidateBeforeCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApi202110ExternalRetailerPagesByRetailerId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202110ExternalRetailerPagesByRetailerIdCall(retailerId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the page types available for the given retailer
     * @param retailerId The retailers to fetch pages for (required)
     * @return ExternalRetailerPages202110
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ExternalRetailerPages202110 getApi202110ExternalRetailerPagesByRetailerId(Integer retailerId) throws ApiException {
        ApiResponse<ExternalRetailerPages202110> localVarResp = getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo(retailerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the page types available for the given retailer
     * @param retailerId The retailers to fetch pages for (required)
     * @return ApiResponse&lt;ExternalRetailerPages202110&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalRetailerPages202110> getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo(Integer retailerId) throws ApiException {
        okhttp3.Call localVarCall = getApi202110ExternalRetailerPagesByRetailerIdValidateBeforeCall(retailerId, null);
        Type localVarReturnType = new TypeToken<ExternalRetailerPages202110>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the page types available for the given retailer
     * @param retailerId The retailers to fetch pages for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202110ExternalRetailerPagesByRetailerIdAsync(Integer retailerId, final ApiCallback<ExternalRetailerPages202110> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202110ExternalRetailerPagesByRetailerIdValidateBeforeCall(retailerId, _callback);
        Type localVarReturnType = new TypeToken<ExternalRetailerPages202110>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202204ExternalCategorieByCategoryId
     * @param categoryId ID of the desired category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No IDs were passed in. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request input based error occurred in the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategorieByCategoryIdCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202204ExternalCategorieByCategoryIdValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getApi202204ExternalCategorieByCategoryId(Async)");
        }
        

        okhttp3.Call localVarCall = getApi202204ExternalCategorieByCategoryIdCall(categoryId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint to search for a specific category by categoryId.
     * @param categoryId ID of the desired category (required)
     * @return Category202204
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No IDs were passed in. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request input based error occurred in the server. </td><td>  -  </td></tr>
     </table>
     */
    public Category202204 getApi202204ExternalCategorieByCategoryId(Integer categoryId) throws ApiException {
        ApiResponse<Category202204> localVarResp = getApi202204ExternalCategorieByCategoryIdWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search for a specific category by categoryId.
     * @param categoryId ID of the desired category (required)
     * @return ApiResponse&lt;Category202204&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No IDs were passed in. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request input based error occurred in the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category202204> getApi202204ExternalCategorieByCategoryIdWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = getApi202204ExternalCategorieByCategoryIdValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<Category202204>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search for a specific category by categoryId.
     * @param categoryId ID of the desired category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieval completed and category is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No IDs were passed in. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request input based error occurred in the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategorieByCategoryIdAsync(Integer categoryId, final ApiCallback<Category202204> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202204ExternalCategorieByCategoryIdValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<Category202204>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202204ExternalCategories
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategoriesCall(Integer retailerId, String textSubstring, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (retailerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retailerId", retailerId));
        }

        if (textSubstring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSubstring", textSubstring));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202204ExternalCategoriesValidateBeforeCall(Integer retailerId, String textSubstring, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getApi202204ExternalCategoriesCall(retailerId, textSubstring, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint to search categories by text and retailer.
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @return Category202204ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public Category202204ListResponse getApi202204ExternalCategories(Integer retailerId, String textSubstring, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<Category202204ListResponse> localVarResp = getApi202204ExternalCategoriesWithHttpInfo(retailerId, textSubstring, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search categories by text and retailer.
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @return ApiResponse&lt;Category202204ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category202204ListResponse> getApi202204ExternalCategoriesWithHttpInfo(Integer retailerId, String textSubstring, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApi202204ExternalCategoriesValidateBeforeCall(retailerId, textSubstring, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<Category202204ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search categories by text and retailer.
     * @param retailerId The retailer id for which Categories fetched (optional)
     * @param textSubstring Query string to search across Categories (optional)
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202204ExternalCategoriesAsync(Integer retailerId, String textSubstring, Integer pageIndex, Integer pageSize, final ApiCallback<Category202204ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202204ExternalCategoriesValidateBeforeCall(retailerId, textSubstring, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Category202204ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountBrandsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{accountId}/brands"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountBrandsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfBrand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfBrand getApiV1ExternalAccountBrandsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfBrand> localVarResp = getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfBrand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfBrand> getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfBrand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{accountId}/campaigns"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountCampaignsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfCampaign getApiV1ExternalAccountCampaignsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfCampaign> localVarResp = getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfCampaign> getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountRetailersByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{accountId}/retailers"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountRetailersByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfRetailer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfRetailer getApiV1ExternalAccountRetailersByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfRetailer> localVarResp = getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfRetailer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfRetailer> getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfRetailer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccounts
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountsValidateBeforeCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountsCall(limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfAccount getApiV1ExternalAccounts(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfAccount> localVarResp = getApiV1ExternalAccountsWithHttpInfo(limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfAccount> getApiV1ExternalAccountsWithHttpInfo(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsAsync(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignByCampaignIdCall(String campaignId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV1ExternalCampaignByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdCall(campaignId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign getApiV1ExternalCampaignByCampaignId(String campaignId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = getApiV1ExternalCampaignByCampaignIdWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> getApiV1ExternalCampaignByCampaignIdWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignByCampaignIdAsync(String campaignId, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCatalogOutputByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/catalogs/{catalogId}/output"
            .replaceAll("\\{" + "catalogId" + "\\}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-json-stream", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV1ExternalCatalogOutputByCatalogId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdCall(catalogId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public void getApiV1ExternalCatalogOutputByCatalogId(String catalogId) throws ApiException {
        getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo(catalogId);
    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdAsync(String catalogId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCatalogStatusByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/catalogs/{catalogId}/status"
            .replaceAll("\\{" + "catalogId" + "\\}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV1ExternalCatalogStatusByCatalogId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdCall(catalogId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus getApiV1ExternalCatalogStatusByCatalogId(String catalogId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdAsync(String catalogId, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalAccountLineItemsByAccountId
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAccountLineItemsByAccountIdCall(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{account-id}/line-items"
            .replaceAll("\\{" + "account-id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToCampaignId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToCampaignId", limitToCampaignId));
        }

        if (limitToType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitToType", limitToType));
        }

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalAccountLineItemsByAccountIdValidateBeforeCall(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV2ExternalAccountLineItemsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalAccountLineItemsByAccountIdCall(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return CommonLineItemPagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLineItemPagedListResponse getApiV2ExternalAccountLineItemsByAccountId(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<CommonLineItemPagedListResponse> localVarResp = getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;CommonLineItemPagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLineItemPagedListResponse> getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalAccountLineItemsByAccountIdValidateBeforeCall(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<CommonLineItemPagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAccountLineItemsByAccountIdAsync(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<CommonLineItemPagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalAccountLineItemsByAccountIdValidateBeforeCall(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<CommonLineItemPagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalAuctionLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAuctionLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/auction-line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalAuctionLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalAuctionLineItemByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse getApiV2ExternalAuctionLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAuctionLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalCampaignAuctionLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/campaigns/{campaign-id}/auction-line-items"
            .replaceAll("\\{" + "campaign-id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV2ExternalCampaignAuctionLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return AuctionLineItemPagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemPagedListResponse getApiV2ExternalCampaignAuctionLineItemsByCampaignId(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<AuctionLineItemPagedListResponse> localVarResp = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(campaignId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;AuctionLineItemPagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemPagedListResponse> getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemPagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<AuctionLineItemPagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemPagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalLineItemByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return CommonLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLineItemResponse getApiV2ExternalLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<CommonLineItemResponse> localVarResp = getApiV2ExternalLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;CommonLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLineItemResponse> getApiV2ExternalLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<CommonLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<CommonLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<CommonLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalPreferredLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalPreferredLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalPreferredLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalPreferredLineItemByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return PreferredLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItemResponse getApiV2ExternalPreferredLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<PreferredLineItemResponse> localVarResp = getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;PreferredLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItemResponse> getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<PreferredLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalPreferredLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<PreferredLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = keywordTarget202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/auction-line-items/{line-item-id}/targeting/keywords/append"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdValidateBeforeCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdCall(lineItemId, keywordTarget202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint appends one or more keywords to targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return KeywordTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public KeywordTarget202110Response postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        ApiResponse<KeywordTarget202110Response> localVarResp = postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdWithHttpInfo(lineItemId, keywordTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more keywords to targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return ApiResponse&lt;KeywordTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordTarget202110Response> postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdWithHttpInfo(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, null);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more keywords to targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdAsync(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback<KeywordTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = keywordTarget202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/auction-line-items/{line-item-id}/targeting/keywords/delete"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdValidateBeforeCall(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdCall(lineItemId, keywordTarget202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint removes one or more keywords from targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return KeywordTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public KeywordTarget202110Response postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        ApiResponse<KeywordTarget202110Response> localVarResp = postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdWithHttpInfo(lineItemId, keywordTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more keywords from targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @return ApiResponse&lt;KeywordTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordTarget202110Response> postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdWithHttpInfo(String lineItemId, KeywordTarget202110Request keywordTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, null);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more keywords from targeting on the specified line item.  The resulting state of the keyword target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param keywordTarget202110Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdAsync(String lineItemId, KeywordTarget202110Request keywordTarget202110Request, final ApiCallback<KeywordTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdValidateBeforeCall(lineItemId, keywordTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<KeywordTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalBalanceCampaignsAppendByBalanceId
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalBalanceCampaignsAppendByBalanceIdCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = balanceCampaign202110ListRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/balances/{balance-id}/campaigns/append"
            .replaceAll("\\{" + "balance-id" + "\\}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalBalanceCampaignsAppendByBalanceIdValidateBeforeCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling postApi202110ExternalBalanceCampaignsAppendByBalanceId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalBalanceCampaignsAppendByBalanceIdCall(balanceId, balanceCampaign202110ListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return BalanceCampaign202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceCampaign202110PagedListResponse postApi202110ExternalBalanceCampaignsAppendByBalanceId(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        ApiResponse<BalanceCampaign202110PagedListResponse> localVarResp = postApi202110ExternalBalanceCampaignsAppendByBalanceIdWithHttpInfo(balanceId, balanceCampaign202110ListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return ApiResponse&lt;BalanceCampaign202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceCampaign202110PagedListResponse> postApi202110ExternalBalanceCampaignsAppendByBalanceIdWithHttpInfo(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalBalanceCampaignsAppendByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, null);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalBalanceCampaignsAppendByBalanceIdAsync(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback<BalanceCampaign202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalBalanceCampaignsAppendByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalBalanceCampaignsDeleteByBalanceId
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalBalanceCampaignsDeleteByBalanceIdCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = balanceCampaign202110ListRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/balances/{balance-id}/campaigns/delete"
            .replaceAll("\\{" + "balance-id" + "\\}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalBalanceCampaignsDeleteByBalanceIdValidateBeforeCall(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling postApi202110ExternalBalanceCampaignsDeleteByBalanceId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalBalanceCampaignsDeleteByBalanceIdCall(balanceId, balanceCampaign202110ListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return BalanceCampaign202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceCampaign202110PagedListResponse postApi202110ExternalBalanceCampaignsDeleteByBalanceId(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        ApiResponse<BalanceCampaign202110PagedListResponse> localVarResp = postApi202110ExternalBalanceCampaignsDeleteByBalanceIdWithHttpInfo(balanceId, balanceCampaign202110ListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @return ApiResponse&lt;BalanceCampaign202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceCampaign202110PagedListResponse> postApi202110ExternalBalanceCampaignsDeleteByBalanceIdWithHttpInfo(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalBalanceCampaignsDeleteByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, null);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param balanceCampaign202110ListRequest The campaigns to append (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalBalanceCampaignsDeleteByBalanceIdAsync(String balanceId, BalanceCampaign202110ListRequest balanceCampaign202110ListRequest, final ApiCallback<BalanceCampaign202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalBalanceCampaignsDeleteByBalanceIdValidateBeforeCall(balanceId, balanceCampaign202110ListRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalCampaignPreferredLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModel202110Request The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalCampaignPreferredLineItemsByCampaignIdCall(String campaignId, PreferredLineItemCreateModel202110Request preferredLineItemCreateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = preferredLineItemCreateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/campaigns/{campaign-id}/preferred-line-items"
            .replaceAll("\\{" + "campaign-id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(String campaignId, PreferredLineItemCreateModel202110Request preferredLineItemCreateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApi202110ExternalCampaignPreferredLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdCall(campaignId, preferredLineItemCreateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new preferred line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModel202110Request The line item settings to create a line item with (optional)
     * @return PreferredLineItem202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItem202110Response postApi202110ExternalCampaignPreferredLineItemsByCampaignId(String campaignId, PreferredLineItemCreateModel202110Request preferredLineItemCreateModel202110Request) throws ApiException {
        ApiResponse<PreferredLineItem202110Response> localVarResp = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(campaignId, preferredLineItemCreateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new preferred line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModel202110Request The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;PreferredLineItem202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItem202110Response> postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(String campaignId, PreferredLineItemCreateModel202110Request preferredLineItemCreateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, preferredLineItemCreateModel202110Request, null);
        Type localVarReturnType = new TypeToken<PreferredLineItem202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new preferred line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModel202110Request The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync(String campaignId, PreferredLineItemCreateModel202110Request preferredLineItemCreateModel202110Request, final ApiCallback<PreferredLineItem202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, preferredLineItemCreateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItem202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalLineItemProductsAppendByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest the products to append to this line item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsAppendByLineItemIdCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = promotedProduct202110ListRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/line-items/{line-item-id}/products/append"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalLineItemProductsAppendByLineItemIdValidateBeforeCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalLineItemProductsAppendByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsAppendByLineItemIdCall(lineItemId, promotedProduct202110ListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint appends one or more products to promote on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest the products to append to this line item (optional)
     * @return PromotedProduct202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PromotedProduct202110PagedListResponse postApi202110ExternalLineItemProductsAppendByLineItemId(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        ApiResponse<PromotedProduct202110PagedListResponse> localVarResp = postApi202110ExternalLineItemProductsAppendByLineItemIdWithHttpInfo(lineItemId, promotedProduct202110ListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more products to promote on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest the products to append to this line item (optional)
     * @return ApiResponse&lt;PromotedProduct202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromotedProduct202110PagedListResponse> postApi202110ExternalLineItemProductsAppendByLineItemIdWithHttpInfo(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsAppendByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, null);
        Type localVarReturnType = new TypeToken<PromotedProduct202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more products to promote on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest the products to append to this line item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsAppendByLineItemIdAsync(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback<PromotedProduct202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsAppendByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, _callback);
        Type localVarReturnType = new TypeToken<PromotedProduct202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalLineItemProductsDeleteByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsDeleteByLineItemIdCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = promotedProduct202110ListRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/line-items/{line-item-id}/products/delete"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalLineItemProductsDeleteByLineItemIdValidateBeforeCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalLineItemProductsDeleteByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsDeleteByLineItemIdCall(lineItemId, promotedProduct202110ListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint removes one or more products from promotion on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest  (optional)
     * @return PromotedProduct202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PromotedProduct202110PagedListResponse postApi202110ExternalLineItemProductsDeleteByLineItemId(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        ApiResponse<PromotedProduct202110PagedListResponse> localVarResp = postApi202110ExternalLineItemProductsDeleteByLineItemIdWithHttpInfo(lineItemId, promotedProduct202110ListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more products from promotion on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest  (optional)
     * @return ApiResponse&lt;PromotedProduct202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromotedProduct202110PagedListResponse> postApi202110ExternalLineItemProductsDeleteByLineItemIdWithHttpInfo(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsDeleteByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, null);
        Type localVarReturnType = new TypeToken<PromotedProduct202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more products from promotion on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param promotedProduct202110ListRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsDeleteByLineItemIdAsync(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback<PromotedProduct202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsDeleteByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, _callback);
        Type localVarReturnType = new TypeToken<PromotedProduct202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalLineItemProductsPauseByLineItemId
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to pause. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsPauseByLineItemIdCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = promotedProduct202110ListRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/line-items/{line-item-id}/products/pause"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalLineItemProductsPauseByLineItemIdValidateBeforeCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalLineItemProductsPauseByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsPauseByLineItemIdCall(lineItemId, promotedProduct202110ListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint pauses one or more promoted products on a specified line item.
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to pause. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void postApi202110ExternalLineItemProductsPauseByLineItemId(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        postApi202110ExternalLineItemProductsPauseByLineItemIdWithHttpInfo(lineItemId, promotedProduct202110ListRequest);
    }

    /**
     * 
     * This endpoint pauses one or more promoted products on a specified line item.
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to pause. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postApi202110ExternalLineItemProductsPauseByLineItemIdWithHttpInfo(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsPauseByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This endpoint pauses one or more promoted products on a specified line item.
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to pause. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsPauseByLineItemIdAsync(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsPauseByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalLineItemProductsUnpauseByLineItemId
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to unpause. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsUnpauseByLineItemIdCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = promotedProduct202110ListRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/line-items/{line-item-id}/products/unpause"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalLineItemProductsUnpauseByLineItemIdValidateBeforeCall(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalLineItemProductsUnpauseByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsUnpauseByLineItemIdCall(lineItemId, promotedProduct202110ListRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint unpauses one or more promoted products on a specified line item.
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to unpause. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void postApi202110ExternalLineItemProductsUnpauseByLineItemId(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        postApi202110ExternalLineItemProductsUnpauseByLineItemIdWithHttpInfo(lineItemId, promotedProduct202110ListRequest);
    }

    /**
     * 
     * This endpoint unpauses one or more promoted products on a specified line item.
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to unpause. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postApi202110ExternalLineItemProductsUnpauseByLineItemIdWithHttpInfo(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsUnpauseByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This endpoint unpauses one or more promoted products on a specified line item.
     * @param lineItemId The line item to interact with. (required)
     * @param promotedProduct202110ListRequest The products from which their IDs will be used to unpause. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalLineItemProductsUnpauseByLineItemIdAsync(String lineItemId, PromotedProduct202110ListRequest promotedProduct202110ListRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalLineItemProductsUnpauseByLineItemIdValidateBeforeCall(lineItemId, promotedProduct202110ListRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addToBasketIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket/append"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdValidateBeforeCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint appends one or more add to basket ids to targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdWithHttpInfo(lineItemId, addToBasketIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more add to basket ids to targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdWithHttpInfo(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more add to basket ids to targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to append to the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdAsync(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addToBasketIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket/delete"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdValidateBeforeCall(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint removes one or more add to basket ids from targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdWithHttpInfo(lineItemId, addToBasketIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more add to basket ids from targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdWithHttpInfo(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more add to basket ids from targeting on the specified line item.  The resulting state of the add to basket target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketIdsUpdateModel202110Request Ids to remove from the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdAsync(String lineItemId, AddToBasketIdsUpdateModel202110Request addToBasketIdsUpdateModel202110Request, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdValidateBeforeCall(lineItemId, addToBasketIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = audienceIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/audiences/append"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdValidateBeforeCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint appends one or more audiences ids to targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdWithHttpInfo(lineItemId, audienceIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more audiences ids to targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdWithHttpInfo(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more audiences ids to targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to append to the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdAsync(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = audienceIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/audiences/delete"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdValidateBeforeCall(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint removes one or more audiences ids from targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdWithHttpInfo(lineItemId, audienceIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more audiences ids from targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdWithHttpInfo(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more audiences ids from targeting on the specified line item.  The resulting state of the audience target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param audienceIdsUpdateModel202110Request Audience ids to remove from the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdAsync(String lineItemId, AudienceIdsUpdateModel202110Request audienceIdsUpdateModel202110Request, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdValidateBeforeCall(lineItemId, audienceIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storeIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/stores/append"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdValidateBeforeCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdCall(lineItemId, storeIdsUpdateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint appends one or more store ids to targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdWithHttpInfo(lineItemId, storeIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more store ids to targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdWithHttpInfo(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more store ids to targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to append to the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdAsync(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storeIdsUpdateModel202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/stores/delete"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdValidateBeforeCall(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdCall(lineItemId, storeIdsUpdateModel202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint removes one or more store ids from targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdWithHttpInfo(lineItemId, storeIdsUpdateModel202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more store ids from targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdWithHttpInfo(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more store ids from targeting on the specified line item.  The resulting state of the store target is returned.
     * @param lineItemId The line item to interact with (required)
     * @param storeIdsUpdateModel202110Request Store ids to remove from the target (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdAsync(String lineItemId, StoreIdsUpdateModel202110Request storeIdsUpdateModel202110Request, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdValidateBeforeCall(lineItemId, storeIdsUpdateModel202110Request, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalAccountCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdCall(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPostCampaign;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{accountId}/campaigns"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalAccountCampaignsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdCall(accountId, externalPostCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign postApiV1ExternalAccountCampaignsByAccountId(String accountId, ExternalPostCampaign externalPostCampaign) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(accountId, externalPostCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(String accountId, ExternalPostCampaign externalPostCampaign) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, externalPostCampaign, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdAsync(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, externalPostCampaign, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalAccountCatalogsByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdCall(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiRequestOfCatalogRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/accounts/{accountId}/catalogs"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalAccountCatalogsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdCall(accountId, jsonApiRequestOfCatalogRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus postApiV1ExternalAccountCatalogsByAccountId(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo(accountId, jsonApiRequestOfCatalogRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequest, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdAsync(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV2ExternalCampaignAuctionLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = auctionLineItemCreateModelRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/campaigns/{campaign-id}/auction-line-items"
            .replaceAll("\\{" + "campaign-id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApiV2ExternalCampaignAuctionLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(campaignId, auctionLineItemCreateModelRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse postApiV2ExternalCampaignAuctionLineItemsByCampaignId(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(campaignId, auctionLineItemCreateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, auctionLineItemCreateModelRequest, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, auctionLineItemCreateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdCall(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addToBasketTarget202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdValidateBeforeCall(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdCall(lineItemId, addToBasketTarget202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint sets the scope of the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @return AddToBasketTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AddToBasketTarget202110Response putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request) throws ApiException {
        ApiResponse<AddToBasketTarget202110Response> localVarResp = putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo(lineItemId, addToBasketTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint sets the scope of the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @return ApiResponse&lt;AddToBasketTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddToBasketTarget202110Response> putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdValidateBeforeCall(lineItemId, addToBasketTarget202110Request, null);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint sets the scope of the add to basket target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param addToBasketTarget202110Request The add to basket target to set the scope for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsync(String lineItemId, AddToBasketTarget202110Request addToBasketTarget202110Request, final ApiCallback<AddToBasketTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdValidateBeforeCall(lineItemId, addToBasketTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<AddToBasketTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdCall(String lineItemId, AudienceTarget202110Request audienceTarget202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = audienceTarget202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/audiences"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdValidateBeforeCall(String lineItemId, AudienceTarget202110Request audienceTarget202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdCall(lineItemId, audienceTarget202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint sets the scope of the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @return AudienceTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AudienceTarget202110Response putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId(String lineItemId, AudienceTarget202110Request audienceTarget202110Request) throws ApiException {
        ApiResponse<AudienceTarget202110Response> localVarResp = putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo(lineItemId, audienceTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint sets the scope of the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @return ApiResponse&lt;AudienceTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceTarget202110Response> putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo(String lineItemId, AudienceTarget202110Request audienceTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdValidateBeforeCall(lineItemId, audienceTarget202110Request, null);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint sets the scope of the audience target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param audienceTarget202110Request The audience target to set the scope for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsync(String lineItemId, AudienceTarget202110Request audienceTarget202110Request, final ApiCallback<AudienceTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdValidateBeforeCall(lineItemId, audienceTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<AudienceTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdCall(String lineItemId, StoreTarget202110Request storeTarget202110Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = storeTarget202110Request;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}/targeting/stores"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdValidateBeforeCall(String lineItemId, StoreTarget202110Request storeTarget202110Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdCall(lineItemId, storeTarget202110Request, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint sets the scope of the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @return StoreTarget202110Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StoreTarget202110Response putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId(String lineItemId, StoreTarget202110Request storeTarget202110Request) throws ApiException {
        ApiResponse<StoreTarget202110Response> localVarResp = putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo(lineItemId, storeTarget202110Request);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint sets the scope of the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @return ApiResponse&lt;StoreTarget202110Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreTarget202110Response> putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo(String lineItemId, StoreTarget202110Request storeTarget202110Request) throws ApiException {
        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdValidateBeforeCall(lineItemId, storeTarget202110Request, null);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint sets the scope of the store target on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param storeTarget202110Request The store target to set the scope for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsync(String lineItemId, StoreTarget202110Request storeTarget202110Request, final ApiCallback<StoreTarget202110Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdValidateBeforeCall(lineItemId, storeTarget202110Request, _callback);
        Type localVarReturnType = new TypeToken<StoreTarget202110Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV1ExternalCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalCampaignByCampaignIdCall(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPutCampaign;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling putApiV1ExternalCampaignByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdCall(campaignId, externalPutCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign putApiV1ExternalCampaignByCampaignId(String campaignId, ExternalPutCampaign externalPutCampaign) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = putApiV1ExternalCampaignByCampaignIdWithHttpInfo(campaignId, externalPutCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> putApiV1ExternalCampaignByCampaignIdWithHttpInfo(String campaignId, ExternalPutCampaign externalPutCampaign) throws ApiException {
        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, externalPutCampaign, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalCampaignByCampaignIdAsync(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, externalPutCampaign, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2ExternalAuctionLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalAuctionLineItemByLineItemIdCall(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = auctionLineItemUpdateModelRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/auction-line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApiV2ExternalAuctionLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV2ExternalAuctionLineItemByLineItemIdCall(lineItemId, auctionLineItemUpdateModelRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse putApiV2ExternalAuctionLineItemByLineItemId(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(lineItemId, auctionLineItemUpdateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = putApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, auctionLineItemUpdateModelRequest, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalAuctionLineItemByLineItemIdAsync(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, auctionLineItemUpdateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2ExternalPreferredLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalPreferredLineItemByLineItemIdCall(String lineItemId, PreferredLineItemUpdateModelRequest preferredLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = preferredLineItemUpdateModelRequest;

        // create path and map variables
        String localVarPath = "/2022-04/retail-media/preferred-line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(String lineItemId, PreferredLineItemUpdateModelRequest preferredLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApiV2ExternalPreferredLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV2ExternalPreferredLineItemByLineItemIdCall(lineItemId, preferredLineItemUpdateModelRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return PreferredLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItemResponse putApiV2ExternalPreferredLineItemByLineItemId(String lineItemId, PreferredLineItemUpdateModelRequest preferredLineItemUpdateModelRequest) throws ApiException {
        ApiResponse<PreferredLineItemResponse> localVarResp = putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo(lineItemId, preferredLineItemUpdateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;PreferredLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItemResponse> putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo(String lineItemId, PreferredLineItemUpdateModelRequest preferredLineItemUpdateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = putApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, preferredLineItemUpdateModelRequest, null);
        Type localVarReturnType = new TypeToken<PreferredLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalPreferredLineItemByLineItemIdAsync(String lineItemId, PreferredLineItemUpdateModelRequest preferredLineItemUpdateModelRequest, final ApiCallback<PreferredLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, preferredLineItemUpdateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
