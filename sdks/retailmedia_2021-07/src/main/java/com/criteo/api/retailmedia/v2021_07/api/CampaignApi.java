/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2021-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2021_07.api;

import com.criteo.api.retailmedia.v2021_07.ApiCallback;
import com.criteo.api.retailmedia.v2021_07.ApiClient;
import com.criteo.api.retailmedia.v2021_07.ApiException;
import com.criteo.api.retailmedia.v2021_07.ApiResponse;
import com.criteo.api.retailmedia.v2021_07.Configuration;
import com.criteo.api.retailmedia.v2021_07.Pair;
import com.criteo.api.retailmedia.v2021_07.ProgressRequestBody;
import com.criteo.api.retailmedia.v2021_07.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.v2021_07.model.AuctionLineItemCreateModelRequest;
import com.criteo.api.retailmedia.v2021_07.model.AuctionLineItemPagedListResponse;
import com.criteo.api.retailmedia.v2021_07.model.AuctionLineItemResponse;
import com.criteo.api.retailmedia.v2021_07.model.AuctionLineItemUpdateModelRequest;
import com.criteo.api.retailmedia.v2021_07.model.CommonLineItemPagedListResponse;
import com.criteo.api.retailmedia.v2021_07.model.CommonLineItemResponse;
import com.criteo.api.retailmedia.v2021_07.model.ExternalPostCampaign;
import com.criteo.api.retailmedia.v2021_07.model.ExternalPutCampaign;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiPageResponseOfAccount;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiPageResponseOfBrand;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiPageResponseOfCampaign;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiPageResponseOfRetailer;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiRequestOfCatalogRequest;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiSingleResponseOfCampaign;
import com.criteo.api.retailmedia.v2021_07.model.JsonApiSingleResponseOfCatalogStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient localVarApiClient;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getApiV1ExternalAccountBrandsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts/{accountId}/brands"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountBrandsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfBrand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfBrand getApiV1ExternalAccountBrandsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfBrand> localVarResp = getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfBrand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfBrand> getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfBrand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts/{accountId}/campaigns"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountCampaignsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfCampaign getApiV1ExternalAccountCampaignsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfCampaign> localVarResp = getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfCampaign> getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountRetailersByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts/{accountId}/retailers"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountRetailersByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfRetailer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfRetailer getApiV1ExternalAccountRetailersByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfRetailer> localVarResp = getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfRetailer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfRetailer> getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfRetailer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccounts
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountsValidateBeforeCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountsCall(limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfAccount getApiV1ExternalAccounts(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfAccount> localVarResp = getApiV1ExternalAccountsWithHttpInfo(limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfAccount> getApiV1ExternalAccountsWithHttpInfo(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsAsync(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignByCampaignIdCall(String campaignId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV1ExternalCampaignByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdCall(campaignId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign getApiV1ExternalCampaignByCampaignId(String campaignId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = getApiV1ExternalCampaignByCampaignIdWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> getApiV1ExternalCampaignByCampaignIdWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignByCampaignIdAsync(String campaignId, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCatalogOutputByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/catalogs/{catalogId}/output"
            .replaceAll("\\{" + "catalogId" + "\\}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-json-stream", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV1ExternalCatalogOutputByCatalogId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdCall(catalogId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public void getApiV1ExternalCatalogOutputByCatalogId(String catalogId) throws ApiException {
        getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo(catalogId);
    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogOutputByCatalogIdAsync(String catalogId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCatalogStatusByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/catalogs/{catalogId}/status"
            .replaceAll("\\{" + "catalogId" + "\\}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV1ExternalCatalogStatusByCatalogId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdCall(catalogId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus getApiV1ExternalCatalogStatusByCatalogId(String catalogId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCatalogStatusByCatalogIdAsync(String catalogId, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalAccountLineItemsByAccountId
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAccountLineItemsByAccountIdCall(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts/{account-id}/line-items"
            .replaceAll("\\{" + "account-id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToCampaignId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToCampaignId", limitToCampaignId));
        }

        if (limitToType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitToType", limitToType));
        }

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalAccountLineItemsByAccountIdValidateBeforeCall(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV2ExternalAccountLineItemsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalAccountLineItemsByAccountIdCall(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return CommonLineItemPagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLineItemPagedListResponse getApiV2ExternalAccountLineItemsByAccountId(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<CommonLineItemPagedListResponse> localVarResp = getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;CommonLineItemPagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLineItemPagedListResponse> getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalAccountLineItemsByAccountIdValidateBeforeCall(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<CommonLineItemPagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of line item objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToCampaignId The campaign ids that you would like to limit your result set to (optional)
     * @param limitToType The campaign types that you would like to limit your result set to (optional)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAccountLineItemsByAccountIdAsync(String accountId, List<String> limitToCampaignId, String limitToType, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<CommonLineItemPagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalAccountLineItemsByAccountIdValidateBeforeCall(accountId, limitToCampaignId, limitToType, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<CommonLineItemPagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalAuctionLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAuctionLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/auction-line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalAuctionLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalAuctionLineItemByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse getApiV2ExternalAuctionLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAuctionLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalCampaignAuctionLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/campaigns/{campaign-id}/auction-line-items"
            .replaceAll("\\{" + "campaign-id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV2ExternalCampaignAuctionLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return AuctionLineItemPagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemPagedListResponse getApiV2ExternalCampaignAuctionLineItemsByCampaignId(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<AuctionLineItemPagedListResponse> localVarResp = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(campaignId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;AuctionLineItemPagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemPagedListResponse> getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemPagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of auction line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<AuctionLineItemPagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemPagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV2ExternalLineItemByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return CommonLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLineItemResponse getApiV2ExternalLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<CommonLineItemResponse> localVarResp = getApiV2ExternalLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;CommonLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLineItemResponse> getApiV2ExternalLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<CommonLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<CommonLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<CommonLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalAccountCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdCall(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPostCampaign;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts/{accountId}/campaigns"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalAccountCampaignsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdCall(accountId, externalPostCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign postApiV1ExternalAccountCampaignsByAccountId(String accountId, ExternalPostCampaign externalPostCampaign) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(accountId, externalPostCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(String accountId, ExternalPostCampaign externalPostCampaign) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, externalPostCampaign, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdAsync(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, externalPostCampaign, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalAccountCatalogsByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdCall(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiRequestOfCatalogRequest;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/accounts/{accountId}/catalogs"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalAccountCatalogsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdCall(accountId, jsonApiRequestOfCatalogRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus postApiV1ExternalAccountCatalogsByAccountId(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo(accountId, jsonApiRequestOfCatalogRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequest, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCatalogsByAccountIdAsync(String accountId, JsonApiRequestOfCatalogRequest jsonApiRequestOfCatalogRequest, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV2ExternalCampaignAuctionLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = auctionLineItemCreateModelRequest;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/campaigns/{campaign-id}/auction-line-items"
            .replaceAll("\\{" + "campaign-id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApiV2ExternalCampaignAuctionLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdCall(campaignId, auctionLineItemCreateModelRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse postApiV2ExternalCampaignAuctionLineItemsByCampaignId(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(campaignId, auctionLineItemCreateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, auctionLineItemCreateModelRequest, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates new auction line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param auctionLineItemCreateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync(String campaignId, AuctionLineItemCreateModelRequest auctionLineItemCreateModelRequest, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV2ExternalCampaignAuctionLineItemsByCampaignIdValidateBeforeCall(campaignId, auctionLineItemCreateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV1ExternalCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalCampaignByCampaignIdCall(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPutCampaign;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling putApiV1ExternalCampaignByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdCall(campaignId, externalPutCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign putApiV1ExternalCampaignByCampaignId(String campaignId, ExternalPutCampaign externalPutCampaign) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = putApiV1ExternalCampaignByCampaignIdWithHttpInfo(campaignId, externalPutCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> putApiV1ExternalCampaignByCampaignIdWithHttpInfo(String campaignId, ExternalPutCampaign externalPutCampaign) throws ApiException {
        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, externalPutCampaign, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalCampaignByCampaignIdAsync(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, externalPutCampaign, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2ExternalAuctionLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalAuctionLineItemByLineItemIdCall(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = auctionLineItemUpdateModelRequest;

        // create path and map variables
        String localVarPath = "/2021-07/retail-media/auction-line-items/{line-item-id}"
            .replaceAll("\\{" + "line-item-id" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApiV2ExternalAuctionLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV2ExternalAuctionLineItemByLineItemIdCall(lineItemId, auctionLineItemUpdateModelRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return AuctionLineItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AuctionLineItemResponse putApiV2ExternalAuctionLineItemByLineItemId(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest) throws ApiException {
        ApiResponse<AuctionLineItemResponse> localVarResp = putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(lineItemId, auctionLineItemUpdateModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;AuctionLineItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuctionLineItemResponse> putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest) throws ApiException {
        okhttp3.Call localVarCall = putApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, auctionLineItemUpdateModelRequest, null);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the auction line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param auctionLineItemUpdateModelRequest The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalAuctionLineItemByLineItemIdAsync(String lineItemId, AuctionLineItemUpdateModelRequest auctionLineItemUpdateModelRequest, final ApiCallback<AuctionLineItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2ExternalAuctionLineItemByLineItemIdValidateBeforeCall(lineItemId, auctionLineItemUpdateModelRequest, _callback);
        Type localVarReturnType = new TypeToken<AuctionLineItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
