/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * Data model for response resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SkuSearchResult {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_GLOBAL_BRAND_ID = "globalBrandId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_BRAND_ID)
  private String globalBrandId;

  public static final String SERIALIZED_NAME_GLOBAL_BRAND_NAME = "globalBrandName";
  @SerializedName(SERIALIZED_NAME_GLOBAL_BRAND_NAME)
  private String globalBrandName;

  public static final String SERIALIZED_NAME_RETAILER_BRAND_ID = "retailerBrandId";
  @SerializedName(SERIALIZED_NAME_RETAILER_BRAND_ID)
  private String retailerBrandId;

  public static final String SERIALIZED_NAME_RETAILER_BRAND_NAME = "retailerBrandName";
  @SerializedName(SERIALIZED_NAME_RETAILER_BRAND_NAME)
  private String retailerBrandName;

  public static final String SERIALIZED_NAME_GLOBAL_CATEGORY_ID = "globalCategoryId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CATEGORY_ID)
  private String globalCategoryId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_MODEL_NUMBER = "modelNumber";
  @SerializedName(SERIALIZED_NAME_MODEL_NUMBER)
  private String modelNumber;

  public static final String SERIALIZED_NAME_IS_IN_STOCK = "isInStock";
  @SerializedName(SERIALIZED_NAME_IS_IN_STOCK)
  private Boolean isInStock;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_MPN = "mpn";
  @SerializedName(SERIALIZED_NAME_MPN)
  private String mpn;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public SkuSearchResult() {
  }

  public SkuSearchResult name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The product name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SkuSearchResult categoryId(String categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * The cateogry Id
   * @return categoryId
  **/
  @javax.annotation.Nullable

  public String getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public SkuSearchResult category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * The full retailer category taken from the retailers catalog
   * @return category
  **/
  @javax.annotation.Nullable

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public SkuSearchResult globalBrandId(String globalBrandId) {
    
    this.globalBrandId = globalBrandId;
    return this;
  }

   /**
   * The global brand id associated to the product
   * @return globalBrandId
  **/
  @javax.annotation.Nullable

  public String getGlobalBrandId() {
    return globalBrandId;
  }


  public void setGlobalBrandId(String globalBrandId) {
    this.globalBrandId = globalBrandId;
  }


  public SkuSearchResult globalBrandName(String globalBrandName) {
    
    this.globalBrandName = globalBrandName;
    return this;
  }

   /**
   * The name of the global brand
   * @return globalBrandName
  **/
  @javax.annotation.Nullable

  public String getGlobalBrandName() {
    return globalBrandName;
  }


  public void setGlobalBrandName(String globalBrandName) {
    this.globalBrandName = globalBrandName;
  }


  public SkuSearchResult retailerBrandId(String retailerBrandId) {
    
    this.retailerBrandId = retailerBrandId;
    return this;
  }

   /**
   * The retailer brand id associated to the product
   * @return retailerBrandId
  **/
  @javax.annotation.Nullable

  public String getRetailerBrandId() {
    return retailerBrandId;
  }


  public void setRetailerBrandId(String retailerBrandId) {
    this.retailerBrandId = retailerBrandId;
  }


  public SkuSearchResult retailerBrandName(String retailerBrandName) {
    
    this.retailerBrandName = retailerBrandName;
    return this;
  }

   /**
   * The name of the retailer brand
   * @return retailerBrandName
  **/
  @javax.annotation.Nullable

  public String getRetailerBrandName() {
    return retailerBrandName;
  }


  public void setRetailerBrandName(String retailerBrandName) {
    this.retailerBrandName = retailerBrandName;
  }


  public SkuSearchResult globalCategoryId(String globalCategoryId) {
    
    this.globalCategoryId = globalCategoryId;
    return this;
  }

   /**
   * the Global Category Id
   * @return globalCategoryId
  **/
  @javax.annotation.Nullable

  public String getGlobalCategoryId() {
    return globalCategoryId;
  }


  public void setGlobalCategoryId(String globalCategoryId) {
    this.globalCategoryId = globalCategoryId;
  }


  public SkuSearchResult price(Double price) {
    
    this.price = price;
    return this;
  }

   /**
   * The product price pulled from the retailer&#39;s catalog
   * @return price
  **/
  @javax.annotation.Nullable

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    this.price = price;
  }


  public SkuSearchResult modelNumber(String modelNumber) {
    
    this.modelNumber = modelNumber;
    return this;
  }

   /**
   * The model number for the product
   * @return modelNumber
  **/
  @javax.annotation.Nullable

  public String getModelNumber() {
    return modelNumber;
  }


  public void setModelNumber(String modelNumber) {
    this.modelNumber = modelNumber;
  }


  public SkuSearchResult isInStock(Boolean isInStock) {
    
    this.isInStock = isInStock;
    return this;
  }

   /**
   * Indicates if the retailer product is in stock
   * @return isInStock
  **/
  @javax.annotation.Nullable

  public Boolean getIsInStock() {
    return isInStock;
  }


  public void setIsInStock(Boolean isInStock) {
    this.isInStock = isInStock;
  }


  public SkuSearchResult gtin(String gtin) {
    
    this.gtin = gtin;
    return this;
  }

   /**
   * A GTIN identifier for the product if available.  TIt covers variations such as EANs and UPCs
   * @return gtin
  **/
  @javax.annotation.Nullable

  public String getGtin() {
    return gtin;
  }


  public void setGtin(String gtin) {
    this.gtin = gtin;
  }


  public SkuSearchResult mpn(String mpn) {
    
    this.mpn = mpn;
    return this;
  }

   /**
   * The MPN identifier for the product if available
   * @return mpn
  **/
  @javax.annotation.Nullable

  public String getMpn() {
    return mpn;
  }


  public void setMpn(String mpn) {
    this.mpn = mpn;
  }


  public SkuSearchResult imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * An http image resource provided by the retailer catalog
   * @return imageUrl
  **/
  @javax.annotation.Nullable

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public SkuSearchResult updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The last time this product was updated in the Retail Media Catalog.  The date value is represented as an UTC ISO8601 string
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkuSearchResult skuSearchResult = (SkuSearchResult) o;
    return Objects.equals(this.name, skuSearchResult.name) &&
        Objects.equals(this.categoryId, skuSearchResult.categoryId) &&
        Objects.equals(this.category, skuSearchResult.category) &&
        Objects.equals(this.globalBrandId, skuSearchResult.globalBrandId) &&
        Objects.equals(this.globalBrandName, skuSearchResult.globalBrandName) &&
        Objects.equals(this.retailerBrandId, skuSearchResult.retailerBrandId) &&
        Objects.equals(this.retailerBrandName, skuSearchResult.retailerBrandName) &&
        Objects.equals(this.globalCategoryId, skuSearchResult.globalCategoryId) &&
        Objects.equals(this.price, skuSearchResult.price) &&
        Objects.equals(this.modelNumber, skuSearchResult.modelNumber) &&
        Objects.equals(this.isInStock, skuSearchResult.isInStock) &&
        Objects.equals(this.gtin, skuSearchResult.gtin) &&
        Objects.equals(this.mpn, skuSearchResult.mpn) &&
        Objects.equals(this.imageUrl, skuSearchResult.imageUrl) &&
        Objects.equals(this.updatedAt, skuSearchResult.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, categoryId, category, globalBrandId, globalBrandName, retailerBrandId, retailerBrandName, globalCategoryId, price, modelNumber, isInStock, gtin, mpn, imageUrl, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkuSearchResult {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    globalBrandId: ").append(toIndentedString(globalBrandId)).append("\n");
    sb.append("    globalBrandName: ").append(toIndentedString(globalBrandName)).append("\n");
    sb.append("    retailerBrandId: ").append(toIndentedString(retailerBrandId)).append("\n");
    sb.append("    retailerBrandName: ").append(toIndentedString(retailerBrandName)).append("\n");
    sb.append("    globalCategoryId: ").append(toIndentedString(globalCategoryId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    modelNumber: ").append(toIndentedString(modelNumber)).append("\n");
    sb.append("    isInStock: ").append(toIndentedString(isInStock)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    mpn: ").append(toIndentedString(mpn)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("categoryId");
    openapiFields.add("category");
    openapiFields.add("globalBrandId");
    openapiFields.add("globalBrandName");
    openapiFields.add("retailerBrandId");
    openapiFields.add("retailerBrandName");
    openapiFields.add("globalCategoryId");
    openapiFields.add("price");
    openapiFields.add("modelNumber");
    openapiFields.add("isInStock");
    openapiFields.add("gtin");
    openapiFields.add("mpn");
    openapiFields.add("imageUrl");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SkuSearchResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SkuSearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkuSearchResult is not found in the empty JSON string", SkuSearchResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SkuSearchResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkuSearchResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("globalBrandId") != null && !jsonObj.get("globalBrandId").isJsonNull()) && !jsonObj.get("globalBrandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalBrandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalBrandId").toString()));
      }
      if ((jsonObj.get("globalBrandName") != null && !jsonObj.get("globalBrandName").isJsonNull()) && !jsonObj.get("globalBrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalBrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalBrandName").toString()));
      }
      if ((jsonObj.get("retailerBrandId") != null && !jsonObj.get("retailerBrandId").isJsonNull()) && !jsonObj.get("retailerBrandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailerBrandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retailerBrandId").toString()));
      }
      if ((jsonObj.get("retailerBrandName") != null && !jsonObj.get("retailerBrandName").isJsonNull()) && !jsonObj.get("retailerBrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailerBrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retailerBrandName").toString()));
      }
      if ((jsonObj.get("globalCategoryId") != null && !jsonObj.get("globalCategoryId").isJsonNull()) && !jsonObj.get("globalCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalCategoryId").toString()));
      }
      if ((jsonObj.get("modelNumber") != null && !jsonObj.get("modelNumber").isJsonNull()) && !jsonObj.get("modelNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelNumber").toString()));
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      if ((jsonObj.get("mpn") != null && !jsonObj.get("mpn").isJsonNull()) && !jsonObj.get("mpn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mpn").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkuSearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkuSearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkuSearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkuSearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SkuSearchResult>() {
           @Override
           public void write(JsonWriter out, SkuSearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkuSearchResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SkuSearchResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SkuSearchResult
  * @throws IOException if the JSON string is invalid with respect to SkuSearchResult
  */
  public static SkuSearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkuSearchResult.class);
  }

 /**
  * Convert an instance of SkuSearchResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

