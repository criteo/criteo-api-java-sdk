/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * Represents the min bid for a pageType and creative combination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DisplayAuctionMinBidResult {
  public static final String SERIALIZED_NAME_CREATIVE_ID = "creativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private String creativeId;

  public static final String SERIALIZED_NAME_MIN_BID = "minBid";
  @SerializedName(SERIALIZED_NAME_MIN_BID)
  private Double minBid;

  /**
   * Page type for the creative to display on
   */
  @JsonAdapter(PageTypeEnum.Adapter.class)
  public enum PageTypeEnum {
    UNKNOWN("unknown"),
    
    SEARCH("search"),
    
    HOME("home"),
    
    CHECKOUT("checkout"),
    
    CATEGORY("category"),
    
    PRODUCTDETAIL("productDetail"),
    
    CONFIRMATION("confirmation"),
    
    MERCHANDISING("merchandising"),
    
    DEALS("deals"),
    
    FAVORITES("favorites"),
    
    SEARCHBAR("searchBar"),
    
    CATEGORYMENU("categoryMenu");

    private String value;

    PageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageTypeEnum fromValue(String value) {
      for (PageTypeEnum b : PageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAGE_TYPE = "pageType";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPE)
  private PageTypeEnum pageType;

  public DisplayAuctionMinBidResult() {
  }

  public DisplayAuctionMinBidResult creativeId(String creativeId) {
    
    this.creativeId = creativeId;
    return this;
  }

   /**
   * The creativeId for the creative
   * @return creativeId
  **/
  @javax.annotation.Nullable

  public String getCreativeId() {
    return creativeId;
  }


  public void setCreativeId(String creativeId) {
    this.creativeId = creativeId;
  }


  public DisplayAuctionMinBidResult minBid(Double minBid) {
    
    this.minBid = minBid;
    return this;
  }

   /**
   * The minimum bid for the combination of page type, creative and categories
   * @return minBid
  **/
  @javax.annotation.Nullable

  public Double getMinBid() {
    return minBid;
  }


  public void setMinBid(Double minBid) {
    this.minBid = minBid;
  }


  public DisplayAuctionMinBidResult pageType(PageTypeEnum pageType) {
    
    this.pageType = pageType;
    return this;
  }

   /**
   * Page type for the creative to display on
   * @return pageType
  **/
  @javax.annotation.Nullable

  public PageTypeEnum getPageType() {
    return pageType;
  }


  public void setPageType(PageTypeEnum pageType) {
    this.pageType = pageType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisplayAuctionMinBidResult displayAuctionMinBidResult = (DisplayAuctionMinBidResult) o;
    return Objects.equals(this.creativeId, displayAuctionMinBidResult.creativeId) &&
        Objects.equals(this.minBid, displayAuctionMinBidResult.minBid) &&
        Objects.equals(this.pageType, displayAuctionMinBidResult.pageType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(creativeId, minBid, pageType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisplayAuctionMinBidResult {\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    minBid: ").append(toIndentedString(minBid)).append("\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creativeId");
    openapiFields.add("minBid");
    openapiFields.add("pageType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DisplayAuctionMinBidResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DisplayAuctionMinBidResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisplayAuctionMinBidResult is not found in the empty JSON string", DisplayAuctionMinBidResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DisplayAuctionMinBidResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisplayAuctionMinBidResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("creativeId") != null && !jsonObj.get("creativeId").isJsonNull()) && !jsonObj.get("creativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeId").toString()));
      }
      if ((jsonObj.get("pageType") != null && !jsonObj.get("pageType").isJsonNull()) && !jsonObj.get("pageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisplayAuctionMinBidResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisplayAuctionMinBidResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisplayAuctionMinBidResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisplayAuctionMinBidResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DisplayAuctionMinBidResult>() {
           @Override
           public void write(JsonWriter out, DisplayAuctionMinBidResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisplayAuctionMinBidResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DisplayAuctionMinBidResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DisplayAuctionMinBidResult
  * @throws IOException if the JSON string is invalid with respect to DisplayAuctionMinBidResult
  */
  public static DisplayAuctionMinBidResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisplayAuctionMinBidResult.class);
  }

 /**
  * Convert an instance of DisplayAuctionMinBidResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

