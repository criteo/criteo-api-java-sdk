/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.retailmedia.preview.model.FlightSchedule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * A request to update a Sponsored Products Line Item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SponsoredProductsLineItemUpdateRequestModel {
  /**
   * The bidding strategy for the line item.
   */
  @JsonAdapter(BidStrategyEnum.Adapter.class)
  public enum BidStrategyEnum {
    CONVERSION("conversion"),
    
    CLICKS("clicks"),
    
    REVENUE("revenue");

    private String value;

    BidStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BidStrategyEnum fromValue(String value) {
      for (BidStrategyEnum b : BidStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BidStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BidStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BidStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BidStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BID_STRATEGY = "bidStrategy";
  @SerializedName(SERIALIZED_NAME_BID_STRATEGY)
  private BidStrategyEnum bidStrategy = BidStrategyEnum.CONVERSION;

  public static final String SERIALIZED_NAME_BUDGET = "budget";
  @SerializedName(SERIALIZED_NAME_BUDGET)
  private Double budget;

  public static final String SERIALIZED_NAME_DAILY_PACING = "dailyPacing";
  @SerializedName(SERIALIZED_NAME_DAILY_PACING)
  private Double dailyPacing;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FLIGHT_SCHEDULE = "flightSchedule";
  @SerializedName(SERIALIZED_NAME_FLIGHT_SCHEDULE)
  private FlightSchedule flightSchedule;

  public static final String SERIALIZED_NAME_IS_AUTO_DAILY_PACING = "isAutoDailyPacing";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_DAILY_PACING)
  private Boolean isAutoDailyPacing;

  public static final String SERIALIZED_NAME_MAX_BID = "maxBid";
  @SerializedName(SERIALIZED_NAME_MAX_BID)
  private Double maxBid;

  public static final String SERIALIZED_NAME_MONTHLY_PACING = "monthlyPacing";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PACING)
  private Double monthlyPacing;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The optimization strategy for the line item.
   */
  @JsonAdapter(OptimizationStrategyEnum.Adapter.class)
  public enum OptimizationStrategyEnum {
    MANUAL("manual"),
    
    AUTOMATED("automated");

    private String value;

    OptimizationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptimizationStrategyEnum fromValue(String value) {
      for (OptimizationStrategyEnum b : OptimizationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptimizationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptimizationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptimizationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptimizationStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPTIMIZATION_STRATEGY = "optimizationStrategy";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_STRATEGY)
  private OptimizationStrategyEnum optimizationStrategy = OptimizationStrategyEnum.MANUAL;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * The current status of the line item.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    PAUSED("paused"),
    
    DRAFT("draft");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_BID = "targetBid";
  @SerializedName(SERIALIZED_NAME_TARGET_BID)
  private Double targetBid;

  public SponsoredProductsLineItemUpdateRequestModel() {
  }

  public SponsoredProductsLineItemUpdateRequestModel bidStrategy(BidStrategyEnum bidStrategy) {
    
    this.bidStrategy = bidStrategy;
    return this;
  }

   /**
   * The bidding strategy for the line item.
   * @return bidStrategy
  **/
  @javax.annotation.Nullable

  public BidStrategyEnum getBidStrategy() {
    return bidStrategy;
  }


  public void setBidStrategy(BidStrategyEnum bidStrategy) {
    this.bidStrategy = bidStrategy;
  }


  public SponsoredProductsLineItemUpdateRequestModel budget(Double budget) {
    
    this.budget = budget;
    return this;
  }

   /**
   * The total budget allocated for this line item.
   * @return budget
  **/
  @javax.annotation.Nullable

  public Double getBudget() {
    return budget;
  }


  public void setBudget(Double budget) {
    this.budget = budget;
  }


  public SponsoredProductsLineItemUpdateRequestModel dailyPacing(Double dailyPacing) {
    
    this.dailyPacing = dailyPacing;
    return this;
  }

   /**
   * The daily pacing amount for the line item.
   * @return dailyPacing
  **/
  @javax.annotation.Nullable

  public Double getDailyPacing() {
    return dailyPacing;
  }


  public void setDailyPacing(Double dailyPacing) {
    this.dailyPacing = dailyPacing;
  }


  public SponsoredProductsLineItemUpdateRequestModel endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The date and time when the line item stops running.
   * @return endDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public SponsoredProductsLineItemUpdateRequestModel flightSchedule(FlightSchedule flightSchedule) {
    
    this.flightSchedule = flightSchedule;
    return this;
  }

   /**
   * Get flightSchedule
   * @return flightSchedule
  **/
  @javax.annotation.Nullable

  public FlightSchedule getFlightSchedule() {
    return flightSchedule;
  }


  public void setFlightSchedule(FlightSchedule flightSchedule) {
    this.flightSchedule = flightSchedule;
  }


  public SponsoredProductsLineItemUpdateRequestModel isAutoDailyPacing(Boolean isAutoDailyPacing) {
    
    this.isAutoDailyPacing = isAutoDailyPacing;
    return this;
  }

   /**
   * True if daily pacing is automatic, false if manual.
   * @return isAutoDailyPacing
  **/
  @javax.annotation.Nonnull

  public Boolean getIsAutoDailyPacing() {
    return isAutoDailyPacing;
  }


  public void setIsAutoDailyPacing(Boolean isAutoDailyPacing) {
    this.isAutoDailyPacing = isAutoDailyPacing;
  }


  public SponsoredProductsLineItemUpdateRequestModel maxBid(Double maxBid) {
    
    this.maxBid = maxBid;
    return this;
  }

   /**
   * The maximum bid amount for the line item.
   * @return maxBid
  **/
  @javax.annotation.Nullable

  public Double getMaxBid() {
    return maxBid;
  }


  public void setMaxBid(Double maxBid) {
    this.maxBid = maxBid;
  }


  public SponsoredProductsLineItemUpdateRequestModel monthlyPacing(Double monthlyPacing) {
    
    this.monthlyPacing = monthlyPacing;
    return this;
  }

   /**
   * The monthly pacing amount for the line item.
   * @return monthlyPacing
  **/
  @javax.annotation.Nullable

  public Double getMonthlyPacing() {
    return monthlyPacing;
  }


  public void setMonthlyPacing(Double monthlyPacing) {
    this.monthlyPacing = monthlyPacing;
  }


  public SponsoredProductsLineItemUpdateRequestModel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this line item.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SponsoredProductsLineItemUpdateRequestModel optimizationStrategy(OptimizationStrategyEnum optimizationStrategy) {
    
    this.optimizationStrategy = optimizationStrategy;
    return this;
  }

   /**
   * The optimization strategy for the line item.
   * @return optimizationStrategy
  **/
  @javax.annotation.Nullable

  public OptimizationStrategyEnum getOptimizationStrategy() {
    return optimizationStrategy;
  }


  public void setOptimizationStrategy(OptimizationStrategyEnum optimizationStrategy) {
    this.optimizationStrategy = optimizationStrategy;
  }


  public SponsoredProductsLineItemUpdateRequestModel startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The date and time when the line item starts running.
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public SponsoredProductsLineItemUpdateRequestModel status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the line item.
   * @return status
  **/
  @javax.annotation.Nonnull

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public SponsoredProductsLineItemUpdateRequestModel targetBid(Double targetBid) {
    
    this.targetBid = targetBid;
    return this;
  }

   /**
   * The target bid amount for the line item.
   * @return targetBid
  **/
  @javax.annotation.Nullable

  public Double getTargetBid() {
    return targetBid;
  }


  public void setTargetBid(Double targetBid) {
    this.targetBid = targetBid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SponsoredProductsLineItemUpdateRequestModel sponsoredProductsLineItemUpdateRequestModel = (SponsoredProductsLineItemUpdateRequestModel) o;
    return Objects.equals(this.bidStrategy, sponsoredProductsLineItemUpdateRequestModel.bidStrategy) &&
        Objects.equals(this.budget, sponsoredProductsLineItemUpdateRequestModel.budget) &&
        Objects.equals(this.dailyPacing, sponsoredProductsLineItemUpdateRequestModel.dailyPacing) &&
        Objects.equals(this.endDate, sponsoredProductsLineItemUpdateRequestModel.endDate) &&
        Objects.equals(this.flightSchedule, sponsoredProductsLineItemUpdateRequestModel.flightSchedule) &&
        Objects.equals(this.isAutoDailyPacing, sponsoredProductsLineItemUpdateRequestModel.isAutoDailyPacing) &&
        Objects.equals(this.maxBid, sponsoredProductsLineItemUpdateRequestModel.maxBid) &&
        Objects.equals(this.monthlyPacing, sponsoredProductsLineItemUpdateRequestModel.monthlyPacing) &&
        Objects.equals(this.name, sponsoredProductsLineItemUpdateRequestModel.name) &&
        Objects.equals(this.optimizationStrategy, sponsoredProductsLineItemUpdateRequestModel.optimizationStrategy) &&
        Objects.equals(this.startDate, sponsoredProductsLineItemUpdateRequestModel.startDate) &&
        Objects.equals(this.status, sponsoredProductsLineItemUpdateRequestModel.status) &&
        Objects.equals(this.targetBid, sponsoredProductsLineItemUpdateRequestModel.targetBid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bidStrategy, budget, dailyPacing, endDate, flightSchedule, isAutoDailyPacing, maxBid, monthlyPacing, name, optimizationStrategy, startDate, status, targetBid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SponsoredProductsLineItemUpdateRequestModel {\n");
    sb.append("    bidStrategy: ").append(toIndentedString(bidStrategy)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    dailyPacing: ").append(toIndentedString(dailyPacing)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    flightSchedule: ").append(toIndentedString(flightSchedule)).append("\n");
    sb.append("    isAutoDailyPacing: ").append(toIndentedString(isAutoDailyPacing)).append("\n");
    sb.append("    maxBid: ").append(toIndentedString(maxBid)).append("\n");
    sb.append("    monthlyPacing: ").append(toIndentedString(monthlyPacing)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optimizationStrategy: ").append(toIndentedString(optimizationStrategy)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetBid: ").append(toIndentedString(targetBid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bidStrategy");
    openapiFields.add("budget");
    openapiFields.add("dailyPacing");
    openapiFields.add("endDate");
    openapiFields.add("flightSchedule");
    openapiFields.add("isAutoDailyPacing");
    openapiFields.add("maxBid");
    openapiFields.add("monthlyPacing");
    openapiFields.add("name");
    openapiFields.add("optimizationStrategy");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("targetBid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isAutoDailyPacing");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SponsoredProductsLineItemUpdateRequestModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SponsoredProductsLineItemUpdateRequestModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SponsoredProductsLineItemUpdateRequestModel is not found in the empty JSON string", SponsoredProductsLineItemUpdateRequestModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SponsoredProductsLineItemUpdateRequestModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SponsoredProductsLineItemUpdateRequestModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SponsoredProductsLineItemUpdateRequestModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("bidStrategy") != null && !jsonObj.get("bidStrategy").isJsonNull()) && !jsonObj.get("bidStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidStrategy").toString()));
      }
      // validate the optional field `flightSchedule`
      if (jsonObj.get("flightSchedule") != null && !jsonObj.get("flightSchedule").isJsonNull()) {
        FlightSchedule.validateJsonObject(jsonObj.getAsJsonObject("flightSchedule"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("optimizationStrategy") != null && !jsonObj.get("optimizationStrategy").isJsonNull()) && !jsonObj.get("optimizationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizationStrategy").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SponsoredProductsLineItemUpdateRequestModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SponsoredProductsLineItemUpdateRequestModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SponsoredProductsLineItemUpdateRequestModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SponsoredProductsLineItemUpdateRequestModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SponsoredProductsLineItemUpdateRequestModel>() {
           @Override
           public void write(JsonWriter out, SponsoredProductsLineItemUpdateRequestModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SponsoredProductsLineItemUpdateRequestModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SponsoredProductsLineItemUpdateRequestModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SponsoredProductsLineItemUpdateRequestModel
  * @throws IOException if the JSON string is invalid with respect to SponsoredProductsLineItemUpdateRequestModel
  */
  public static SponsoredProductsLineItemUpdateRequestModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SponsoredProductsLineItemUpdateRequestModel.class);
  }

 /**
  * Convert an instance of SponsoredProductsLineItemUpdateRequestModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

