/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.api;

import com.criteo.api.retailmedia.preview.ApiCallback;
import com.criteo.api.retailmedia.preview.ApiClient;
import com.criteo.api.retailmedia.preview.ApiException;
import com.criteo.api.retailmedia.preview.ApiResponse;
import com.criteo.api.retailmedia.preview.Configuration;
import com.criteo.api.retailmedia.preview.Pair;
import com.criteo.api.retailmedia.preview.ProgressRequestBody;
import com.criteo.api.retailmedia.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.preview.model.EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata;
import com.criteo.api.retailmedia.preview.model.Outcome;
import com.criteo.api.retailmedia.preview.model.ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputAccountFeesSearchRequest;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputAccountFeesUpdateRequest;
import com.criteo.api.retailmedia.preview.model.ValueResourceOutcomeAccountFeesUpdateResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getApiExternalV1AccountPrivateMarketChildAccountsByAccountId
     * @param accountId Account Id (required)
     * @param limit The number of accounts to be returned. The default is 25. (optional, default to 25)
     * @param offset The (zero-based) offset into the collection of accounts. The default is 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdCall(String accountId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/account-management/accounts/{accountId}/private-market-child-accounts"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdValidateBeforeCall(String accountId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiExternalV1AccountPrivateMarketChildAccountsByAccountId(Async)");
        }

        return getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdCall(accountId, limit, offset, _callback);

    }

    /**
     * 
     * Gets page of private market child accounts that are associated with the given account
     * @param accountId Account Id (required)
     * @param limit The number of accounts to be returned. The default is 25. (optional, default to 25)
     * @param offset The (zero-based) offset into the collection of accounts. The default is 0. (optional, default to 0)
     * @return EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata getApiExternalV1AccountPrivateMarketChildAccountsByAccountId(String accountId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata> localVarResp = getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdWithHttpInfo(accountId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of private market child accounts that are associated with the given account
     * @param accountId Account Id (required)
     * @param limit The number of accounts to be returned. The default is 25. (optional, default to 25)
     * @param offset The (zero-based) offset into the collection of accounts. The default is 0. (optional, default to 0)
     * @return ApiResponse&lt;EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata> getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdWithHttpInfo(String accountId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdValidateBeforeCall(accountId, limit, offset, null);
        Type localVarReturnType = new TypeToken<EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of private market child accounts that are associated with the given account
     * @param accountId Account Id (required)
     * @param limit The number of accounts to be returned. The default is 25. (optional, default to 25)
     * @param offset The (zero-based) offset into the collection of accounts. The default is 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdAsync(String accountId, Integer limit, Integer offset, final ApiCallback<EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiExternalV1AccountPrivateMarketChildAccountsByAccountIdValidateBeforeCall(accountId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceCollectionOutcomeOfRetailMediaChildAccountAndMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewRetailMediaAccountsFeesSearchPost
     * @param limit used for paging, number of results returned per request, Maximum of 500 (optional, default to 50)
     * @param offset used for paging, number of records to skip (optional, default to 0)
     * @param valueResourceInputAccountFeesSearchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaAccountsFeesSearchPostCall(Integer limit, Integer offset, ValueResourceInputAccountFeesSearchRequest valueResourceInputAccountFeesSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputAccountFeesSearchRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/fees/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaAccountsFeesSearchPostValidateBeforeCall(Integer limit, Integer offset, ValueResourceInputAccountFeesSearchRequest valueResourceInputAccountFeesSearchRequest, final ApiCallback _callback) throws ApiException {
        return previewRetailMediaAccountsFeesSearchPostCall(limit, offset, valueResourceInputAccountFeesSearchRequest, _callback);

    }

    /**
     * 
     * Get fees for provided accounts
     * @param limit used for paging, number of results returned per request, Maximum of 500 (optional, default to 50)
     * @param offset used for paging, number of records to skip (optional, default to 0)
     * @param valueResourceInputAccountFeesSearchRequest  (optional)
     * @return ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata previewRetailMediaAccountsFeesSearchPost(Integer limit, Integer offset, ValueResourceInputAccountFeesSearchRequest valueResourceInputAccountFeesSearchRequest) throws ApiException {
        ApiResponse<ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata> localVarResp = previewRetailMediaAccountsFeesSearchPostWithHttpInfo(limit, offset, valueResourceInputAccountFeesSearchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get fees for provided accounts
     * @param limit used for paging, number of results returned per request, Maximum of 500 (optional, default to 50)
     * @param offset used for paging, number of records to skip (optional, default to 0)
     * @param valueResourceInputAccountFeesSearchRequest  (optional)
     * @return ApiResponse&lt;ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata> previewRetailMediaAccountsFeesSearchPostWithHttpInfo(Integer limit, Integer offset, ValueResourceInputAccountFeesSearchRequest valueResourceInputAccountFeesSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaAccountsFeesSearchPostValidateBeforeCall(limit, offset, valueResourceInputAccountFeesSearchRequest, null);
        Type localVarReturnType = new TypeToken<ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get fees for provided accounts
     * @param limit used for paging, number of results returned per request, Maximum of 500 (optional, default to 50)
     * @param offset used for paging, number of records to skip (optional, default to 0)
     * @param valueResourceInputAccountFeesSearchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaAccountsFeesSearchPostAsync(Integer limit, Integer offset, ValueResourceInputAccountFeesSearchRequest valueResourceInputAccountFeesSearchRequest, final ApiCallback<ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaAccountsFeesSearchPostValidateBeforeCall(limit, offset, valueResourceInputAccountFeesSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceCollectionOutcomePrivateMarketAccountFeesAndMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewRetailMediaAccountsFeesUpdatePost
     * @param valueResourceInputAccountFeesUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaAccountsFeesUpdatePostCall(ValueResourceInputAccountFeesUpdateRequest valueResourceInputAccountFeesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputAccountFeesUpdateRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/fees/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaAccountsFeesUpdatePostValidateBeforeCall(ValueResourceInputAccountFeesUpdateRequest valueResourceInputAccountFeesUpdateRequest, final ApiCallback _callback) throws ApiException {
        return previewRetailMediaAccountsFeesUpdatePostCall(valueResourceInputAccountFeesUpdateRequest, _callback);

    }

    /**
     * 
     * Set fees for provided accounts
     * @param valueResourceInputAccountFeesUpdateRequest  (optional)
     * @return ValueResourceOutcomeAccountFeesUpdateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeAccountFeesUpdateResult previewRetailMediaAccountsFeesUpdatePost(ValueResourceInputAccountFeesUpdateRequest valueResourceInputAccountFeesUpdateRequest) throws ApiException {
        ApiResponse<ValueResourceOutcomeAccountFeesUpdateResult> localVarResp = previewRetailMediaAccountsFeesUpdatePostWithHttpInfo(valueResourceInputAccountFeesUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Set fees for provided accounts
     * @param valueResourceInputAccountFeesUpdateRequest  (optional)
     * @return ApiResponse&lt;ValueResourceOutcomeAccountFeesUpdateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeAccountFeesUpdateResult> previewRetailMediaAccountsFeesUpdatePostWithHttpInfo(ValueResourceInputAccountFeesUpdateRequest valueResourceInputAccountFeesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaAccountsFeesUpdatePostValidateBeforeCall(valueResourceInputAccountFeesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeAccountFeesUpdateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set fees for provided accounts
     * @param valueResourceInputAccountFeesUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaAccountsFeesUpdatePostAsync(ValueResourceInputAccountFeesUpdateRequest valueResourceInputAccountFeesUpdateRequest, final ApiCallback<ValueResourceOutcomeAccountFeesUpdateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaAccountsFeesUpdatePostValidateBeforeCall(valueResourceInputAccountFeesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeAccountFeesUpdateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
