/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.retailmedia.preview.model.PageTypeCombination;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * Information about the availability of a specific campaign type and buy type combination, and page types and environments supported for that combination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CampaignAvailability {
  /**
   * The buy type this object represents availability for
   */
  @JsonAdapter(BuyTypeEnum.Adapter.class)
  public enum BuyTypeEnum {
    UNKNOWN("unknown"),
    
    AUCTION("auction"),
    
    PREFERREDDEALS("preferredDeals"),
    
    SPONSORSHIP("sponsorship"),
    
    OFFSITE("offsite");

    private String value;

    BuyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BuyTypeEnum fromValue(String value) {
      for (BuyTypeEnum b : BuyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BuyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BuyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BuyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BuyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BUY_TYPE = "buyType";
  @SerializedName(SERIALIZED_NAME_BUY_TYPE)
  private BuyTypeEnum buyType;

  /**
   * The type of campaign this object represents availability for
   */
  @JsonAdapter(CampaignTypeEnum.Adapter.class)
  public enum CampaignTypeEnum {
    UNKNOWN("unknown"),
    
    SPONSOREDPRODUCTS("sponsoredProducts"),
    
    ONSITEDISPLAY("onsiteDisplay"),
    
    OFFSITE("offsite");

    private String value;

    CampaignTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CampaignTypeEnum fromValue(String value) {
      for (CampaignTypeEnum b : CampaignTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CampaignTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CampaignTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CampaignTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CampaignTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CAMPAIGN_TYPE = "campaignType";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_TYPE)
  private CampaignTypeEnum campaignType;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "isAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_VALID_COMBINATIONS = "validCombinations";
  @SerializedName(SERIALIZED_NAME_VALID_COMBINATIONS)
  private List<PageTypeCombination> validCombinations = null;

  public CampaignAvailability() {
  }

  public CampaignAvailability buyType(BuyTypeEnum buyType) {
    
    this.buyType = buyType;
    return this;
  }

   /**
   * The buy type this object represents availability for
   * @return buyType
  **/
  @javax.annotation.Nullable

  public BuyTypeEnum getBuyType() {
    return buyType;
  }


  public void setBuyType(BuyTypeEnum buyType) {
    this.buyType = buyType;
  }


  public CampaignAvailability campaignType(CampaignTypeEnum campaignType) {
    
    this.campaignType = campaignType;
    return this;
  }

   /**
   * The type of campaign this object represents availability for
   * @return campaignType
  **/
  @javax.annotation.Nullable

  public CampaignTypeEnum getCampaignType() {
    return campaignType;
  }


  public void setCampaignType(CampaignTypeEnum campaignType) {
    this.campaignType = campaignType;
  }


  public CampaignAvailability isAvailable(Boolean isAvailable) {
    
    this.isAvailable = isAvailable;
    return this;
  }

   /**
   * Indicates whether the campaign type and buy type combination is available for the retailer
   * @return isAvailable
  **/
  @javax.annotation.Nullable

  public Boolean getIsAvailable() {
    return isAvailable;
  }


  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public CampaignAvailability validCombinations(List<PageTypeCombination> validCombinations) {
    
    this.validCombinations = validCombinations;
    return this;
  }

  public CampaignAvailability addValidCombinationsItem(PageTypeCombination validCombinationsItem) {
    if (this.validCombinations == null) {
      this.validCombinations = null;
    }
    this.validCombinations.add(validCombinationsItem);
    return this;
  }

   /**
   * PageType-PageEnvironmentType pairs which are supported for this campaign-buy type combination
   * @return validCombinations
  **/
  @javax.annotation.Nullable

  public List<PageTypeCombination> getValidCombinations() {
    return validCombinations;
  }


  public void setValidCombinations(List<PageTypeCombination> validCombinations) {
    this.validCombinations = validCombinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignAvailability campaignAvailability = (CampaignAvailability) o;
    return Objects.equals(this.buyType, campaignAvailability.buyType) &&
        Objects.equals(this.campaignType, campaignAvailability.campaignType) &&
        Objects.equals(this.isAvailable, campaignAvailability.isAvailable) &&
        Objects.equals(this.validCombinations, campaignAvailability.validCombinations);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyType, campaignType, isAvailable, validCombinations);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignAvailability {\n");
    sb.append("    buyType: ").append(toIndentedString(buyType)).append("\n");
    sb.append("    campaignType: ").append(toIndentedString(campaignType)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    validCombinations: ").append(toIndentedString(validCombinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyType");
    openapiFields.add("campaignType");
    openapiFields.add("isAvailable");
    openapiFields.add("validCombinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CampaignAvailability
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CampaignAvailability.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignAvailability is not found in the empty JSON string", CampaignAvailability.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CampaignAvailability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignAvailability` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("buyType") != null && !jsonObj.get("buyType").isJsonNull()) && !jsonObj.get("buyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyType").toString()));
      }
      if ((jsonObj.get("campaignType") != null && !jsonObj.get("campaignType").isJsonNull()) && !jsonObj.get("campaignType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignType").toString()));
      }
      if (jsonObj.get("validCombinations") != null && !jsonObj.get("validCombinations").isJsonNull()) {
        JsonArray jsonArrayvalidCombinations = jsonObj.getAsJsonArray("validCombinations");
        if (jsonArrayvalidCombinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validCombinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validCombinations` to be an array in the JSON string but got `%s`", jsonObj.get("validCombinations").toString()));
          }

          // validate the optional field `validCombinations` (array)
          for (int i = 0; i < jsonArrayvalidCombinations.size(); i++) {
            PageTypeCombination.validateJsonObject(jsonArrayvalidCombinations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignAvailability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignAvailability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignAvailability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignAvailability.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignAvailability>() {
           @Override
           public void write(JsonWriter out, CampaignAvailability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignAvailability read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignAvailability given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignAvailability
  * @throws IOException if the JSON string is invalid with respect to CampaignAvailability
  */
  public static CampaignAvailability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignAvailability.class);
  }

 /**
  * Convert an instance of CampaignAvailability to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

