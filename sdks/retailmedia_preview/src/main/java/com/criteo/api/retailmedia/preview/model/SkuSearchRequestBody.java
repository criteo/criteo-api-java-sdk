/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * defines the type product Id to search and list of ids to be searched for
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SkuSearchRequestBody {
  /**
   * sets which product id the QueryIds will be compared to
   */
  @JsonAdapter(ProductIdTypeEnum.Adapter.class)
  public enum ProductIdTypeEnum {
    SKUKEY("SkuKey"),
    
    GTIN("Gtin"),
    
    MPN("Mpn"),
    
    MODEL("Model"),
    
    SKUID("SkuId"),
    
    PARENTID("ParentId");

    private String value;

    ProductIdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductIdTypeEnum fromValue(String value) {
      for (ProductIdTypeEnum b : ProductIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductIdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductIdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductIdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductIdTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_ID_TYPE = "productIdType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID_TYPE)
  private ProductIdTypeEnum productIdType;

  public static final String SERIALIZED_NAME_QUERY_IDS = "queryIds";
  @SerializedName(SERIALIZED_NAME_QUERY_IDS)
  private List<String> queryIds = new ArrayList<>();

  public SkuSearchRequestBody() {
  }

  public SkuSearchRequestBody productIdType(ProductIdTypeEnum productIdType) {
    
    this.productIdType = productIdType;
    return this;
  }

   /**
   * sets which product id the QueryIds will be compared to
   * @return productIdType
  **/
  @javax.annotation.Nonnull

  public ProductIdTypeEnum getProductIdType() {
    return productIdType;
  }


  public void setProductIdType(ProductIdTypeEnum productIdType) {
    this.productIdType = productIdType;
  }


  public SkuSearchRequestBody queryIds(List<String> queryIds) {
    
    this.queryIds = queryIds;
    return this;
  }

  public SkuSearchRequestBody addQueryIdsItem(String queryIdsItem) {
    this.queryIds.add(queryIdsItem);
    return this;
  }

   /**
   * list of product ids to search for
   * @return queryIds
  **/
  @javax.annotation.Nonnull

  public List<String> getQueryIds() {
    return queryIds;
  }


  public void setQueryIds(List<String> queryIds) {
    this.queryIds = queryIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkuSearchRequestBody skuSearchRequestBody = (SkuSearchRequestBody) o;
    return Objects.equals(this.productIdType, skuSearchRequestBody.productIdType) &&
        Objects.equals(this.queryIds, skuSearchRequestBody.queryIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productIdType, queryIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkuSearchRequestBody {\n");
    sb.append("    productIdType: ").append(toIndentedString(productIdType)).append("\n");
    sb.append("    queryIds: ").append(toIndentedString(queryIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productIdType");
    openapiFields.add("queryIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("productIdType");
    openapiRequiredFields.add("queryIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SkuSearchRequestBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SkuSearchRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkuSearchRequestBody is not found in the empty JSON string", SkuSearchRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SkuSearchRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkuSearchRequestBody` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SkuSearchRequestBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("productIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productIdType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("queryIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("queryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryIds` to be an array in the JSON string but got `%s`", jsonObj.get("queryIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkuSearchRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkuSearchRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkuSearchRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkuSearchRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<SkuSearchRequestBody>() {
           @Override
           public void write(JsonWriter out, SkuSearchRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkuSearchRequestBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SkuSearchRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SkuSearchRequestBody
  * @throws IOException if the JSON string is invalid with respect to SkuSearchRequestBody
  */
  public static SkuSearchRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkuSearchRequestBody.class);
  }

 /**
  * Convert an instance of SkuSearchRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

