/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The PageType-Environment Tuples for creatives
 */
@ApiModel(description = "The PageType-Environment Tuples for creatives")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PageTypeEnvironment {
  /**
   * Creative PageType
   */
  @JsonAdapter(PageTypeEnum.Adapter.class)
  public enum PageTypeEnum {
    SEARCH("Search"),
    
    HOME("Home"),
    
    BROWSE("Browse"),
    
    CHECKOUT("Checkout"),
    
    CATEGORY("Category"),
    
    PRODUCTDETAIL("ProductDetail"),
    
    CONFIRMATION("Confirmation"),
    
    MERCHANDISING("Merchandising"),
    
    DEALS("Deals");

    private String value;

    PageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageTypeEnum fromValue(String value) {
      for (PageTypeEnum b : PageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAGE_TYPE = "pageType";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPE)
  private PageTypeEnum pageType;

  /**
   * Gets or Sets environments
   */
  @JsonAdapter(EnvironmentsEnum.Adapter.class)
  public enum EnvironmentsEnum {
    WEB("Web"),
    
    MOBILE("Mobile"),
    
    APP("App"),
    
    LOCKOUT("Lockout"),
    
    MIXED("Mixed"),
    
    IOS("iOS"),
    
    ANDROID("Android");

    private String value;

    EnvironmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentsEnum fromValue(String value) {
      for (EnvironmentsEnum b : EnvironmentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENTS = "environments";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENTS)
  private List<EnvironmentsEnum> environments = null;


  public PageTypeEnvironment pageType(PageTypeEnum pageType) {
    
    this.pageType = pageType;
    return this;
  }

   /**
   * Creative PageType
   * @return pageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Creative PageType")

  public PageTypeEnum getPageType() {
    return pageType;
  }


  public void setPageType(PageTypeEnum pageType) {
    this.pageType = pageType;
  }


  public PageTypeEnvironment environments(List<EnvironmentsEnum> environments) {
    
    this.environments = environments;
    return this;
  }

  public PageTypeEnvironment addEnvironmentsItem(EnvironmentsEnum environmentsItem) {
    if (this.environments == null) {
      this.environments = new ArrayList<>();
    }
    this.environments.add(environmentsItem);
    return this;
  }

   /**
   * List of environments per PageType
   * @return environments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of environments per PageType")

  public List<EnvironmentsEnum> getEnvironments() {
    return environments;
  }


  public void setEnvironments(List<EnvironmentsEnum> environments) {
    this.environments = environments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTypeEnvironment pageTypeEnvironment = (PageTypeEnvironment) o;
    return Objects.equals(this.pageType, pageTypeEnvironment.pageType) &&
        Objects.equals(this.environments, pageTypeEnvironment.environments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageType, environments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTypeEnvironment {\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

