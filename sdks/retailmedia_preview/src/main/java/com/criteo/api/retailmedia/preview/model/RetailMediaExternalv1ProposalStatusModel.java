/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The proposal status includes the state of the proposal, the status of the booking and approval, as well as any comments explaining why it might have been rejected.
 */
@ApiModel(description = "The proposal status includes the state of the proposal, the status of the booking and approval, as well as any comments explaining why it might have been rejected.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RetailMediaExternalv1ProposalStatusModel {
  /**
   * Gets or Sets negotiationState
   */
  @JsonAdapter(NegotiationStateEnum.Adapter.class)
  public enum NegotiationStateEnum {
    INVALID("Invalid"),
    
    MODIFIED("Modified"),
    
    SUBMITTED("Submitted"),
    
    REVIEWED("Reviewed"),
    
    APPROVED("Approved");

    private String value;

    NegotiationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NegotiationStateEnum fromValue(String value) {
      for (NegotiationStateEnum b : NegotiationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NegotiationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NegotiationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NegotiationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NegotiationStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NEGOTIATION_STATE = "negotiationState";
  @SerializedName(SERIALIZED_NAME_NEGOTIATION_STATE)
  private NegotiationStateEnum negotiationState;

  /**
   * Gets or Sets bookingStatus
   */
  @JsonAdapter(BookingStatusEnum.Adapter.class)
  public enum BookingStatusEnum {
    NOTSUBMITTED("NotSubmitted"),
    
    SUBMITTED("Submitted"),
    
    REJECTED("Rejected"),
    
    APPROVED("Approved");

    private String value;

    BookingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BookingStatusEnum fromValue(String value) {
      for (BookingStatusEnum b : BookingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BookingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BookingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BookingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BookingStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BOOKING_STATUS = "bookingStatus";
  @SerializedName(SERIALIZED_NAME_BOOKING_STATUS)
  private BookingStatusEnum bookingStatus;

  /**
   * Gets or Sets runnableStatus
   */
  @JsonAdapter(RunnableStatusEnum.Adapter.class)
  public enum RunnableStatusEnum {
    NOTSUBMITTED("NotSubmitted"),
    
    SUBMITTED("Submitted"),
    
    REJECTED("Rejected"),
    
    APPROVED("Approved");

    private String value;

    RunnableStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunnableStatusEnum fromValue(String value) {
      for (RunnableStatusEnum b : RunnableStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunnableStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunnableStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunnableStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunnableStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RUNNABLE_STATUS = "runnableStatus";
  @SerializedName(SERIALIZED_NAME_RUNNABLE_STATUS)
  private RunnableStatusEnum runnableStatus;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;


  public RetailMediaExternalv1ProposalStatusModel negotiationState(NegotiationStateEnum negotiationState) {
    
    this.negotiationState = negotiationState;
    return this;
  }

   /**
   * Get negotiationState
   * @return negotiationState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NegotiationStateEnum getNegotiationState() {
    return negotiationState;
  }


  public void setNegotiationState(NegotiationStateEnum negotiationState) {
    this.negotiationState = negotiationState;
  }


  public RetailMediaExternalv1ProposalStatusModel bookingStatus(BookingStatusEnum bookingStatus) {
    
    this.bookingStatus = bookingStatus;
    return this;
  }

   /**
   * Get bookingStatus
   * @return bookingStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BookingStatusEnum getBookingStatus() {
    return bookingStatus;
  }


  public void setBookingStatus(BookingStatusEnum bookingStatus) {
    this.bookingStatus = bookingStatus;
  }


  public RetailMediaExternalv1ProposalStatusModel runnableStatus(RunnableStatusEnum runnableStatus) {
    
    this.runnableStatus = runnableStatus;
    return this;
  }

   /**
   * Get runnableStatus
   * @return runnableStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RunnableStatusEnum getRunnableStatus() {
    return runnableStatus;
  }


  public void setRunnableStatus(RunnableStatusEnum runnableStatus) {
    this.runnableStatus = runnableStatus;
  }


  public RetailMediaExternalv1ProposalStatusModel comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public RetailMediaExternalv1ProposalStatusModel createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RetailMediaExternalv1ProposalStatusModel updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetailMediaExternalv1ProposalStatusModel retailMediaExternalv1ProposalStatusModel = (RetailMediaExternalv1ProposalStatusModel) o;
    return Objects.equals(this.negotiationState, retailMediaExternalv1ProposalStatusModel.negotiationState) &&
        Objects.equals(this.bookingStatus, retailMediaExternalv1ProposalStatusModel.bookingStatus) &&
        Objects.equals(this.runnableStatus, retailMediaExternalv1ProposalStatusModel.runnableStatus) &&
        Objects.equals(this.comment, retailMediaExternalv1ProposalStatusModel.comment) &&
        Objects.equals(this.createdAt, retailMediaExternalv1ProposalStatusModel.createdAt) &&
        Objects.equals(this.updatedAt, retailMediaExternalv1ProposalStatusModel.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negotiationState, bookingStatus, runnableStatus, comment, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetailMediaExternalv1ProposalStatusModel {\n");
    sb.append("    negotiationState: ").append(toIndentedString(negotiationState)).append("\n");
    sb.append("    bookingStatus: ").append(toIndentedString(bookingStatus)).append("\n");
    sb.append("    runnableStatus: ").append(toIndentedString(runnableStatus)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

