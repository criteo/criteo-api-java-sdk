/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * The dictionary of budget type to the list of cap out times up to 3 most recent cap out times
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LineItemBudgetCapOutHistoryCapoutTimes {
  public static final String SERIALIZED_NAME_DAILY = "daily";
  @SerializedName(SERIALIZED_NAME_DAILY)
  private List<OffsetDateTime> daily = null;

  public static final String SERIALIZED_NAME_HOURLY = "hourly";
  @SerializedName(SERIALIZED_NAME_HOURLY)
  private List<OffsetDateTime> hourly = null;

  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private List<OffsetDateTime> monthly = null;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private List<OffsetDateTime> total = null;

  public LineItemBudgetCapOutHistoryCapoutTimes() {
  }

  public LineItemBudgetCapOutHistoryCapoutTimes daily(List<OffsetDateTime> daily) {
    
    this.daily = daily;
    return this;
  }

  public LineItemBudgetCapOutHistoryCapoutTimes addDailyItem(OffsetDateTime dailyItem) {
    if (this.daily == null) {
      this.daily = null;
    }
    this.daily.add(dailyItem);
    return this;
  }

   /**
   * Get daily
   * @return daily
  **/
  @javax.annotation.Nullable

  public List<OffsetDateTime> getDaily() {
    return daily;
  }


  public void setDaily(List<OffsetDateTime> daily) {
    this.daily = daily;
  }


  public LineItemBudgetCapOutHistoryCapoutTimes hourly(List<OffsetDateTime> hourly) {
    
    this.hourly = hourly;
    return this;
  }

  public LineItemBudgetCapOutHistoryCapoutTimes addHourlyItem(OffsetDateTime hourlyItem) {
    if (this.hourly == null) {
      this.hourly = null;
    }
    this.hourly.add(hourlyItem);
    return this;
  }

   /**
   * Get hourly
   * @return hourly
  **/
  @javax.annotation.Nullable

  public List<OffsetDateTime> getHourly() {
    return hourly;
  }


  public void setHourly(List<OffsetDateTime> hourly) {
    this.hourly = hourly;
  }


  public LineItemBudgetCapOutHistoryCapoutTimes monthly(List<OffsetDateTime> monthly) {
    
    this.monthly = monthly;
    return this;
  }

  public LineItemBudgetCapOutHistoryCapoutTimes addMonthlyItem(OffsetDateTime monthlyItem) {
    if (this.monthly == null) {
      this.monthly = null;
    }
    this.monthly.add(monthlyItem);
    return this;
  }

   /**
   * Get monthly
   * @return monthly
  **/
  @javax.annotation.Nullable

  public List<OffsetDateTime> getMonthly() {
    return monthly;
  }


  public void setMonthly(List<OffsetDateTime> monthly) {
    this.monthly = monthly;
  }


  public LineItemBudgetCapOutHistoryCapoutTimes total(List<OffsetDateTime> total) {
    
    this.total = total;
    return this;
  }

  public LineItemBudgetCapOutHistoryCapoutTimes addTotalItem(OffsetDateTime totalItem) {
    if (this.total == null) {
      this.total = null;
    }
    this.total.add(totalItem);
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable

  public List<OffsetDateTime> getTotal() {
    return total;
  }


  public void setTotal(List<OffsetDateTime> total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemBudgetCapOutHistoryCapoutTimes lineItemBudgetCapOutHistoryCapoutTimes = (LineItemBudgetCapOutHistoryCapoutTimes) o;
    return Objects.equals(this.daily, lineItemBudgetCapOutHistoryCapoutTimes.daily) &&
        Objects.equals(this.hourly, lineItemBudgetCapOutHistoryCapoutTimes.hourly) &&
        Objects.equals(this.monthly, lineItemBudgetCapOutHistoryCapoutTimes.monthly) &&
        Objects.equals(this.total, lineItemBudgetCapOutHistoryCapoutTimes.total);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(daily, hourly, monthly, total);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemBudgetCapOutHistoryCapoutTimes {\n");
    sb.append("    daily: ").append(toIndentedString(daily)).append("\n");
    sb.append("    hourly: ").append(toIndentedString(hourly)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daily");
    openapiFields.add("hourly");
    openapiFields.add("monthly");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LineItemBudgetCapOutHistoryCapoutTimes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LineItemBudgetCapOutHistoryCapoutTimes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemBudgetCapOutHistoryCapoutTimes is not found in the empty JSON string", LineItemBudgetCapOutHistoryCapoutTimes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LineItemBudgetCapOutHistoryCapoutTimes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemBudgetCapOutHistoryCapoutTimes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("daily") != null && !jsonObj.get("daily").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily` to be an array in the JSON string but got `%s`", jsonObj.get("daily").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hourly") != null && !jsonObj.get("hourly").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hourly` to be an array in the JSON string but got `%s`", jsonObj.get("hourly").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("monthly") != null && !jsonObj.get("monthly").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthly` to be an array in the JSON string but got `%s`", jsonObj.get("monthly").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be an array in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemBudgetCapOutHistoryCapoutTimes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemBudgetCapOutHistoryCapoutTimes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemBudgetCapOutHistoryCapoutTimes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemBudgetCapOutHistoryCapoutTimes.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemBudgetCapOutHistoryCapoutTimes>() {
           @Override
           public void write(JsonWriter out, LineItemBudgetCapOutHistoryCapoutTimes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemBudgetCapOutHistoryCapoutTimes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LineItemBudgetCapOutHistoryCapoutTimes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LineItemBudgetCapOutHistoryCapoutTimes
  * @throws IOException if the JSON string is invalid with respect to LineItemBudgetCapOutHistoryCapoutTimes
  */
  public static LineItemBudgetCapOutHistoryCapoutTimes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemBudgetCapOutHistoryCapoutTimes.class);
  }

 /**
  * Convert an instance of LineItemBudgetCapOutHistoryCapoutTimes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

