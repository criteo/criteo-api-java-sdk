/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * A request for a catalog under the specified format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BrandCatalogRequestV2 {
  public static final String SERIALIZED_NAME_BRAND_ID_FILTER = "brandIdFilter";
  @SerializedName(SERIALIZED_NAME_BRAND_ID_FILTER)
  private List<String> brandIdFilter = null;

  public static final String SERIALIZED_NAME_RETAILER_ID_FILTER = "retailerIdFilter";
  @SerializedName(SERIALIZED_NAME_RETAILER_ID_FILTER)
  private List<Integer> retailerIdFilter = null;

  public static final String SERIALIZED_NAME_MODIFIED_AFTER = "modifiedAfter";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AFTER)
  private OffsetDateTime modifiedAfter;

  /**
   * Gets or Sets includeFields
   */
  @JsonAdapter(IncludeFieldsEnum.Adapter.class)
  public enum IncludeFieldsEnum {
    UNKNOWN("Unknown"),
    
    DESCRIPTION("Description"),
    
    IMAGEURL("ImageUrl"),
    
    GLOBALCATEGORYID("GlobalCategoryId"),
    
    RETAILERNAME("RetailerName"),
    
    CATEGORY("Category"),
    
    BRANDNAME("BrandName");

    private String value;

    IncludeFieldsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludeFieldsEnum fromValue(String value) {
      for (IncludeFieldsEnum b : IncludeFieldsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludeFieldsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludeFieldsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludeFieldsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludeFieldsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCLUDE_FIELDS = "includeFields";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FIELDS)
  private List<IncludeFieldsEnum> includeFields = null;

  public BrandCatalogRequestV2() {
  }

  public BrandCatalogRequestV2 brandIdFilter(List<String> brandIdFilter) {
    
    this.brandIdFilter = brandIdFilter;
    return this;
  }

  public BrandCatalogRequestV2 addBrandIdFilterItem(String brandIdFilterItem) {
    if (this.brandIdFilter == null) {
      this.brandIdFilter = new ArrayList<>();
    }
    this.brandIdFilter.add(brandIdFilterItem);
    return this;
  }

   /**
   * The brand ids to filter the catalog by.
   * @return brandIdFilter
  **/
  @javax.annotation.Nullable

  public List<String> getBrandIdFilter() {
    return brandIdFilter;
  }


  public void setBrandIdFilter(List<String> brandIdFilter) {
    this.brandIdFilter = brandIdFilter;
  }


  public BrandCatalogRequestV2 retailerIdFilter(List<Integer> retailerIdFilter) {
    
    this.retailerIdFilter = retailerIdFilter;
    return this;
  }

  public BrandCatalogRequestV2 addRetailerIdFilterItem(Integer retailerIdFilterItem) {
    if (this.retailerIdFilter == null) {
      this.retailerIdFilter = new ArrayList<>();
    }
    this.retailerIdFilter.add(retailerIdFilterItem);
    return this;
  }

   /**
   * The retailer ids to filter the catalog by.
   * @return retailerIdFilter
  **/
  @javax.annotation.Nullable

  public List<Integer> getRetailerIdFilter() {
    return retailerIdFilter;
  }


  public void setRetailerIdFilter(List<Integer> retailerIdFilter) {
    this.retailerIdFilter = retailerIdFilter;
  }


  public BrandCatalogRequestV2 modifiedAfter(OffsetDateTime modifiedAfter) {
    
    this.modifiedAfter = modifiedAfter;
    return this;
  }

   /**
   * Only products modified after this time will be returned.
   * @return modifiedAfter
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getModifiedAfter() {
    return modifiedAfter;
  }


  public void setModifiedAfter(OffsetDateTime modifiedAfter) {
    this.modifiedAfter = modifiedAfter;
  }


  public BrandCatalogRequestV2 includeFields(List<IncludeFieldsEnum> includeFields) {
    
    this.includeFields = includeFields;
    return this;
  }

  public BrandCatalogRequestV2 addIncludeFieldsItem(IncludeFieldsEnum includeFieldsItem) {
    if (this.includeFields == null) {
      this.includeFields = new ArrayList<>();
    }
    this.includeFields.add(includeFieldsItem);
    return this;
  }

   /**
   * Out of the optional fields, only the ones specified will be included in the catalog generated.
   * @return includeFields
  **/
  @javax.annotation.Nullable

  public List<IncludeFieldsEnum> getIncludeFields() {
    return includeFields;
  }


  public void setIncludeFields(List<IncludeFieldsEnum> includeFields) {
    this.includeFields = includeFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BrandCatalogRequestV2 instance itself
   */
  public BrandCatalogRequestV2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandCatalogRequestV2 brandCatalogRequestV2 = (BrandCatalogRequestV2) o;
    return Objects.equals(this.brandIdFilter, brandCatalogRequestV2.brandIdFilter) &&
        Objects.equals(this.retailerIdFilter, brandCatalogRequestV2.retailerIdFilter) &&
        Objects.equals(this.modifiedAfter, brandCatalogRequestV2.modifiedAfter) &&
        Objects.equals(this.includeFields, brandCatalogRequestV2.includeFields)&&
        Objects.equals(this.additionalProperties, brandCatalogRequestV2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandIdFilter, retailerIdFilter, modifiedAfter, includeFields, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandCatalogRequestV2 {\n");
    sb.append("    brandIdFilter: ").append(toIndentedString(brandIdFilter)).append("\n");
    sb.append("    retailerIdFilter: ").append(toIndentedString(retailerIdFilter)).append("\n");
    sb.append("    modifiedAfter: ").append(toIndentedString(modifiedAfter)).append("\n");
    sb.append("    includeFields: ").append(toIndentedString(includeFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandIdFilter");
    openapiFields.add("retailerIdFilter");
    openapiFields.add("modifiedAfter");
    openapiFields.add("includeFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BrandCatalogRequestV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BrandCatalogRequestV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandCatalogRequestV2 is not found in the empty JSON string", BrandCatalogRequestV2.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brandIdFilter") != null && !jsonObj.get("brandIdFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandIdFilter` to be an array in the JSON string but got `%s`", jsonObj.get("brandIdFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retailerIdFilter") != null && !jsonObj.get("retailerIdFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailerIdFilter` to be an array in the JSON string but got `%s`", jsonObj.get("retailerIdFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeFields") != null && !jsonObj.get("includeFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeFields` to be an array in the JSON string but got `%s`", jsonObj.get("includeFields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandCatalogRequestV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandCatalogRequestV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandCatalogRequestV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandCatalogRequestV2.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandCatalogRequestV2>() {
           @Override
           public void write(JsonWriter out, BrandCatalogRequestV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandCatalogRequestV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BrandCatalogRequestV2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrandCatalogRequestV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrandCatalogRequestV2
  * @throws IOException if the JSON string is invalid with respect to BrandCatalogRequestV2
  */
  public static BrandCatalogRequestV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandCatalogRequestV2.class);
  }

 /**
  * Convert an instance of BrandCatalogRequestV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

