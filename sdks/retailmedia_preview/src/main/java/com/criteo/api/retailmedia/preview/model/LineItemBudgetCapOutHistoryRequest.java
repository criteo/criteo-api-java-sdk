/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.preview.JSON;

/**
 * The request body for cap out history of line item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LineItemBudgetCapOutHistoryRequest {
  /**
   * The budget type enum
   */
  @JsonAdapter(BudgetTypesEnum.Adapter.class)
  public enum BudgetTypesEnum {
    TOTAL("total"),
    
    DAILY("daily"),
    
    MONTHLY("monthly"),
    
    HOURLY("hourly");

    private String value;

    BudgetTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BudgetTypesEnum fromValue(String value) {
      for (BudgetTypesEnum b : BudgetTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BudgetTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BudgetTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BudgetTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BudgetTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BUDGET_TYPES = "budgetTypes";
  @SerializedName(SERIALIZED_NAME_BUDGET_TYPES)
  private List<BudgetTypesEnum> budgetTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEM_IDS = "lineItemIds";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_IDS)
  private List<String> lineItemIds = new ArrayList<>();

  public LineItemBudgetCapOutHistoryRequest() {
  }

  public LineItemBudgetCapOutHistoryRequest budgetTypes(List<BudgetTypesEnum> budgetTypes) {
    
    this.budgetTypes = budgetTypes;
    return this;
  }

  public LineItemBudgetCapOutHistoryRequest addBudgetTypesItem(BudgetTypesEnum budgetTypesItem) {
    this.budgetTypes.add(budgetTypesItem);
    return this;
  }

   /**
   * Budget Types to return cap out history
   * @return budgetTypes
  **/
  @javax.annotation.Nonnull

  public List<BudgetTypesEnum> getBudgetTypes() {
    return budgetTypes;
  }


  public void setBudgetTypes(List<BudgetTypesEnum> budgetTypes) {
    this.budgetTypes = budgetTypes;
  }


  public LineItemBudgetCapOutHistoryRequest lineItemIds(List<String> lineItemIds) {
    
    this.lineItemIds = lineItemIds;
    return this;
  }

  public LineItemBudgetCapOutHistoryRequest addLineItemIdsItem(String lineItemIdsItem) {
    this.lineItemIds.add(lineItemIdsItem);
    return this;
  }

   /**
   * Line Item Ids to return cap out history
   * @return lineItemIds
  **/
  @javax.annotation.Nonnull

  public List<String> getLineItemIds() {
    return lineItemIds;
  }


  public void setLineItemIds(List<String> lineItemIds) {
    this.lineItemIds = lineItemIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemBudgetCapOutHistoryRequest lineItemBudgetCapOutHistoryRequest = (LineItemBudgetCapOutHistoryRequest) o;
    return Objects.equals(this.budgetTypes, lineItemBudgetCapOutHistoryRequest.budgetTypes) &&
        Objects.equals(this.lineItemIds, lineItemBudgetCapOutHistoryRequest.lineItemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetTypes, lineItemIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemBudgetCapOutHistoryRequest {\n");
    sb.append("    budgetTypes: ").append(toIndentedString(budgetTypes)).append("\n");
    sb.append("    lineItemIds: ").append(toIndentedString(lineItemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budgetTypes");
    openapiFields.add("lineItemIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("budgetTypes");
    openapiRequiredFields.add("lineItemIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LineItemBudgetCapOutHistoryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LineItemBudgetCapOutHistoryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemBudgetCapOutHistoryRequest is not found in the empty JSON string", LineItemBudgetCapOutHistoryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LineItemBudgetCapOutHistoryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemBudgetCapOutHistoryRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LineItemBudgetCapOutHistoryRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("budgetTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("budgetTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetTypes` to be an array in the JSON string but got `%s`", jsonObj.get("budgetTypes").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("lineItemIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("lineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("lineItemIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemBudgetCapOutHistoryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemBudgetCapOutHistoryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemBudgetCapOutHistoryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemBudgetCapOutHistoryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemBudgetCapOutHistoryRequest>() {
           @Override
           public void write(JsonWriter out, LineItemBudgetCapOutHistoryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemBudgetCapOutHistoryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LineItemBudgetCapOutHistoryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LineItemBudgetCapOutHistoryRequest
  * @throws IOException if the JSON string is invalid with respect to LineItemBudgetCapOutHistoryRequest
  */
  public static LineItemBudgetCapOutHistoryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemBudgetCapOutHistoryRequest.class);
  }

 /**
  * Convert an instance of LineItemBudgetCapOutHistoryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

