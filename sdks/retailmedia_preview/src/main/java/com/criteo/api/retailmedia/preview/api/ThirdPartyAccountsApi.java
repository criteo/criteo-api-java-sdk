/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.api;

import com.criteo.api.retailmedia.preview.ApiCallback;
import com.criteo.api.retailmedia.preview.ApiClient;
import com.criteo.api.retailmedia.preview.ApiException;
import com.criteo.api.retailmedia.preview.ApiResponse;
import com.criteo.api.retailmedia.preview.Configuration;
import com.criteo.api.retailmedia.preview.Pair;
import com.criteo.api.retailmedia.preview.ProgressRequestBody;
import com.criteo.api.retailmedia.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.preview.model.EntityResourceOutcomeOfRetailMediaAccountV2;
import com.criteo.api.retailmedia.preview.model.ValueResourceCollectionInputOfRetailMediaSeller;
import com.criteo.api.retailmedia.preview.model.ValueResourceCollectionOutcomeOfRetailMediaSeller;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputOfRetailMediaBrandAccountCreationV2;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputOfRetailMediaBrands;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputOfRetailMediaSellerAccountCreationV2;
import com.criteo.api.retailmedia.preview.model.ValueResourceOutcomeOfRetailMediaBrands;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ThirdPartyAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ThirdPartyAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ThirdPartyAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPost
     * @param accountId account to add brands to (required)
     * @param valueResourceInputOfRetailMediaBrands list of bands to add to an account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostCall(String accountId, ValueResourceInputOfRetailMediaBrands valueResourceInputOfRetailMediaBrands, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfRetailMediaBrands;

        // create path and map variables
        String localVarPath = "/preview/retail-media/third-party-accounts/{accountId}/brands/add"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostValidateBeforeCall(String accountId, ValueResourceInputOfRetailMediaBrands valueResourceInputOfRetailMediaBrands, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPost(Async)");
        }

        return previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostCall(accountId, valueResourceInputOfRetailMediaBrands, _callback);

    }

    /**
     * 
     * add the provided brands to an account. This will not remove any existing brands.
     * @param accountId account to add brands to (required)
     * @param valueResourceInputOfRetailMediaBrands list of bands to add to an account (optional)
     * @return ValueResourceOutcomeOfRetailMediaBrands
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfRetailMediaBrands previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPost(String accountId, ValueResourceInputOfRetailMediaBrands valueResourceInputOfRetailMediaBrands) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfRetailMediaBrands> localVarResp = previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostWithHttpInfo(accountId, valueResourceInputOfRetailMediaBrands);
        return localVarResp.getData();
    }

    /**
     * 
     * add the provided brands to an account. This will not remove any existing brands.
     * @param accountId account to add brands to (required)
     * @param valueResourceInputOfRetailMediaBrands list of bands to add to an account (optional)
     * @return ApiResponse&lt;ValueResourceOutcomeOfRetailMediaBrands&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfRetailMediaBrands> previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostWithHttpInfo(String accountId, ValueResourceInputOfRetailMediaBrands valueResourceInputOfRetailMediaBrands) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostValidateBeforeCall(accountId, valueResourceInputOfRetailMediaBrands, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfRetailMediaBrands>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add the provided brands to an account. This will not remove any existing brands.
     * @param accountId account to add brands to (required)
     * @param valueResourceInputOfRetailMediaBrands list of bands to add to an account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostAsync(String accountId, ValueResourceInputOfRetailMediaBrands valueResourceInputOfRetailMediaBrands, final ApiCallback<ValueResourceOutcomeOfRetailMediaBrands> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdBrandsAddPostValidateBeforeCall(accountId, valueResourceInputOfRetailMediaBrands, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfRetailMediaBrands>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePost
     * @param accountId account id to remove brand from (required)
     * @param brandId brand to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostCall(String accountId, String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/third-party-accounts/{accountId}/brands/{brandId}/remove"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostValidateBeforeCall(String accountId, String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePost(Async)");
        }

        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePost(Async)");
        }

        return previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostCall(accountId, brandId, _callback);

    }

    /**
     * 
     * Attempt to remove the provided brand from the account.
     * @param accountId account id to remove brand from (required)
     * @param brandId brand to remove (required)
     * @return ValueResourceOutcomeOfRetailMediaBrands
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfRetailMediaBrands previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePost(String accountId, String brandId) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfRetailMediaBrands> localVarResp = previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostWithHttpInfo(accountId, brandId);
        return localVarResp.getData();
    }

    /**
     * 
     * Attempt to remove the provided brand from the account.
     * @param accountId account id to remove brand from (required)
     * @param brandId brand to remove (required)
     * @return ApiResponse&lt;ValueResourceOutcomeOfRetailMediaBrands&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfRetailMediaBrands> previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostWithHttpInfo(String accountId, String brandId) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostValidateBeforeCall(accountId, brandId, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfRetailMediaBrands>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attempt to remove the provided brand from the account.
     * @param accountId account id to remove brand from (required)
     * @param brandId brand to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostAsync(String accountId, String brandId, final ApiCallback<ValueResourceOutcomeOfRetailMediaBrands> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdBrandsBrandIdRemovePostValidateBeforeCall(accountId, brandId, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfRetailMediaBrands>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPost
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaBrandAccountCreationV2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostCall(String accountId, ValueResourceInputOfRetailMediaBrandAccountCreationV2 valueResourceInputOfRetailMediaBrandAccountCreationV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfRetailMediaBrandAccountCreationV2;

        // create path and map variables
        String localVarPath = "/preview/retail-media/third-party-accounts/{accountId}/create-brand-account"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostValidateBeforeCall(String accountId, ValueResourceInputOfRetailMediaBrandAccountCreationV2 valueResourceInputOfRetailMediaBrandAccountCreationV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPost(Async)");
        }

        return previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostCall(accountId, valueResourceInputOfRetailMediaBrandAccountCreationV2, _callback);

    }

    /**
     * 
     * Create a private market demand brand account under a given parent account.
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaBrandAccountCreationV2  (optional)
     * @return EntityResourceOutcomeOfRetailMediaAccountV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomeOfRetailMediaAccountV2 previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPost(String accountId, ValueResourceInputOfRetailMediaBrandAccountCreationV2 valueResourceInputOfRetailMediaBrandAccountCreationV2) throws ApiException {
        ApiResponse<EntityResourceOutcomeOfRetailMediaAccountV2> localVarResp = previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostWithHttpInfo(accountId, valueResourceInputOfRetailMediaBrandAccountCreationV2);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a private market demand brand account under a given parent account.
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaBrandAccountCreationV2  (optional)
     * @return ApiResponse&lt;EntityResourceOutcomeOfRetailMediaAccountV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomeOfRetailMediaAccountV2> previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostWithHttpInfo(String accountId, ValueResourceInputOfRetailMediaBrandAccountCreationV2 valueResourceInputOfRetailMediaBrandAccountCreationV2) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostValidateBeforeCall(accountId, valueResourceInputOfRetailMediaBrandAccountCreationV2, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfRetailMediaAccountV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a private market demand brand account under a given parent account.
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaBrandAccountCreationV2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostAsync(String accountId, ValueResourceInputOfRetailMediaBrandAccountCreationV2 valueResourceInputOfRetailMediaBrandAccountCreationV2, final ApiCallback<EntityResourceOutcomeOfRetailMediaAccountV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdCreateBrandAccountPostValidateBeforeCall(accountId, valueResourceInputOfRetailMediaBrandAccountCreationV2, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfRetailMediaAccountV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPost
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaSellerAccountCreationV2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostCall(String accountId, ValueResourceInputOfRetailMediaSellerAccountCreationV2 valueResourceInputOfRetailMediaSellerAccountCreationV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfRetailMediaSellerAccountCreationV2;

        // create path and map variables
        String localVarPath = "/preview/retail-media/third-party-accounts/{accountId}/create-seller-account"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostValidateBeforeCall(String accountId, ValueResourceInputOfRetailMediaSellerAccountCreationV2 valueResourceInputOfRetailMediaSellerAccountCreationV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPost(Async)");
        }

        return previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostCall(accountId, valueResourceInputOfRetailMediaSellerAccountCreationV2, _callback);

    }

    /**
     * 
     * Create a private market demand seller account under a given parent account.
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaSellerAccountCreationV2  (optional)
     * @return EntityResourceOutcomeOfRetailMediaAccountV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomeOfRetailMediaAccountV2 previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPost(String accountId, ValueResourceInputOfRetailMediaSellerAccountCreationV2 valueResourceInputOfRetailMediaSellerAccountCreationV2) throws ApiException {
        ApiResponse<EntityResourceOutcomeOfRetailMediaAccountV2> localVarResp = previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostWithHttpInfo(accountId, valueResourceInputOfRetailMediaSellerAccountCreationV2);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a private market demand seller account under a given parent account.
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaSellerAccountCreationV2  (optional)
     * @return ApiResponse&lt;EntityResourceOutcomeOfRetailMediaAccountV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomeOfRetailMediaAccountV2> previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostWithHttpInfo(String accountId, ValueResourceInputOfRetailMediaSellerAccountCreationV2 valueResourceInputOfRetailMediaSellerAccountCreationV2) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostValidateBeforeCall(accountId, valueResourceInputOfRetailMediaSellerAccountCreationV2, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfRetailMediaAccountV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a private market demand seller account under a given parent account.
     * @param accountId parent supply account to create account under (required)
     * @param valueResourceInputOfRetailMediaSellerAccountCreationV2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostAsync(String accountId, ValueResourceInputOfRetailMediaSellerAccountCreationV2 valueResourceInputOfRetailMediaSellerAccountCreationV2, final ApiCallback<EntityResourceOutcomeOfRetailMediaAccountV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdCreateSellerAccountPostValidateBeforeCall(accountId, valueResourceInputOfRetailMediaSellerAccountCreationV2, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfRetailMediaAccountV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewRetailMediaThirdPartyAccountsAccountIdSellersPut
     * @param accountId accountId to update sellers for (required)
     * @param valueResourceCollectionInputOfRetailMediaSeller  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdSellersPutCall(String accountId, ValueResourceCollectionInputOfRetailMediaSeller valueResourceCollectionInputOfRetailMediaSeller, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceCollectionInputOfRetailMediaSeller;

        // create path and map variables
        String localVarPath = "/preview/retail-media/third-party-accounts/{accountId}/sellers"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdSellersPutValidateBeforeCall(String accountId, ValueResourceCollectionInputOfRetailMediaSeller valueResourceCollectionInputOfRetailMediaSeller, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling previewRetailMediaThirdPartyAccountsAccountIdSellersPut(Async)");
        }

        return previewRetailMediaThirdPartyAccountsAccountIdSellersPutCall(accountId, valueResourceCollectionInputOfRetailMediaSeller, _callback);

    }

    /**
     * 
     * Update the list of sellers mapped to the account. This will override any existing mappings.
     * @param accountId accountId to update sellers for (required)
     * @param valueResourceCollectionInputOfRetailMediaSeller  (optional)
     * @return ValueResourceCollectionOutcomeOfRetailMediaSeller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceCollectionOutcomeOfRetailMediaSeller previewRetailMediaThirdPartyAccountsAccountIdSellersPut(String accountId, ValueResourceCollectionInputOfRetailMediaSeller valueResourceCollectionInputOfRetailMediaSeller) throws ApiException {
        ApiResponse<ValueResourceCollectionOutcomeOfRetailMediaSeller> localVarResp = previewRetailMediaThirdPartyAccountsAccountIdSellersPutWithHttpInfo(accountId, valueResourceCollectionInputOfRetailMediaSeller);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the list of sellers mapped to the account. This will override any existing mappings.
     * @param accountId accountId to update sellers for (required)
     * @param valueResourceCollectionInputOfRetailMediaSeller  (optional)
     * @return ApiResponse&lt;ValueResourceCollectionOutcomeOfRetailMediaSeller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceCollectionOutcomeOfRetailMediaSeller> previewRetailMediaThirdPartyAccountsAccountIdSellersPutWithHttpInfo(String accountId, ValueResourceCollectionInputOfRetailMediaSeller valueResourceCollectionInputOfRetailMediaSeller) throws ApiException {
        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdSellersPutValidateBeforeCall(accountId, valueResourceCollectionInputOfRetailMediaSeller, null);
        Type localVarReturnType = new TypeToken<ValueResourceCollectionOutcomeOfRetailMediaSeller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the list of sellers mapped to the account. This will override any existing mappings.
     * @param accountId accountId to update sellers for (required)
     * @param valueResourceCollectionInputOfRetailMediaSeller  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewRetailMediaThirdPartyAccountsAccountIdSellersPutAsync(String accountId, ValueResourceCollectionInputOfRetailMediaSeller valueResourceCollectionInputOfRetailMediaSeller, final ApiCallback<ValueResourceCollectionOutcomeOfRetailMediaSeller> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewRetailMediaThirdPartyAccountsAccountIdSellersPutValidateBeforeCall(accountId, valueResourceCollectionInputOfRetailMediaSeller, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceCollectionOutcomeOfRetailMediaSeller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
