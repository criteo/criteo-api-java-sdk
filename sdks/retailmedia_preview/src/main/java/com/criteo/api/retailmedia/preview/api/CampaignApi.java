/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.api;

import com.criteo.api.retailmedia.preview.ApiCallback;
import com.criteo.api.retailmedia.preview.ApiClient;
import com.criteo.api.retailmedia.preview.ApiException;
import com.criteo.api.retailmedia.preview.ApiResponse;
import com.criteo.api.retailmedia.preview.Configuration;
import com.criteo.api.retailmedia.preview.Pair;
import com.criteo.api.retailmedia.preview.ProgressRequestBody;
import com.criteo.api.retailmedia.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.preview.model.BrandPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.CpcRateCardPreviewResponse;
import com.criteo.api.retailmedia.preview.model.Creative202210ListResponse;
import com.criteo.api.retailmedia.preview.model.Creative202210Response;
import com.criteo.api.retailmedia.preview.model.CreativeCreateModel202207;
import com.criteo.api.retailmedia.preview.model.CreativeUpdateModel202207;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfAccount;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfBrand;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfRetailer;
import com.criteo.api.retailmedia.preview.model.JsonApiRequestOfCatalogRequestPreview;
import com.criteo.api.retailmedia.preview.model.JsonApiSingleResponseOfCatalogStatus;
import com.criteo.api.retailmedia.preview.model.JsonApiSingleResponseOfLineItemBidMultipliers;
import com.criteo.api.retailmedia.preview.model.LineItemBidMultipliersRequest;
import com.criteo.api.retailmedia.preview.model.LineItemBidMultipliersResponse;
import com.criteo.api.retailmedia.preview.model.PlacementPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.ProductButtonListRequest;
import com.criteo.api.retailmedia.preview.model.ProductButtonListResponse;
import com.criteo.api.retailmedia.preview.model.ProductButtonRequest;
import com.criteo.api.retailmedia.preview.model.ProductButtonResponse;
import com.criteo.api.retailmedia.preview.model.RetailMediaExternalv1AddRemoveKeywordsModelRequest;
import com.criteo.api.retailmedia.preview.model.RetailMediaExternalv1KeywordsModelResponse;
import com.criteo.api.retailmedia.preview.model.RetailMediaExternalv1ProposalStatusModelResponse;
import com.criteo.api.retailmedia.preview.model.RetailMediaExternalv1ResourceOutcome;
import com.criteo.api.retailmedia.preview.model.RetailMediaExternalv1SetBidsModelRequest;
import com.criteo.api.retailmedia.preview.model.SellerPreviewResponse;
import com.criteo.api.retailmedia.preview.model.SkuDataPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestPreviewRequest;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestSlimPreviewRequest;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestSlimV2PreviewRequest;
import com.criteo.api.retailmedia.preview.model.SkuSlimDataPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.SkuSlimDataV2ListResponse;
import com.criteo.api.retailmedia.preview.model.TemplateListResponse;
import com.criteo.api.retailmedia.preview.model.TemplateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addRemoveKeywords
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1AddRemoveKeywordsModelRequest Object containing keywords to be added or removed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveKeywordsCall(String id, RetailMediaExternalv1AddRemoveKeywordsModelRequest retailMediaExternalv1AddRemoveKeywordsModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retailMediaExternalv1AddRemoveKeywordsModelRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{id}/keywords/add-remove"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRemoveKeywordsValidateBeforeCall(String id, RetailMediaExternalv1AddRemoveKeywordsModelRequest retailMediaExternalv1AddRemoveKeywordsModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRemoveKeywords(Async)");
        }

        return addRemoveKeywordsCall(id, retailMediaExternalv1AddRemoveKeywordsModelRequest, _callback);

    }

    /**
     * 
     * Add or Remove keywords from the associated line item in bulk
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1AddRemoveKeywordsModelRequest Object containing keywords to be added or removed (optional)
     * @return RetailMediaExternalv1ResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RetailMediaExternalv1ResourceOutcome addRemoveKeywords(String id, RetailMediaExternalv1AddRemoveKeywordsModelRequest retailMediaExternalv1AddRemoveKeywordsModelRequest) throws ApiException {
        ApiResponse<RetailMediaExternalv1ResourceOutcome> localVarResp = addRemoveKeywordsWithHttpInfo(id, retailMediaExternalv1AddRemoveKeywordsModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add or Remove keywords from the associated line item in bulk
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1AddRemoveKeywordsModelRequest Object containing keywords to be added or removed (optional)
     * @return ApiResponse&lt;RetailMediaExternalv1ResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetailMediaExternalv1ResourceOutcome> addRemoveKeywordsWithHttpInfo(String id, RetailMediaExternalv1AddRemoveKeywordsModelRequest retailMediaExternalv1AddRemoveKeywordsModelRequest) throws ApiException {
        okhttp3.Call localVarCall = addRemoveKeywordsValidateBeforeCall(id, retailMediaExternalv1AddRemoveKeywordsModelRequest, null);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add or Remove keywords from the associated line item in bulk
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1AddRemoveKeywordsModelRequest Object containing keywords to be added or removed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveKeywordsAsync(String id, RetailMediaExternalv1AddRemoveKeywordsModelRequest retailMediaExternalv1AddRemoveKeywordsModelRequest, final ApiCallback<RetailMediaExternalv1ResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRemoveKeywordsValidateBeforeCall(id, retailMediaExternalv1AddRemoveKeywordsModelRequest, _callback);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()))
            .replace("{" + "product-button-id" + "}", localVarApiClient.escapeString(productButtonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        // verify the required parameter 'productButtonId' is set
        if (productButtonId == null) {
            throw new ApiException("Missing the required parameter 'productButtonId' when calling deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        return deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(lineItemId, productButtonId, _callback);

    }

    /**
     * 
     * Delete a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(String lineItemId, String productButtonId) throws ApiException {
        deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(lineItemId, productButtonId);
    }

    /**
     * 
     * Delete a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(String lineItemId, String productButtonId) throws ApiException {
        okhttp3.Call localVarCall = deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync(String lineItemId, String productButtonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchKeywords
     * @param id Long external id of the associated line item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchKeywordsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{id}/keywords"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchKeywordsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchKeywords(Async)");
        }

        return fetchKeywordsCall(id, _callback);

    }

    /**
     * 
     * Fetch keywords associated with the specified line item
     * @param id Long external id of the associated line item (required)
     * @return RetailMediaExternalv1KeywordsModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RetailMediaExternalv1KeywordsModelResponse fetchKeywords(String id) throws ApiException {
        ApiResponse<RetailMediaExternalv1KeywordsModelResponse> localVarResp = fetchKeywordsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch keywords associated with the specified line item
     * @param id Long external id of the associated line item (required)
     * @return ApiResponse&lt;RetailMediaExternalv1KeywordsModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetailMediaExternalv1KeywordsModelResponse> fetchKeywordsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchKeywordsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1KeywordsModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch keywords associated with the specified line item
     * @param id Long external id of the associated line item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchKeywordsAsync(String id, final ApiCallback<RetailMediaExternalv1KeywordsModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchKeywordsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1KeywordsModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProposal
     * @param id The external id of a line item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProposalCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/preferred-deal-line-items/{id}/proposal"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProposalValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchProposal(Async)");
        }

        return fetchProposalCall(id, _callback);

    }

    /**
     * 
     * Fetch the status of a proposal to modify a Preferred Deal Line Item.
     * @param id The external id of a line item. (required)
     * @return RetailMediaExternalv1ProposalStatusModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetailMediaExternalv1ProposalStatusModelResponse fetchProposal(String id) throws ApiException {
        ApiResponse<RetailMediaExternalv1ProposalStatusModelResponse> localVarResp = fetchProposalWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the status of a proposal to modify a Preferred Deal Line Item.
     * @param id The external id of a line item. (required)
     * @return ApiResponse&lt;RetailMediaExternalv1ProposalStatusModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetailMediaExternalv1ProposalStatusModelResponse> fetchProposalWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchProposalValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ProposalStatusModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the status of a proposal to modify a Preferred Deal Line Item.
     * @param id The external id of a line item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProposalAsync(String id, final ApiCallback<RetailMediaExternalv1ProposalStatusModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProposalValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ProposalStatusModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202207ExternalRetailerByRetailerIdTemplatestemplateId
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdCall(Integer retailerId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailer-id}/templates/{template-id}"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()))
            .replace("{" + "template-id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdValidateBeforeCall(Integer retailerId, Integer templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApi202207ExternalRetailerByRetailerIdTemplatestemplateId(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getApi202207ExternalRetailerByRetailerIdTemplatestemplateId(Async)");
        }

        return getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdCall(retailerId, templateId, _callback);

    }

    /**
     * 
     * Gets the template for the specified retailer id and template id
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @return TemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public TemplateResponse getApi202207ExternalRetailerByRetailerIdTemplatestemplateId(Integer retailerId, Integer templateId) throws ApiException {
        ApiResponse<TemplateResponse> localVarResp = getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdWithHttpInfo(retailerId, templateId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the template for the specified retailer id and template id
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @return ApiResponse&lt;TemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateResponse> getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdWithHttpInfo(Integer retailerId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdValidateBeforeCall(retailerId, templateId, null);
        Type localVarReturnType = new TypeToken<TemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the template for the specified retailer id and template id
     * @param retailerId Retailer Id (required)
     * @param templateId Template Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Template found for the retailer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdAsync(Integer retailerId, Integer templateId, final ApiCallback<TemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdValidateBeforeCall(retailerId, templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202207ExternalRetailerTemplatesByRetailerId
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202207ExternalRetailerTemplatesByRetailerIdCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailer-id}/templates"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202207ExternalRetailerTemplatesByRetailerIdValidateBeforeCall(Integer retailerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApi202207ExternalRetailerTemplatesByRetailerId(Async)");
        }

        return getApi202207ExternalRetailerTemplatesByRetailerIdCall(retailerId, _callback);

    }

    /**
     * 
     * Get retailer creative templates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @return TemplateListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public TemplateListResponse getApi202207ExternalRetailerTemplatesByRetailerId(Integer retailerId) throws ApiException {
        ApiResponse<TemplateListResponse> localVarResp = getApi202207ExternalRetailerTemplatesByRetailerIdWithHttpInfo(retailerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get retailer creative templates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @return ApiResponse&lt;TemplateListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateListResponse> getApi202207ExternalRetailerTemplatesByRetailerIdWithHttpInfo(Integer retailerId) throws ApiException {
        okhttp3.Call localVarCall = getApi202207ExternalRetailerTemplatesByRetailerIdValidateBeforeCall(retailerId, null);
        Type localVarReturnType = new TypeToken<TemplateListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get retailer creative templates
     * @param retailerId External retailer id to retrieve creative templates for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Templates found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202207ExternalRetailerTemplatesByRetailerIdAsync(Integer retailerId, final ApiCallback<TemplateListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202207ExternalRetailerTemplatesByRetailerIdValidateBeforeCall(retailerId, _callback);
        Type localVarReturnType = new TypeToken<TemplateListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202210ExternalAccountByAccountIdCreativescreativeId
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalAccountByAccountIdCreativescreativeIdCall(String accountId, String creativeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives/{creative-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "creative-id" + "}", localVarApiClient.escapeString(creativeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202210ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(String accountId, String creativeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApi202210ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        // verify the required parameter 'creativeId' is set
        if (creativeId == null) {
            throw new ApiException("Missing the required parameter 'creativeId' when calling getApi202210ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        return getApi202210ExternalAccountByAccountIdCreativescreativeIdCall(accountId, creativeId, _callback);

    }

    /**
     * 
     * Get the specified creative
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @return Creative202210Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public Creative202210Response getApi202210ExternalAccountByAccountIdCreativescreativeId(String accountId, String creativeId) throws ApiException {
        ApiResponse<Creative202210Response> localVarResp = getApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(accountId, creativeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the specified creative
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @return ApiResponse&lt;Creative202210Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202210Response> getApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(String accountId, String creativeId) throws ApiException {
        okhttp3.Call localVarCall = getApi202210ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, null);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the specified creative
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalAccountByAccountIdCreativescreativeIdAsync(String accountId, String creativeId, final ApiCallback<Creative202210Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202210ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, _callback);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202210ExternalLineItemProductButtonsByLineItemId
     * @param lineItemId Long external id of the associated line item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202210ExternalLineItemProductButtonsByLineItemId(Async)");
        }

        return getApi202210ExternalLineItemProductButtonsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Get all the product buttons associated with a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @return ProductButtonListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonListResponse getApi202210ExternalLineItemProductButtonsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<ProductButtonListResponse> localVarResp = getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the product buttons associated with a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @return ApiResponse&lt;ProductButtonListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonListResponse> getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the product buttons associated with a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdAsync(String lineItemId, final ApiCallback<ProductButtonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()))
            .replace("{" + "product-button-id" + "}", localVarApiClient.escapeString(productButtonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        // verify the required parameter 'productButtonId' is set
        if (productButtonId == null) {
            throw new ApiException("Missing the required parameter 'productButtonId' when calling getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        return getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(lineItemId, productButtonId, _callback);

    }

    /**
     * 
     * Get a single product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @return ProductButtonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonResponse getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(String lineItemId, String productButtonId) throws ApiException {
        ApiResponse<ProductButtonResponse> localVarResp = getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(lineItemId, productButtonId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @return ApiResponse&lt;ProductButtonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonResponse> getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(String lineItemId, String productButtonId) throws ApiException {
        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, null);
        Type localVarReturnType = new TypeToken<ProductButtonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync(String lineItemId, String productButtonId, final ApiCallback<ProductButtonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202301ExternalLineItemBidMultipliersByLineItemId
     * @param lineItemId Long external id of the associated line item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202301ExternalLineItemBidMultipliersByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/bid-multipliers"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202301ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202301ExternalLineItemBidMultipliersByLineItemId(Async)");
        }

        return getApi202301ExternalLineItemBidMultipliersByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Get bid multipliers by line item
     * @param lineItemId Long external id of the associated line item (required)
     * @return JsonApiSingleResponseOfLineItemBidMultipliers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfLineItemBidMultipliers getApi202301ExternalLineItemBidMultipliersByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfLineItemBidMultipliers> localVarResp = getApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get bid multipliers by line item
     * @param lineItemId Long external id of the associated line item (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfLineItemBidMultipliers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfLineItemBidMultipliers> getApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202301ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItemBidMultipliers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get bid multipliers by line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202301ExternalLineItemBidMultipliersByLineItemIdAsync(String lineItemId, final ApiCallback<JsonApiSingleResponseOfLineItemBidMultipliers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202301ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItemBidMultipliers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV0ExternalCatalogOutputByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogOutputByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/{catalogId}/output"
            .replace("{" + "catalogId" + "}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-json-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV0ExternalCatalogOutputByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV0ExternalCatalogOutputByCatalogId(Async)");
        }

        return getApiV0ExternalCatalogOutputByCatalogIdCall(catalogId, _callback);

    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public void getApiV0ExternalCatalogOutputByCatalogId(String catalogId) throws ApiException {
        getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo(catalogId);
    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV0ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogOutputByCatalogIdAsync(String catalogId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV0ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV0ExternalCatalogStatusByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogStatusByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/{catalogId}/status"
            .replace("{" + "catalogId" + "}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV0ExternalCatalogStatusByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV0ExternalCatalogStatusByCatalogId(Async)");
        }

        return getApiV0ExternalCatalogStatusByCatalogIdCall(catalogId, _callback);

    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus getApiV0ExternalCatalogStatusByCatalogId(String catalogId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV0ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogStatusByCatalogIdAsync(String catalogId, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV0ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountBrandsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/brands"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountBrandsByAccountId(Async)");
        }

        return getApiV1ExternalAccountBrandsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfBrand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfBrand getApiV1ExternalAccountBrandsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfBrand> localVarResp = getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfBrand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfBrand> getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfBrand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountRetailersByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/retailers"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountRetailersByAccountId(Async)");
        }

        return getApiV1ExternalAccountRetailersByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfRetailer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfRetailer getApiV1ExternalAccountRetailersByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfRetailer> localVarResp = getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfRetailer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfRetailer> getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfRetailer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccounts
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountsValidateBeforeCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getApiV1ExternalAccountsCall(limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfAccount getApiV1ExternalAccounts(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfAccount> localVarResp = getApiV1ExternalAccountsWithHttpInfo(limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfAccount> getApiV1ExternalAccountsWithHttpInfo(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsAsync(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerBrandsByRetailerId
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerBrandsByRetailerIdCall(Integer retailerId, String skuStockTypeFilter, String brandType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailerId}/brands"
            .replace("{" + "retailerId" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skuStockTypeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku-stock-type-filter", skuStockTypeFilter));
        }

        if (brandType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand-type", brandType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerBrandsByRetailerIdValidateBeforeCall(Integer retailerId, String skuStockTypeFilter, String brandType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerBrandsByRetailerId(Async)");
        }

        return getApiV1ExternalRetailerBrandsByRetailerIdCall(retailerId, skuStockTypeFilter, brandType, _callback);

    }

    /**
     * 
     * Gets the brands for the given retailer
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @return BrandPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public BrandPreviewListResponse getApiV1ExternalRetailerBrandsByRetailerId(Integer retailerId, String skuStockTypeFilter, String brandType) throws ApiException {
        ApiResponse<BrandPreviewListResponse> localVarResp = getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo(retailerId, skuStockTypeFilter, brandType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the brands for the given retailer
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @return ApiResponse&lt;BrandPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandPreviewListResponse> getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo(Integer retailerId, String skuStockTypeFilter, String brandType) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerBrandsByRetailerIdValidateBeforeCall(retailerId, skuStockTypeFilter, brandType, null);
        Type localVarReturnType = new TypeToken<BrandPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the brands for the given retailer
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerBrandsByRetailerIdAsync(Integer retailerId, String skuStockTypeFilter, String brandType, final ApiCallback<BrandPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerBrandsByRetailerIdValidateBeforeCall(retailerId, skuStockTypeFilter, brandType, _callback);
        Type localVarReturnType = new TypeToken<BrandPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerByRetailerIdSellerBySeller
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerCall(Integer retailerId, String seller, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailerId}/sellers/{seller}"
            .replace("{" + "retailerId" + "}", localVarApiClient.escapeString(retailerId.toString()))
            .replace("{" + "seller" + "}", localVarApiClient.escapeString(seller.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(Integer retailerId, String seller, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller(Async)");
        }

        // verify the required parameter 'seller' is set
        if (seller == null) {
            throw new ApiException("Missing the required parameter 'seller' when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller(Async)");
        }

        return getApiV1ExternalRetailerByRetailerIdSellerBySellerCall(retailerId, seller, _callback);

    }

    /**
     * 
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @return SellerPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public SellerPreviewResponse getApiV1ExternalRetailerByRetailerIdSellerBySeller(Integer retailerId, String seller) throws ApiException {
        ApiResponse<SellerPreviewResponse> localVarResp = getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo(retailerId, seller);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @return ApiResponse&lt;SellerPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerPreviewResponse> getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo(Integer retailerId, String seller) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(retailerId, seller, null);
        Type localVarReturnType = new TypeToken<SellerPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync(Integer retailerId, String seller, final ApiCallback<SellerPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(retailerId, seller, _callback);
        Type localVarReturnType = new TypeToken<SellerPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerCategoryCpcRatesByRetailerId
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdCall(String retailerId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailer-id}/cpc-rates"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdValidateBeforeCall(String retailerId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerCategoryCpcRatesByRetailerId(Async)");
        }

        return getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdCall(retailerId, fields, _callback);

    }

    /**
     * 
     * Gets the minimum cpc bid for the retailer, and optionally the categories under the retailer
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @return CpcRateCardPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CpcRateCardPreviewResponse getApiV1ExternalRetailerCategoryCpcRatesByRetailerId(String retailerId, List<String> fields) throws ApiException {
        ApiResponse<CpcRateCardPreviewResponse> localVarResp = getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo(retailerId, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the minimum cpc bid for the retailer, and optionally the categories under the retailer
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @return ApiResponse&lt;CpcRateCardPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CpcRateCardPreviewResponse> getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo(String retailerId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdValidateBeforeCall(retailerId, fields, null);
        Type localVarReturnType = new TypeToken<CpcRateCardPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the minimum cpc bid for the retailer, and optionally the categories under the retailer
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsync(String retailerId, List<String> fields, final ApiCallback<CpcRateCardPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdValidateBeforeCall(retailerId, fields, _callback);
        Type localVarReturnType = new TypeToken<CpcRateCardPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerPlacementsByRetailerId
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerPlacementsByRetailerIdCall(String retailerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailer-id}/placements"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerPlacementsByRetailerIdValidateBeforeCall(String retailerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerPlacementsByRetailerId(Async)");
        }

        return getApiV1ExternalRetailerPlacementsByRetailerIdCall(retailerId, _callback);

    }

    /**
     * 
     * Gets all placement information for the given retailer
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @return PlacementPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public PlacementPreviewListResponse getApiV1ExternalRetailerPlacementsByRetailerId(String retailerId) throws ApiException {
        ApiResponse<PlacementPreviewListResponse> localVarResp = getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo(retailerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all placement information for the given retailer
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @return ApiResponse&lt;PlacementPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlacementPreviewListResponse> getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo(String retailerId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerPlacementsByRetailerIdValidateBeforeCall(retailerId, null);
        Type localVarReturnType = new TypeToken<PlacementPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all placement information for the given retailer
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerPlacementsByRetailerIdAsync(String retailerId, final ApiCallback<PlacementPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerPlacementsByRetailerIdValidateBeforeCall(retailerId, _callback);
        Type localVarReturnType = new TypeToken<PlacementPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202210ExternalAccountCreativesByAccountId
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalAccountCreativesByAccountIdCall(String accountId, CreativeCreateModel202207 creativeCreateModel202207, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creativeCreateModel202207;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202210ExternalAccountCreativesByAccountIdValidateBeforeCall(String accountId, CreativeCreateModel202207 creativeCreateModel202207, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApi202210ExternalAccountCreativesByAccountId(Async)");
        }

        return postApi202210ExternalAccountCreativesByAccountIdCall(accountId, creativeCreateModel202207, _callback);

    }

    /**
     * 
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @return Creative202210Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public Creative202210Response postApi202210ExternalAccountCreativesByAccountId(String accountId, CreativeCreateModel202207 creativeCreateModel202207) throws ApiException {
        ApiResponse<Creative202210Response> localVarResp = postApi202210ExternalAccountCreativesByAccountIdWithHttpInfo(accountId, creativeCreateModel202207);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @return ApiResponse&lt;Creative202210Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202210Response> postApi202210ExternalAccountCreativesByAccountIdWithHttpInfo(String accountId, CreativeCreateModel202207 creativeCreateModel202207) throws ApiException {
        okhttp3.Call localVarCall = postApi202210ExternalAccountCreativesByAccountIdValidateBeforeCall(accountId, creativeCreateModel202207, null);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel202207 The creative to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalAccountCreativesByAccountIdAsync(String accountId, CreativeCreateModel202207 creativeCreateModel202207, final ApiCallback<Creative202210Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202210ExternalAccountCreativesByAccountIdValidateBeforeCall(accountId, creativeCreateModel202207, _callback);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202210ExternalAccountCreativesSearchByAccountId
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalAccountCreativesSearchByAccountIdCall(String accountId, List<String> creativeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives/search"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (creativeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "creative-ids", creativeIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202210ExternalAccountCreativesSearchByAccountIdValidateBeforeCall(String accountId, List<String> creativeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApi202210ExternalAccountCreativesSearchByAccountId(Async)");
        }

        return postApi202210ExternalAccountCreativesSearchByAccountIdCall(accountId, creativeIds, _callback);

    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @return Creative202210ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public Creative202210ListResponse postApi202210ExternalAccountCreativesSearchByAccountId(String accountId, List<String> creativeIds) throws ApiException {
        ApiResponse<Creative202210ListResponse> localVarResp = postApi202210ExternalAccountCreativesSearchByAccountIdWithHttpInfo(accountId, creativeIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @return ApiResponse&lt;Creative202210ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202210ListResponse> postApi202210ExternalAccountCreativesSearchByAccountIdWithHttpInfo(String accountId, List<String> creativeIds) throws ApiException {
        okhttp3.Call localVarCall = postApi202210ExternalAccountCreativesSearchByAccountIdValidateBeforeCall(accountId, creativeIds, null);
        Type localVarReturnType = new TypeToken<Creative202210ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalAccountCreativesSearchByAccountIdAsync(String accountId, List<String> creativeIds, final ApiCallback<Creative202210ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202210ExternalAccountCreativesSearchByAccountIdValidateBeforeCall(accountId, creativeIds, _callback);
        Type localVarReturnType = new TypeToken<Creative202210ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202210ExternalLineItemProductButtonsCreateByLineItemId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalLineItemProductButtonsCreateByLineItemIdCall(String lineItemId, ProductButtonListRequest productButtonListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productButtonListRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/create"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202210ExternalLineItemProductButtonsCreateByLineItemIdValidateBeforeCall(String lineItemId, ProductButtonListRequest productButtonListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202210ExternalLineItemProductButtonsCreateByLineItemId(Async)");
        }

        return postApi202210ExternalLineItemProductButtonsCreateByLineItemIdCall(lineItemId, productButtonListRequest, _callback);

    }

    /**
     * 
     * Append new product buttons to a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @return ProductButtonListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonListResponse postApi202210ExternalLineItemProductButtonsCreateByLineItemId(String lineItemId, ProductButtonListRequest productButtonListRequest) throws ApiException {
        ApiResponse<ProductButtonListResponse> localVarResp = postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo(lineItemId, productButtonListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Append new product buttons to a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @return ApiResponse&lt;ProductButtonListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonListResponse> postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo(String lineItemId, ProductButtonListRequest productButtonListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202210ExternalLineItemProductButtonsCreateByLineItemIdValidateBeforeCall(lineItemId, productButtonListRequest, null);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Append new product buttons to a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsync(String lineItemId, ProductButtonListRequest productButtonListRequest, final ApiCallback<ProductButtonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202210ExternalLineItemProductButtonsCreateByLineItemIdValidateBeforeCall(lineItemId, productButtonListRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV0ExternalAccountCatalogsByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV0ExternalAccountCatalogsByAccountIdCall(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jsonApiRequestOfCatalogRequestPreview;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/catalogs"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV0ExternalAccountCatalogsByAccountIdValidateBeforeCall(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV0ExternalAccountCatalogsByAccountId(Async)");
        }

        return postApiV0ExternalAccountCatalogsByAccountIdCall(accountId, jsonApiRequestOfCatalogRequestPreview, _callback);

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus postApiV0ExternalAccountCatalogsByAccountId(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo(accountId, jsonApiRequestOfCatalogRequestPreview);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview) throws ApiException {
        okhttp3.Call localVarCall = postApiV0ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequestPreview, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV0ExternalAccountCatalogsByAccountIdAsync(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV0ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequestPreview, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuRetrieval
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalCall(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-retrieval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        return postApiV1ExternalCatalogsSkuRetrievalCall(pageIndex, pageSize, requestBody, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @return SkuDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuDataPreviewListResponse postApiV1ExternalCatalogsSkuRetrieval(Integer pageIndex, Integer pageSize, List<String> requestBody) throws ApiException {
        ApiResponse<SkuDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo(pageIndex, pageSize, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @return ApiResponse&lt;SkuDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuDataPreviewListResponse> postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo(Integer pageIndex, Integer pageSize, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(pageIndex, pageSize, requestBody, null);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalAsync(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback<SkuDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(pageIndex, pageSize, requestBody, _callback);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearch
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchCall(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skuSearchRequestPreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback _callback) throws ApiException {
        return postApiV1ExternalCatalogsSkuSearchCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @return SkuDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuDataPreviewListResponse postApiV1ExternalCatalogsSkuSearch(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest) throws ApiException {
        ApiResponse<SkuDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchWithHttpInfo(pageIndex, pageSize, skuSearchRequestPreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @return ApiResponse&lt;SkuDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuDataPreviewListResponse> postApiV1ExternalCatalogsSkuSearchWithHttpInfo(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAsync(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback<SkuDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdCall(String accountId, String retailerId, Integer offset, Integer limit, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skuSearchRequestSlimPreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-search/accounts/{account-id}/retailers/{retailer-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdValidateBeforeCall(String accountId, String retailerId, Integer offset, Integer limit, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId(Async)");
        }

        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId(Async)");
        }

        return postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdCall(accountId, retailerId, offset, limit, skuSearchRequestSlimPreviewRequest, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text, account and retailer with an option to filter by brands id&#39;s.
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @return SkuSlimDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuSlimDataPreviewListResponse postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId(String accountId, String retailerId, Integer offset, Integer limit, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest) throws ApiException {
        ApiResponse<SkuSlimDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo(accountId, retailerId, offset, limit, skuSearchRequestSlimPreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, account and retailer with an option to filter by brands id&#39;s.
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @return ApiResponse&lt;SkuSlimDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuSlimDataPreviewListResponse> postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo(String accountId, String retailerId, Integer offset, Integer limit, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdValidateBeforeCall(accountId, retailerId, offset, limit, skuSearchRequestSlimPreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuSlimDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, account and retailer with an option to filter by brands id&#39;s.
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsync(String accountId, String retailerId, Integer offset, Integer limit, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest, final ApiCallback<SkuSlimDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdValidateBeforeCall(accountId, retailerId, offset, limit, skuSearchRequestSlimPreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuSlimDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdCall(String retailerId, String xOriginAccount, Integer offset, Integer limit, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skuSearchRequestSlimV2PreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku/search/retailers/{retailer-id}"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xOriginAccount != null) {
            localVarHeaderParams.put("X-Origin-Account", localVarApiClient.parameterToString(xOriginAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdValidateBeforeCall(String retailerId, String xOriginAccount, Integer offset, Integer limit, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId(Async)");
        }

        return postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdCall(retailerId, xOriginAccount, offset, limit, skuSearchRequestSlimV2PreviewRequest, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text for a retailer with an option to filter by brands id&#39;s.
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @return SkuSlimDataV2ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuSlimDataV2ListResponse postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId(String retailerId, String xOriginAccount, Integer offset, Integer limit, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest) throws ApiException {
        ApiResponse<SkuSlimDataV2ListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo(retailerId, xOriginAccount, offset, limit, skuSearchRequestSlimV2PreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text for a retailer with an option to filter by brands id&#39;s.
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @return ApiResponse&lt;SkuSlimDataV2ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuSlimDataV2ListResponse> postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo(String retailerId, String xOriginAccount, Integer offset, Integer limit, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdValidateBeforeCall(retailerId, xOriginAccount, offset, limit, skuSearchRequestSlimV2PreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuSlimDataV2ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text for a retailer with an option to filter by brands id&#39;s.
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsync(String retailerId, String xOriginAccount, Integer offset, Integer limit, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest, final ApiCallback<SkuSlimDataV2ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdValidateBeforeCall(retailerId, xOriginAccount, offset, limit, skuSearchRequestSlimV2PreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuSlimDataV2ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202210ExternalAccountByAccountIdCreativescreativeId
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202210ExternalAccountByAccountIdCreativescreativeIdCall(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creativeUpdateModel202207;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives/{creative-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "creative-id" + "}", localVarApiClient.escapeString(creativeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202210ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling putApi202210ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        // verify the required parameter 'creativeId' is set
        if (creativeId == null) {
            throw new ApiException("Missing the required parameter 'creativeId' when calling putApi202210ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        return putApi202210ExternalAccountByAccountIdCreativescreativeIdCall(accountId, creativeId, creativeUpdateModel202207, _callback);

    }

    /**
     * 
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @return Creative202210Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public Creative202210Response putApi202210ExternalAccountByAccountIdCreativescreativeId(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207) throws ApiException {
        ApiResponse<Creative202210Response> localVarResp = putApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(accountId, creativeId, creativeUpdateModel202207);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @return ApiResponse&lt;Creative202210Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative202210Response> putApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207) throws ApiException {
        okhttp3.Call localVarCall = putApi202210ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, creativeUpdateModel202207, null);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel202207 The creative to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202210ExternalAccountByAccountIdCreativescreativeIdAsync(String accountId, String creativeId, CreativeUpdateModel202207 creativeUpdateModel202207, final ApiCallback<Creative202210Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202210ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, creativeUpdateModel202207, _callback);
        Type localVarReturnType = new TypeToken<Creative202210Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productButtonRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()))
            .replace("{" + "product-button-id" + "}", localVarApiClient.escapeString(productButtonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        // verify the required parameter 'productButtonId' is set
        if (productButtonId == null) {
            throw new ApiException("Missing the required parameter 'productButtonId' when calling putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        return putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(lineItemId, productButtonId, productButtonRequest, _callback);

    }

    /**
     * 
     * Update a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @return ProductButtonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonResponse putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest) throws ApiException {
        ApiResponse<ProductButtonResponse> localVarResp = putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(lineItemId, productButtonId, productButtonRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @return ApiResponse&lt;ProductButtonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonResponse> putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest) throws ApiException {
        okhttp3.Call localVarCall = putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, productButtonRequest, null);
        Type localVarReturnType = new TypeToken<ProductButtonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest, final ApiCallback<ProductButtonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, productButtonRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202301ExternalLineItemBidMultipliersByLineItemId
     * @param lineItemId Long external id of the associated line item (required)
     * @param lineItemBidMultipliersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202301ExternalLineItemBidMultipliersByLineItemIdCall(String lineItemId, LineItemBidMultipliersRequest lineItemBidMultipliersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lineItemBidMultipliersRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/bid-multipliers"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202301ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(String lineItemId, LineItemBidMultipliersRequest lineItemBidMultipliersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202301ExternalLineItemBidMultipliersByLineItemId(Async)");
        }

        return putApi202301ExternalLineItemBidMultipliersByLineItemIdCall(lineItemId, lineItemBidMultipliersRequest, _callback);

    }

    /**
     * 
     * Replace bid multipliers on a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param lineItemBidMultipliersRequest  (optional)
     * @return LineItemBidMultipliersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LineItemBidMultipliersResponse putApi202301ExternalLineItemBidMultipliersByLineItemId(String lineItemId, LineItemBidMultipliersRequest lineItemBidMultipliersRequest) throws ApiException {
        ApiResponse<LineItemBidMultipliersResponse> localVarResp = putApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(lineItemId, lineItemBidMultipliersRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Replace bid multipliers on a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param lineItemBidMultipliersRequest  (optional)
     * @return ApiResponse&lt;LineItemBidMultipliersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LineItemBidMultipliersResponse> putApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(String lineItemId, LineItemBidMultipliersRequest lineItemBidMultipliersRequest) throws ApiException {
        okhttp3.Call localVarCall = putApi202301ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, lineItemBidMultipliersRequest, null);
        Type localVarReturnType = new TypeToken<LineItemBidMultipliersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replace bid multipliers on a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param lineItemBidMultipliersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202301ExternalLineItemBidMultipliersByLineItemIdAsync(String lineItemId, LineItemBidMultipliersRequest lineItemBidMultipliersRequest, final ApiCallback<LineItemBidMultipliersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202301ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, lineItemBidMultipliersRequest, _callback);
        Type localVarReturnType = new TypeToken<LineItemBidMultipliersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setKeywordBids
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1SetBidsModelRequest Object containing a list of bid overrides for associated keywords (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setKeywordBidsCall(String id, RetailMediaExternalv1SetBidsModelRequest retailMediaExternalv1SetBidsModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retailMediaExternalv1SetBidsModelRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{id}/keywords/set-bid"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setKeywordBidsValidateBeforeCall(String id, RetailMediaExternalv1SetBidsModelRequest retailMediaExternalv1SetBidsModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setKeywordBids(Async)");
        }

        return setKeywordBidsCall(id, retailMediaExternalv1SetBidsModelRequest, _callback);

    }

    /**
     * 
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1SetBidsModelRequest Object containing a list of bid overrides for associated keywords (optional)
     * @return RetailMediaExternalv1ResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RetailMediaExternalv1ResourceOutcome setKeywordBids(String id, RetailMediaExternalv1SetBidsModelRequest retailMediaExternalv1SetBidsModelRequest) throws ApiException {
        ApiResponse<RetailMediaExternalv1ResourceOutcome> localVarResp = setKeywordBidsWithHttpInfo(id, retailMediaExternalv1SetBidsModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1SetBidsModelRequest Object containing a list of bid overrides for associated keywords (optional)
     * @return ApiResponse&lt;RetailMediaExternalv1ResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetailMediaExternalv1ResourceOutcome> setKeywordBidsWithHttpInfo(String id, RetailMediaExternalv1SetBidsModelRequest retailMediaExternalv1SetBidsModelRequest) throws ApiException {
        okhttp3.Call localVarCall = setKeywordBidsValidateBeforeCall(id, retailMediaExternalv1SetBidsModelRequest, null);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id Long external id of the associated line item (required)
     * @param retailMediaExternalv1SetBidsModelRequest Object containing a list of bid overrides for associated keywords (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setKeywordBidsAsync(String id, RetailMediaExternalv1SetBidsModelRequest retailMediaExternalv1SetBidsModelRequest, final ApiCallback<RetailMediaExternalv1ResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = setKeywordBidsValidateBeforeCall(id, retailMediaExternalv1SetBidsModelRequest, _callback);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitProposal
     * @param id The external id of a line item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitProposalCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/preferred-deal-line-items/{id}/proposal/submit"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitProposalValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling submitProposal(Async)");
        }

        return submitProposalCall(id, _callback);

    }

    /**
     * 
     * Submit a proposal to modify a Preferred Deal Line Item for review.
     * @param id The external id of a line item. (required)
     * @return RetailMediaExternalv1ProposalStatusModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RetailMediaExternalv1ProposalStatusModelResponse submitProposal(String id) throws ApiException {
        ApiResponse<RetailMediaExternalv1ProposalStatusModelResponse> localVarResp = submitProposalWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit a proposal to modify a Preferred Deal Line Item for review.
     * @param id The external id of a line item. (required)
     * @return ApiResponse&lt;RetailMediaExternalv1ProposalStatusModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetailMediaExternalv1ProposalStatusModelResponse> submitProposalWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = submitProposalValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ProposalStatusModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit a proposal to modify a Preferred Deal Line Item for review.
     * @param id The external id of a line item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitProposalAsync(String id, final ApiCallback<RetailMediaExternalv1ProposalStatusModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitProposalValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RetailMediaExternalv1ProposalStatusModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
