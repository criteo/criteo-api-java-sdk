/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.api;

import com.criteo.api.retailmedia.preview.ApiCallback;
import com.criteo.api.retailmedia.preview.ApiClient;
import com.criteo.api.retailmedia.preview.ApiException;
import com.criteo.api.retailmedia.preview.ApiResponse;
import com.criteo.api.retailmedia.preview.Configuration;
import com.criteo.api.retailmedia.preview.Pair;
import com.criteo.api.retailmedia.preview.ProgressRequestBody;
import com.criteo.api.retailmedia.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.preview.model.AddRemoveKeywordsModelRequest;
import com.criteo.api.retailmedia.preview.model.BrandPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.CpcRateCardPreviewResponse;
import com.criteo.api.retailmedia.preview.model.Creative2ListResponse;
import com.criteo.api.retailmedia.preview.model.Creative2Response;
import com.criteo.api.retailmedia.preview.model.CreativeCreateModel2;
import com.criteo.api.retailmedia.preview.model.CreativeUpdateModel2;
import com.criteo.api.retailmedia.preview.model.EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata;
import com.criteo.api.retailmedia.preview.model.EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata;
import com.criteo.api.retailmedia.preview.model.EntityResourceOutcomeOfCatalogStatusV2;
import com.criteo.api.retailmedia.preview.model.JsonApiSingleResponseOfLineItemBidMultipliersV2;
import com.criteo.api.retailmedia.preview.model.KeywordsModelResponse;
import com.criteo.api.retailmedia.preview.model.LineItemBidMultipliersV2Request;
import com.criteo.api.retailmedia.preview.model.LineItemBidMultipliersV2Response;
import com.criteo.api.retailmedia.preview.model.PlacementPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.PreferredLineItemCreateModelV2Request;
import com.criteo.api.retailmedia.preview.model.PreferredLineItemUpdateModelV2Request;
import com.criteo.api.retailmedia.preview.model.PreferredLineItemV2PagedListResponse;
import com.criteo.api.retailmedia.preview.model.PreferredLineItemV2Response;
import com.criteo.api.retailmedia.preview.model.ProductButtonListRequest;
import com.criteo.api.retailmedia.preview.model.ProductButtonListResponse;
import com.criteo.api.retailmedia.preview.model.ProductButtonRequest;
import com.criteo.api.retailmedia.preview.model.ProductResourceOutcome;
import com.criteo.api.retailmedia.preview.model.PromotedProductResourceCollectionInput;
import com.criteo.api.retailmedia.preview.model.PromotedProductResourceCollectionOutcome;
import com.criteo.api.retailmedia.preview.model.ResourceOutcome;
import com.criteo.api.retailmedia.preview.model.SellerPreviewResponse;
import com.criteo.api.retailmedia.preview.model.SetBidsModelRequest;
import com.criteo.api.retailmedia.preview.model.SkuDataPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestPreviewRequest;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestSlimPreviewRequest;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestSlimV2PreviewRequest;
import com.criteo.api.retailmedia.preview.model.SkuSlimDataPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.SkuSlimDataV2ListResponse;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputBrandIdSearchRequest;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputCpcMinBidsRequest;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputOfBrandCatalogRequestV2;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputOfSellerCatalogRequestV2;
import com.criteo.api.retailmedia.preview.model.ValueResourceInputRetailMediaKeywordsReview;
import com.criteo.api.retailmedia.preview.model.ValueResourceOutcomeCpcMinBidsResponse;
import com.criteo.api.retailmedia.preview.model.ValueResourceOutcomeOfRecommendedKeywordsResult;
import com.criteo.api.retailmedia.preview.model.ValueResourceOutcomeRetailMediaKeywordsReviewResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addRemoveKeywords
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveKeywordsCall(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRemoveKeywordsModelRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{id}/keywords/add-remove"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRemoveKeywordsValidateBeforeCall(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRemoveKeywords(Async)");
        }

        return addRemoveKeywordsCall(id, addRemoveKeywordsModelRequest, _callback);

    }

    /**
     * 
     * Add or Remove keywords from the line item in bulk
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @return ResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcome addRemoveKeywords(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest) throws ApiException {
        ApiResponse<ResourceOutcome> localVarResp = addRemoveKeywordsWithHttpInfo(id, addRemoveKeywordsModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add or Remove keywords from the line item in bulk
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @return ApiResponse&lt;ResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcome> addRemoveKeywordsWithHttpInfo(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest) throws ApiException {
        okhttp3.Call localVarCall = addRemoveKeywordsValidateBeforeCall(id, addRemoveKeywordsModelRequest, null);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add or Remove keywords from the line item in bulk
     * @param id ID of the line item (required)
     * @param addRemoveKeywordsModelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveKeywordsAsync(String id, AddRemoveKeywordsModelRequest addRemoveKeywordsModelRequest, final ApiCallback<ResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRemoveKeywordsValidateBeforeCall(id, addRemoveKeywordsModelRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendPromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendPromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/products/append"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendPromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling appendPromotedProducts(Async)");
        }

        return appendPromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Append a collection of promoted products to a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ProductResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public ProductResourceOutcome appendPromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        ApiResponse<ProductResourceOutcome> localVarResp = appendPromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Append a collection of promoted products to a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;ProductResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductResourceOutcome> appendPromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = appendPromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        Type localVarReturnType = new TypeToken<ProductResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Append a collection of promoted products to a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products appended to the line item with warnings </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Promoted products appended to the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendPromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<ProductResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendPromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        Type localVarReturnType = new TypeToken<ProductResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()))
            .replace("{" + "product-button-id" + "}", localVarApiClient.escapeString(productButtonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        // verify the required parameter 'productButtonId' is set
        if (productButtonId == null) {
            throw new ApiException("Missing the required parameter 'productButtonId' when calling deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        return deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(lineItemId, productButtonId, _callback);

    }

    /**
     * 
     * Delete a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(String lineItemId, String productButtonId) throws ApiException {
        deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(lineItemId, productButtonId);
    }

    /**
     * 
     * Delete a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(String lineItemId, String productButtonId) throws ApiException {
        okhttp3.Call localVarCall = deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync(String lineItemId, String productButtonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/products/delete"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deletePromotedProducts(Async)");
        }

        return deletePromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Remove a collection of promoted products from a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public void deletePromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        deletePromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
    }

    /**
     * 
     * Remove a collection of promoted products from a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = deletePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a collection of promoted products from a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products removed from the line item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchKeywords
     * @param id ID of the line item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchKeywordsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{id}/keywords"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchKeywordsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchKeywords(Async)");
        }

        return fetchKeywordsCall(id, _callback);

    }

    /**
     * 
     * Fetch keywords associated with the specified line item
     * @param id ID of the line item (required)
     * @return KeywordsModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsModelResponse fetchKeywords(String id) throws ApiException {
        ApiResponse<KeywordsModelResponse> localVarResp = fetchKeywordsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch keywords associated with the specified line item
     * @param id ID of the line item (required)
     * @return ApiResponse&lt;KeywordsModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsModelResponse> fetchKeywordsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchKeywordsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch keywords associated with the specified line item
     * @param id ID of the line item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchKeywordsAsync(String id, final ApiCallback<KeywordsModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchKeywordsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPromotedProducts
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPromotedProductsCall(String lineItemId, String fields, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/products"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPromotedProductsValidateBeforeCall(String lineItemId, String fields, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling fetchPromotedProducts(Async)");
        }

        return fetchPromotedProductsCall(lineItemId, fields, limit, offset, _callback);

    }

    /**
     * 
     * Retrieve a page of promoted products for a line item
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @return PromotedProductResourceCollectionOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public PromotedProductResourceCollectionOutcome fetchPromotedProducts(String lineItemId, String fields, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PromotedProductResourceCollectionOutcome> localVarResp = fetchPromotedProductsWithHttpInfo(lineItemId, fields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a page of promoted products for a line item
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @return ApiResponse&lt;PromotedProductResourceCollectionOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromotedProductResourceCollectionOutcome> fetchPromotedProductsWithHttpInfo(String lineItemId, String fields, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = fetchPromotedProductsValidateBeforeCall(lineItemId, fields, limit, offset, null);
        Type localVarReturnType = new TypeToken<PromotedProductResourceCollectionOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a page of promoted products for a line item
     * @param lineItemId ID of the line item. (required)
     * @param fields A comma separated list of attribute names from the response model to compute and return.              Valid values are &#x60;status&#x60; and &#x60;bidOverride&#x60; in any order. Defaults to &#x60;status&#x60;. (optional)
     * @param limit Maximum page size to fetch. Defaults to 500. (optional)
     * @param offset Offset of the first item to fetch. Defaults to zero. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promoted products associated with the line item </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPromotedProductsAsync(String lineItemId, String fields, Integer limit, Integer offset, final ApiCallback<PromotedProductResourceCollectionOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPromotedProductsValidateBeforeCall(lineItemId, fields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PromotedProductResourceCollectionOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202210ExternalLineItemProductButtonsByLineItemId
     * @param lineItemId Long external id of the associated line item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202210ExternalLineItemProductButtonsByLineItemId(Async)");
        }

        return getApi202210ExternalLineItemProductButtonsByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Get all the product buttons associated with a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @return ProductButtonListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonListResponse getApi202210ExternalLineItemProductButtonsByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<ProductButtonListResponse> localVarResp = getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the product buttons associated with a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @return ApiResponse&lt;ProductButtonListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonListResponse> getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the product buttons associated with a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdAsync(String lineItemId, final ApiCallback<ProductButtonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()))
            .replace("{" + "product-button-id" + "}", localVarApiClient.escapeString(productButtonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(String lineItemId, String productButtonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        // verify the required parameter 'productButtonId' is set
        if (productButtonId == null) {
            throw new ApiException("Missing the required parameter 'productButtonId' when calling getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        return getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(lineItemId, productButtonId, _callback);

    }

    /**
     * 
     * Get a single product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @return ProductButtonListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonListResponse getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(String lineItemId, String productButtonId) throws ApiException {
        ApiResponse<ProductButtonListResponse> localVarResp = getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(lineItemId, productButtonId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @return ApiResponse&lt;ProductButtonListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonListResponse> getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(String lineItemId, String productButtonId) throws ApiException {
        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, null);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync(String lineItemId, String productButtonId, final ApiCallback<ProductButtonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiExternalV2CatalogStatusByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiExternalV2CatalogStatusByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/{catalogId}/status"
            .replace("{" + "catalogId" + "}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiExternalV2CatalogStatusByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiExternalV2CatalogStatusByCatalogId(Async)");
        }

        return getApiExternalV2CatalogStatusByCatalogIdCall(catalogId, _callback);

    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return EntityResourceOutcomeOfCatalogStatusV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomeOfCatalogStatusV2 getApiExternalV2CatalogStatusByCatalogId(String catalogId) throws ApiException {
        ApiResponse<EntityResourceOutcomeOfCatalogStatusV2> localVarResp = getApiExternalV2CatalogStatusByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;EntityResourceOutcomeOfCatalogStatusV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomeOfCatalogStatusV2> getApiExternalV2CatalogStatusByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiExternalV2CatalogStatusByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfCatalogStatusV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiExternalV2CatalogStatusByCatalogIdAsync(String catalogId, final ApiCallback<EntityResourceOutcomeOfCatalogStatusV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiExternalV2CatalogStatusByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfCatalogStatusV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerBrandsByRetailerId
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerBrandsByRetailerIdCall(Integer retailerId, String brandType, String skuStockTypeFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailerId}/brands"
            .replace("{" + "retailerId" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (brandType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand-type", brandType));
        }

        if (skuStockTypeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku-stock-type-filter", skuStockTypeFilter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerBrandsByRetailerIdValidateBeforeCall(Integer retailerId, String brandType, String skuStockTypeFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerBrandsByRetailerId(Async)");
        }

        return getApiV1ExternalRetailerBrandsByRetailerIdCall(retailerId, brandType, skuStockTypeFilter, _callback);

    }

    /**
     * 
     * Gets the brands for the given retailer
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @return BrandPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public BrandPreviewListResponse getApiV1ExternalRetailerBrandsByRetailerId(Integer retailerId, String brandType, String skuStockTypeFilter) throws ApiException {
        ApiResponse<BrandPreviewListResponse> localVarResp = getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo(retailerId, brandType, skuStockTypeFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the brands for the given retailer
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @return ApiResponse&lt;BrandPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandPreviewListResponse> getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo(Integer retailerId, String brandType, String skuStockTypeFilter) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerBrandsByRetailerIdValidateBeforeCall(retailerId, brandType, skuStockTypeFilter, null);
        Type localVarReturnType = new TypeToken<BrandPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the brands for the given retailer
     * @param retailerId The retailer id for which brands should be fetched. (required)
     * @param brandType  Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param skuStockTypeFilter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerBrandsByRetailerIdAsync(Integer retailerId, String brandType, String skuStockTypeFilter, final ApiCallback<BrandPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerBrandsByRetailerIdValidateBeforeCall(retailerId, brandType, skuStockTypeFilter, _callback);
        Type localVarReturnType = new TypeToken<BrandPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerByRetailerIdSellerBySeller
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerCall(Integer retailerId, String seller, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailerId}/sellers/{seller}"
            .replace("{" + "retailerId" + "}", localVarApiClient.escapeString(retailerId.toString()))
            .replace("{" + "seller" + "}", localVarApiClient.escapeString(seller.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(Integer retailerId, String seller, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller(Async)");
        }

        // verify the required parameter 'seller' is set
        if (seller == null) {
            throw new ApiException("Missing the required parameter 'seller' when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller(Async)");
        }

        return getApiV1ExternalRetailerByRetailerIdSellerBySellerCall(retailerId, seller, _callback);

    }

    /**
     * 
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @return SellerPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public SellerPreviewResponse getApiV1ExternalRetailerByRetailerIdSellerBySeller(Integer retailerId, String seller) throws ApiException {
        ApiResponse<SellerPreviewResponse> localVarResp = getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo(retailerId, seller);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @return ApiResponse&lt;SellerPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerPreviewResponse> getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo(Integer retailerId, String seller) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(retailerId, seller, null);
        Type localVarReturnType = new TypeToken<SellerPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync(Integer retailerId, String seller, final ApiCallback<SellerPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(retailerId, seller, _callback);
        Type localVarReturnType = new TypeToken<SellerPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerCategoryCpcRatesByRetailerId
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdCall(String retailerId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailer-id}/cpc-rates"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdValidateBeforeCall(String retailerId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerCategoryCpcRatesByRetailerId(Async)");
        }

        return getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdCall(retailerId, fields, _callback);

    }

    /**
     * 
     * Gets the minimum cpc bid for the retailer, and optionally the categories under the retailer
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @return CpcRateCardPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CpcRateCardPreviewResponse getApiV1ExternalRetailerCategoryCpcRatesByRetailerId(String retailerId, List<String> fields) throws ApiException {
        ApiResponse<CpcRateCardPreviewResponse> localVarResp = getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo(retailerId, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the minimum cpc bid for the retailer, and optionally the categories under the retailer
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @return ApiResponse&lt;CpcRateCardPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CpcRateCardPreviewResponse> getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo(String retailerId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdValidateBeforeCall(retailerId, fields, null);
        Type localVarReturnType = new TypeToken<CpcRateCardPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the minimum cpc bid for the retailer, and optionally the categories under the retailer
     * @param retailerId The retailer id (required)
     * @param fields The fields in the response that is to be included (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> bids found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsync(String retailerId, List<String> fields, final ApiCallback<CpcRateCardPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdValidateBeforeCall(retailerId, fields, _callback);
        Type localVarReturnType = new TypeToken<CpcRateCardPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerPlacementsByRetailerId
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerPlacementsByRetailerIdCall(String retailerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailer-id}/placements"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerPlacementsByRetailerIdValidateBeforeCall(String retailerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerPlacementsByRetailerId(Async)");
        }

        return getApiV1ExternalRetailerPlacementsByRetailerIdCall(retailerId, _callback);

    }

    /**
     * 
     * Gets all placement information for the given retailer
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @return PlacementPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public PlacementPreviewListResponse getApiV1ExternalRetailerPlacementsByRetailerId(String retailerId) throws ApiException {
        ApiResponse<PlacementPreviewListResponse> localVarResp = getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo(retailerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all placement information for the given retailer
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @return ApiResponse&lt;PlacementPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlacementPreviewListResponse> getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo(String retailerId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerPlacementsByRetailerIdValidateBeforeCall(retailerId, null);
        Type localVarReturnType = new TypeToken<PlacementPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all placement information for the given retailer
     * @param retailerId The retailer id for which placements should be fetched. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placements records. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerPlacementsByRetailerIdAsync(String retailerId, final ApiCallback<PlacementPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerPlacementsByRetailerIdValidateBeforeCall(retailerId, _callback);
        Type localVarReturnType = new TypeToken<PlacementPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalAccountByAccountIdCreativescreativeId
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAccountByAccountIdCreativescreativeIdCall(String accountId, String creativeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives/{creative-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "creative-id" + "}", localVarApiClient.escapeString(creativeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(String accountId, String creativeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV2ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        // verify the required parameter 'creativeId' is set
        if (creativeId == null) {
            throw new ApiException("Missing the required parameter 'creativeId' when calling getApiV2ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        return getApiV2ExternalAccountByAccountIdCreativescreativeIdCall(accountId, creativeId, _callback);

    }

    /**
     * 
     * Get the specified creative
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @return Creative2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public Creative2Response getApiV2ExternalAccountByAccountIdCreativescreativeId(String accountId, String creativeId) throws ApiException {
        ApiResponse<Creative2Response> localVarResp = getApiV2ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(accountId, creativeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the specified creative
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @return ApiResponse&lt;Creative2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative2Response> getApiV2ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(String accountId, String creativeId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, null);
        Type localVarReturnType = new TypeToken<Creative2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the specified creative
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeId Creative to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalAccountByAccountIdCreativescreativeIdAsync(String accountId, String creativeId, final ApiCallback<Creative2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, _callback);
        Type localVarReturnType = new TypeToken<Creative2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalCampaignPreferredLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalCampaignPreferredLineItemsByCampaignIdCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/campaigns/{campaign-id}/preferred-line-items"
            .replace("{" + "campaign-id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV2ExternalCampaignPreferredLineItemsByCampaignId(Async)");
        }

        return getApiV2ExternalCampaignPreferredLineItemsByCampaignIdCall(campaignId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of preferred line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return PreferredLineItemV2PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItemV2PagedListResponse getApiV2ExternalCampaignPreferredLineItemsByCampaignId(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<PreferredLineItemV2PagedListResponse> localVarResp = getApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(campaignId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of preferred line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;PreferredLineItemV2PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItemV2PagedListResponse> getApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of preferred line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsync(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<PreferredLineItemV2PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalLineItemBidMultipliersByLineItemId
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalLineItemBidMultipliersByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/bid-multipliers"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalLineItemBidMultipliersByLineItemId(Async)");
        }

        return getApiV2ExternalLineItemBidMultipliersByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Fetch all bid multipliers for a given line item
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @return JsonApiSingleResponseOfLineItemBidMultipliersV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Found </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfLineItemBidMultipliersV2 getApiV2ExternalLineItemBidMultipliersByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfLineItemBidMultipliersV2> localVarResp = getApiV2ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch all bid multipliers for a given line item
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfLineItemBidMultipliersV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfLineItemBidMultipliersV2> getApiV2ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItemBidMultipliersV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch all bid multipliers for a given line item
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalLineItemBidMultipliersByLineItemIdAsync(String lineItemId, final ApiCallback<JsonApiSingleResponseOfLineItemBidMultipliersV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItemBidMultipliersV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV2ExternalPreferredLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalPreferredLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/preferred-line-items/{line-item-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV2ExternalPreferredLineItemByLineItemId(Async)");
        }

        return getApiV2ExternalPreferredLineItemByLineItemIdCall(lineItemId, _callback);

    }

    /**
     * 
     * Gets the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return PreferredLineItemV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItemV2Response getApiV2ExternalPreferredLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<PreferredLineItemV2Response> localVarResp = getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;PreferredLineItemV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItemV2Response> getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV2ExternalPreferredLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<PreferredLineItemV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV2ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCpcMinBidsBySkuIdsV1
     * @param retailerId Retailer Id. (required)
     * @param valueResourceInputCpcMinBidsRequest Cpc minimum bid amount request object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCpcMinBidsBySkuIdsV1Call(Integer retailerId, ValueResourceInputCpcMinBidsRequest valueResourceInputCpcMinBidsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputCpcMinBidsRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailerId}/cpc-min-bids"
            .replace("{" + "retailerId" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCpcMinBidsBySkuIdsV1ValidateBeforeCall(Integer retailerId, ValueResourceInputCpcMinBidsRequest valueResourceInputCpcMinBidsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getCpcMinBidsBySkuIdsV1(Async)");
        }

        return getCpcMinBidsBySkuIdsV1Call(retailerId, valueResourceInputCpcMinBidsRequest, _callback);

    }

    /**
     * 
     * Get overall and individual minimum bid amount for given retailer id and sku id list.
     * @param retailerId Retailer Id. (required)
     * @param valueResourceInputCpcMinBidsRequest Cpc minimum bid amount request object. (optional)
     * @return ValueResourceOutcomeCpcMinBidsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeCpcMinBidsResponse getCpcMinBidsBySkuIdsV1(Integer retailerId, ValueResourceInputCpcMinBidsRequest valueResourceInputCpcMinBidsRequest) throws ApiException {
        ApiResponse<ValueResourceOutcomeCpcMinBidsResponse> localVarResp = getCpcMinBidsBySkuIdsV1WithHttpInfo(retailerId, valueResourceInputCpcMinBidsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get overall and individual minimum bid amount for given retailer id and sku id list.
     * @param retailerId Retailer Id. (required)
     * @param valueResourceInputCpcMinBidsRequest Cpc minimum bid amount request object. (optional)
     * @return ApiResponse&lt;ValueResourceOutcomeCpcMinBidsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeCpcMinBidsResponse> getCpcMinBidsBySkuIdsV1WithHttpInfo(Integer retailerId, ValueResourceInputCpcMinBidsRequest valueResourceInputCpcMinBidsRequest) throws ApiException {
        okhttp3.Call localVarCall = getCpcMinBidsBySkuIdsV1ValidateBeforeCall(retailerId, valueResourceInputCpcMinBidsRequest, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeCpcMinBidsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get overall and individual minimum bid amount for given retailer id and sku id list.
     * @param retailerId Retailer Id. (required)
     * @param valueResourceInputCpcMinBidsRequest Cpc minimum bid amount request object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCpcMinBidsBySkuIdsV1Async(Integer retailerId, ValueResourceInputCpcMinBidsRequest valueResourceInputCpcMinBidsRequest, final ApiCallback<ValueResourceOutcomeCpcMinBidsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCpcMinBidsBySkuIdsV1ValidateBeforeCall(retailerId, valueResourceInputCpcMinBidsRequest, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeCpcMinBidsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecommendedKeywords
     * @param externalLineItemId The external line item identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendedKeywordsCall(String externalLineItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{externalLineItemId}/keywords/recommended"
            .replace("{" + "externalLineItemId" + "}", localVarApiClient.escapeString(externalLineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendedKeywordsValidateBeforeCall(String externalLineItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalLineItemId' is set
        if (externalLineItemId == null) {
            throw new ApiException("Missing the required parameter 'externalLineItemId' when calling getRecommendedKeywords(Async)");
        }

        return getRecommendedKeywordsCall(externalLineItemId, _callback);

    }

    /**
     * 
     * Retrieves a collection of recommended keywords for a line item
     * @param externalLineItemId The external line item identifier (required)
     * @return ValueResourceOutcomeOfRecommendedKeywordsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeOfRecommendedKeywordsResult getRecommendedKeywords(String externalLineItemId) throws ApiException {
        ApiResponse<ValueResourceOutcomeOfRecommendedKeywordsResult> localVarResp = getRecommendedKeywordsWithHttpInfo(externalLineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a collection of recommended keywords for a line item
     * @param externalLineItemId The external line item identifier (required)
     * @return ApiResponse&lt;ValueResourceOutcomeOfRecommendedKeywordsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeOfRecommendedKeywordsResult> getRecommendedKeywordsWithHttpInfo(String externalLineItemId) throws ApiException {
        okhttp3.Call localVarCall = getRecommendedKeywordsValidateBeforeCall(externalLineItemId, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfRecommendedKeywordsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a collection of recommended keywords for a line item
     * @param externalLineItemId The external line item identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendedKeywordsAsync(String externalLineItemId, final ApiCallback<ValueResourceOutcomeOfRecommendedKeywordsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendedKeywordsValidateBeforeCall(externalLineItemId, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeOfRecommendedKeywordsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inReviewReportV1
     * @param accountId The account to generate a report for (required)
     * @param limit Number of items per page (optional, default to 25)
     * @param offset Offset for pagination (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inReviewReportV1Call(Long accountId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/keywords/in-review-report"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inReviewReportV1ValidateBeforeCall(Long accountId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling inReviewReportV1(Async)");
        }

        return inReviewReportV1Call(accountId, limit, offset, _callback);

    }

    /**
     * 
     * Generate a list of reports for line items which contain one or more actionable keyword reviews
     * @param accountId The account to generate a report for (required)
     * @param limit Number of items per page (optional, default to 25)
     * @param offset Offset for pagination (optional, default to 0)
     * @return EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata inReviewReportV1(Long accountId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata> localVarResp = inReviewReportV1WithHttpInfo(accountId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Generate a list of reports for line items which contain one or more actionable keyword reviews
     * @param accountId The account to generate a report for (required)
     * @param limit Number of items per page (optional, default to 25)
     * @param offset Offset for pagination (optional, default to 0)
     * @return ApiResponse&lt;EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata> inReviewReportV1WithHttpInfo(Long accountId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = inReviewReportV1ValidateBeforeCall(accountId, limit, offset, null);
        Type localVarReturnType = new TypeToken<EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate a list of reports for line items which contain one or more actionable keyword reviews
     * @param accountId The account to generate a report for (required)
     * @param limit Number of items per page (optional, default to 25)
     * @param offset Offset for pagination (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inReviewReportV1Async(Long accountId, Integer limit, Integer offset, final ApiCallback<EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = inReviewReportV1ValidateBeforeCall(accountId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceCollectionOutcomeLineItemKeywordReviewReportAndMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pausePromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pausePromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/products/pause"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pausePromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling pausePromotedProducts(Async)");
        }

        return pausePromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public void pausePromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        pausePromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
    }

    /**
     * 
     * Pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pausePromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = pausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pausePromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202110ExternalCampaignPreferredLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModelV2Request The line item settings to create a line item with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalCampaignPreferredLineItemsByCampaignIdCall(String campaignId, PreferredLineItemCreateModelV2Request preferredLineItemCreateModelV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = preferredLineItemCreateModelV2Request;

        // create path and map variables
        String localVarPath = "/preview/retail-media/campaigns/{campaign-id}/preferred-line-items"
            .replace("{" + "campaign-id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(String campaignId, PreferredLineItemCreateModelV2Request preferredLineItemCreateModelV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApi202110ExternalCampaignPreferredLineItemsByCampaignId(Async)");
        }

        // verify the required parameter 'preferredLineItemCreateModelV2Request' is set
        if (preferredLineItemCreateModelV2Request == null) {
            throw new ApiException("Missing the required parameter 'preferredLineItemCreateModelV2Request' when calling postApi202110ExternalCampaignPreferredLineItemsByCampaignId(Async)");
        }

        return postApi202110ExternalCampaignPreferredLineItemsByCampaignIdCall(campaignId, preferredLineItemCreateModelV2Request, _callback);

    }

    /**
     * 
     * Creates a new preferred line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModelV2Request The line item settings to create a line item with (required)
     * @return PreferredLineItemV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItemV2Response postApi202110ExternalCampaignPreferredLineItemsByCampaignId(String campaignId, PreferredLineItemCreateModelV2Request preferredLineItemCreateModelV2Request) throws ApiException {
        ApiResponse<PreferredLineItemV2Response> localVarResp = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(campaignId, preferredLineItemCreateModelV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new preferred line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModelV2Request The line item settings to create a line item with (required)
     * @return ApiResponse&lt;PreferredLineItemV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItemV2Response> postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo(String campaignId, PreferredLineItemCreateModelV2Request preferredLineItemCreateModelV2Request) throws ApiException {
        okhttp3.Call localVarCall = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, preferredLineItemCreateModelV2Request, null);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new preferred line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param preferredLineItemCreateModelV2Request The line item settings to create a line item with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync(String campaignId, PreferredLineItemCreateModelV2Request preferredLineItemCreateModelV2Request, final ApiCallback<PreferredLineItemV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202110ExternalCampaignPreferredLineItemsByCampaignIdValidateBeforeCall(campaignId, preferredLineItemCreateModelV2Request, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApi202210ExternalLineItemProductButtonsCreateByLineItemId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalLineItemProductButtonsCreateByLineItemIdCall(String lineItemId, ProductButtonListRequest productButtonListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productButtonListRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/create"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApi202210ExternalLineItemProductButtonsCreateByLineItemIdValidateBeforeCall(String lineItemId, ProductButtonListRequest productButtonListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling postApi202210ExternalLineItemProductButtonsCreateByLineItemId(Async)");
        }

        return postApi202210ExternalLineItemProductButtonsCreateByLineItemIdCall(lineItemId, productButtonListRequest, _callback);

    }

    /**
     * 
     * Append new product buttons to a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @return ProductButtonListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonListResponse postApi202210ExternalLineItemProductButtonsCreateByLineItemId(String lineItemId, ProductButtonListRequest productButtonListRequest) throws ApiException {
        ApiResponse<ProductButtonListResponse> localVarResp = postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo(lineItemId, productButtonListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Append new product buttons to a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @return ApiResponse&lt;ProductButtonListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonListResponse> postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo(String lineItemId, ProductButtonListRequest productButtonListRequest) throws ApiException {
        okhttp3.Call localVarCall = postApi202210ExternalLineItemProductButtonsCreateByLineItemIdValidateBeforeCall(lineItemId, productButtonListRequest, null);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Append new product buttons to a line item
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonListRequest List of product buttons to append to the specified line item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsync(String lineItemId, ProductButtonListRequest productButtonListRequest, final ApiCallback<ProductButtonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApi202210ExternalLineItemProductButtonsCreateByLineItemIdValidateBeforeCall(lineItemId, productButtonListRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiExternalV2AccountBrandCatalogExportByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfBrandCatalogRequestV2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiExternalV2AccountBrandCatalogExportByAccountIdCall(String accountId, ValueResourceInputOfBrandCatalogRequestV2 valueResourceInputOfBrandCatalogRequestV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfBrandCatalogRequestV2;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/brand-catalog-export"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiExternalV2AccountBrandCatalogExportByAccountIdValidateBeforeCall(String accountId, ValueResourceInputOfBrandCatalogRequestV2 valueResourceInputOfBrandCatalogRequestV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiExternalV2AccountBrandCatalogExportByAccountId(Async)");
        }

        return postApiExternalV2AccountBrandCatalogExportByAccountIdCall(accountId, valueResourceInputOfBrandCatalogRequestV2, _callback);

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfBrandCatalogRequestV2  (optional)
     * @return EntityResourceOutcomeOfCatalogStatusV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomeOfCatalogStatusV2 postApiExternalV2AccountBrandCatalogExportByAccountId(String accountId, ValueResourceInputOfBrandCatalogRequestV2 valueResourceInputOfBrandCatalogRequestV2) throws ApiException {
        ApiResponse<EntityResourceOutcomeOfCatalogStatusV2> localVarResp = postApiExternalV2AccountBrandCatalogExportByAccountIdWithHttpInfo(accountId, valueResourceInputOfBrandCatalogRequestV2);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfBrandCatalogRequestV2  (optional)
     * @return ApiResponse&lt;EntityResourceOutcomeOfCatalogStatusV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomeOfCatalogStatusV2> postApiExternalV2AccountBrandCatalogExportByAccountIdWithHttpInfo(String accountId, ValueResourceInputOfBrandCatalogRequestV2 valueResourceInputOfBrandCatalogRequestV2) throws ApiException {
        okhttp3.Call localVarCall = postApiExternalV2AccountBrandCatalogExportByAccountIdValidateBeforeCall(accountId, valueResourceInputOfBrandCatalogRequestV2, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfCatalogStatusV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfBrandCatalogRequestV2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiExternalV2AccountBrandCatalogExportByAccountIdAsync(String accountId, ValueResourceInputOfBrandCatalogRequestV2 valueResourceInputOfBrandCatalogRequestV2, final ApiCallback<EntityResourceOutcomeOfCatalogStatusV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiExternalV2AccountBrandCatalogExportByAccountIdValidateBeforeCall(accountId, valueResourceInputOfBrandCatalogRequestV2, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfCatalogStatusV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiExternalV2AccountSellerCatalogExportByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfSellerCatalogRequestV2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiExternalV2AccountSellerCatalogExportByAccountIdCall(String accountId, ValueResourceInputOfSellerCatalogRequestV2 valueResourceInputOfSellerCatalogRequestV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputOfSellerCatalogRequestV2;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/seller-catalog-export"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiExternalV2AccountSellerCatalogExportByAccountIdValidateBeforeCall(String accountId, ValueResourceInputOfSellerCatalogRequestV2 valueResourceInputOfSellerCatalogRequestV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiExternalV2AccountSellerCatalogExportByAccountId(Async)");
        }

        return postApiExternalV2AccountSellerCatalogExportByAccountIdCall(accountId, valueResourceInputOfSellerCatalogRequestV2, _callback);

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfSellerCatalogRequestV2  (optional)
     * @return EntityResourceOutcomeOfCatalogStatusV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomeOfCatalogStatusV2 postApiExternalV2AccountSellerCatalogExportByAccountId(String accountId, ValueResourceInputOfSellerCatalogRequestV2 valueResourceInputOfSellerCatalogRequestV2) throws ApiException {
        ApiResponse<EntityResourceOutcomeOfCatalogStatusV2> localVarResp = postApiExternalV2AccountSellerCatalogExportByAccountIdWithHttpInfo(accountId, valueResourceInputOfSellerCatalogRequestV2);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfSellerCatalogRequestV2  (optional)
     * @return ApiResponse&lt;EntityResourceOutcomeOfCatalogStatusV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomeOfCatalogStatusV2> postApiExternalV2AccountSellerCatalogExportByAccountIdWithHttpInfo(String accountId, ValueResourceInputOfSellerCatalogRequestV2 valueResourceInputOfSellerCatalogRequestV2) throws ApiException {
        okhttp3.Call localVarCall = postApiExternalV2AccountSellerCatalogExportByAccountIdValidateBeforeCall(accountId, valueResourceInputOfSellerCatalogRequestV2, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfCatalogStatusV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param valueResourceInputOfSellerCatalogRequestV2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiExternalV2AccountSellerCatalogExportByAccountIdAsync(String accountId, ValueResourceInputOfSellerCatalogRequestV2 valueResourceInputOfSellerCatalogRequestV2, final ApiCallback<EntityResourceOutcomeOfCatalogStatusV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiExternalV2AccountSellerCatalogExportByAccountIdValidateBeforeCall(accountId, valueResourceInputOfSellerCatalogRequestV2, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomeOfCatalogStatusV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuRetrieval
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalCall(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-retrieval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        return postApiV1ExternalCatalogsSkuRetrievalCall(pageIndex, pageSize, requestBody, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @return SkuDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuDataPreviewListResponse postApiV1ExternalCatalogsSkuRetrieval(Integer pageIndex, Integer pageSize, List<String> requestBody) throws ApiException {
        ApiResponse<SkuDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo(pageIndex, pageSize, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @return ApiResponse&lt;SkuDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuDataPreviewListResponse> postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo(Integer pageIndex, Integer pageSize, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(pageIndex, pageSize, requestBody, null);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalAsync(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback<SkuDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(pageIndex, pageSize, requestBody, _callback);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearch
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchCall(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skuSearchRequestPreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback _callback) throws ApiException {
        return postApiV1ExternalCatalogsSkuSearchCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @return SkuDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuDataPreviewListResponse postApiV1ExternalCatalogsSkuSearch(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest) throws ApiException {
        ApiResponse<SkuDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchWithHttpInfo(pageIndex, pageSize, skuSearchRequestPreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @return ApiResponse&lt;SkuDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuDataPreviewListResponse> postApiV1ExternalCatalogsSkuSearchWithHttpInfo(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAsync(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback<SkuDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdCall(String accountId, String retailerId, Integer limit, Integer offset, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skuSearchRequestSlimPreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-search/accounts/{account-id}/retailers/{retailer-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdValidateBeforeCall(String accountId, String retailerId, Integer limit, Integer offset, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId(Async)");
        }

        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId(Async)");
        }

        return postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdCall(accountId, retailerId, limit, offset, skuSearchRequestSlimPreviewRequest, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text, account and retailer with an option to filter by brands id&#39;s.
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @return SkuSlimDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuSlimDataPreviewListResponse postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId(String accountId, String retailerId, Integer limit, Integer offset, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest) throws ApiException {
        ApiResponse<SkuSlimDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo(accountId, retailerId, limit, offset, skuSearchRequestSlimPreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, account and retailer with an option to filter by brands id&#39;s.
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @return ApiResponse&lt;SkuSlimDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuSlimDataPreviewListResponse> postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo(String accountId, String retailerId, Integer limit, Integer offset, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdValidateBeforeCall(accountId, retailerId, limit, offset, skuSearchRequestSlimPreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuSlimDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, account and retailer with an option to filter by brands id&#39;s.
     * @param accountId The account for which skus should be searched for. (required)
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param skuSearchRequestSlimPreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsync(String accountId, String retailerId, Integer limit, Integer offset, SkuSearchRequestSlimPreviewRequest skuSearchRequestSlimPreviewRequest, final ApiCallback<SkuSlimDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdValidateBeforeCall(accountId, retailerId, limit, offset, skuSearchRequestSlimPreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuSlimDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdCall(String retailerId, Integer limit, Integer offset, String xOriginAccount, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skuSearchRequestSlimV2PreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku/search/retailers/{retailer-id}"
            .replace("{" + "retailer-id" + "}", localVarApiClient.escapeString(retailerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xOriginAccount != null) {
            localVarHeaderParams.put("X-Origin-Account", localVarApiClient.parameterToString(xOriginAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdValidateBeforeCall(String retailerId, Integer limit, Integer offset, String xOriginAccount, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId(Async)");
        }

        return postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdCall(retailerId, limit, offset, xOriginAccount, skuSearchRequestSlimV2PreviewRequest, _callback);

    }

    /**
     * 
     * Endpoint to search skus by text for a retailer with an option to filter by brands id&#39;s.
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @return SkuSlimDataV2ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuSlimDataV2ListResponse postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId(String retailerId, Integer limit, Integer offset, String xOriginAccount, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest) throws ApiException {
        ApiResponse<SkuSlimDataV2ListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo(retailerId, limit, offset, xOriginAccount, skuSearchRequestSlimV2PreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text for a retailer with an option to filter by brands id&#39;s.
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @return ApiResponse&lt;SkuSlimDataV2ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuSlimDataV2ListResponse> postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo(String retailerId, Integer limit, Integer offset, String xOriginAccount, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdValidateBeforeCall(retailerId, limit, offset, xOriginAccount, skuSearchRequestSlimV2PreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuSlimDataV2ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text for a retailer with an option to filter by brands id&#39;s.
     * @param retailerId The client id/retailer id for which skus should be searched for. (required)
     * @param limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param xOriginAccount The account id of the initiator of the call. (optional)
     * @param skuSearchRequestSlimV2PreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsync(String retailerId, Integer limit, Integer offset, String xOriginAccount, SkuSearchRequestSlimV2PreviewRequest skuSearchRequestSlimV2PreviewRequest, final ApiCallback<SkuSlimDataV2ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdValidateBeforeCall(retailerId, limit, offset, xOriginAccount, skuSearchRequestSlimV2PreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuSlimDataV2ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV2ExternalAccountCreativesByAccountId
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel2 The creative to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalAccountCreativesByAccountIdCall(String accountId, CreativeCreateModel2 creativeCreateModel2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creativeCreateModel2;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV2ExternalAccountCreativesByAccountIdValidateBeforeCall(String accountId, CreativeCreateModel2 creativeCreateModel2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV2ExternalAccountCreativesByAccountId(Async)");
        }

        return postApiV2ExternalAccountCreativesByAccountIdCall(accountId, creativeCreateModel2, _callback);

    }

    /**
     * 
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel2 The creative to create (optional)
     * @return Creative2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public Creative2Response postApiV2ExternalAccountCreativesByAccountId(String accountId, CreativeCreateModel2 creativeCreateModel2) throws ApiException {
        ApiResponse<Creative2Response> localVarResp = postApiV2ExternalAccountCreativesByAccountIdWithHttpInfo(accountId, creativeCreateModel2);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel2 The creative to create (optional)
     * @return ApiResponse&lt;Creative2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative2Response> postApiV2ExternalAccountCreativesByAccountIdWithHttpInfo(String accountId, CreativeCreateModel2 creativeCreateModel2) throws ApiException {
        okhttp3.Call localVarCall = postApiV2ExternalAccountCreativesByAccountIdValidateBeforeCall(accountId, creativeCreateModel2, null);
        Type localVarReturnType = new TypeToken<Creative2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a creative for an account
     * @param accountId External account id to create a creative for (required)
     * @param creativeCreateModel2 The creative to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creatives created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalAccountCreativesByAccountIdAsync(String accountId, CreativeCreateModel2 creativeCreateModel2, final ApiCallback<Creative2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV2ExternalAccountCreativesByAccountIdValidateBeforeCall(accountId, creativeCreateModel2, _callback);
        Type localVarReturnType = new TypeToken<Creative2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV2ExternalAccountCreativesSearchByAccountId
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalAccountCreativesSearchByAccountIdCall(String accountId, List<String> creativeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives/search"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (creativeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "creative-ids", creativeIds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV2ExternalAccountCreativesSearchByAccountIdValidateBeforeCall(String accountId, List<String> creativeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV2ExternalAccountCreativesSearchByAccountId(Async)");
        }

        return postApiV2ExternalAccountCreativesSearchByAccountIdCall(accountId, creativeIds, _callback);

    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @return Creative2ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public Creative2ListResponse postApiV2ExternalAccountCreativesSearchByAccountId(String accountId, List<String> creativeIds) throws ApiException {
        ApiResponse<Creative2ListResponse> localVarResp = postApiV2ExternalAccountCreativesSearchByAccountIdWithHttpInfo(accountId, creativeIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @return ApiResponse&lt;Creative2ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative2ListResponse> postApiV2ExternalAccountCreativesSearchByAccountIdWithHttpInfo(String accountId, List<String> creativeIds) throws ApiException {
        okhttp3.Call localVarCall = postApiV2ExternalAccountCreativesSearchByAccountIdValidateBeforeCall(accountId, creativeIds, null);
        Type localVarReturnType = new TypeToken<Creative2ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get account creatives
     * @param accountId External account id to retrieve creatives for (required)
     * @param creativeIds Creatives to filter by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creatives found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV2ExternalAccountCreativesSearchByAccountIdAsync(String accountId, List<String> creativeIds, final ApiCallback<Creative2ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV2ExternalAccountCreativesSearchByAccountIdValidateBeforeCall(accountId, creativeIds, _callback);
        Type localVarReturnType = new TypeToken<Creative2ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202110ExternalPreferredLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelV2Request The line item settings to create a line item with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemByLineItemIdCall(String lineItemId, PreferredLineItemUpdateModelV2Request preferredLineItemUpdateModelV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = preferredLineItemUpdateModelV2Request;

        // create path and map variables
        String localVarPath = "/preview/retail-media/preferred-line-items/{line-item-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202110ExternalPreferredLineItemByLineItemIdValidateBeforeCall(String lineItemId, PreferredLineItemUpdateModelV2Request preferredLineItemUpdateModelV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202110ExternalPreferredLineItemByLineItemId(Async)");
        }

        // verify the required parameter 'preferredLineItemUpdateModelV2Request' is set
        if (preferredLineItemUpdateModelV2Request == null) {
            throw new ApiException("Missing the required parameter 'preferredLineItemUpdateModelV2Request' when calling putApi202110ExternalPreferredLineItemByLineItemId(Async)");
        }

        return putApi202110ExternalPreferredLineItemByLineItemIdCall(lineItemId, preferredLineItemUpdateModelV2Request, _callback);

    }

    /**
     * 
     * Updates the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelV2Request The line item settings to create a line item with (required)
     * @return PreferredLineItemV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PreferredLineItemV2Response putApi202110ExternalPreferredLineItemByLineItemId(String lineItemId, PreferredLineItemUpdateModelV2Request preferredLineItemUpdateModelV2Request) throws ApiException {
        ApiResponse<PreferredLineItemV2Response> localVarResp = putApi202110ExternalPreferredLineItemByLineItemIdWithHttpInfo(lineItemId, preferredLineItemUpdateModelV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelV2Request The line item settings to create a line item with (required)
     * @return ApiResponse&lt;PreferredLineItemV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreferredLineItemV2Response> putApi202110ExternalPreferredLineItemByLineItemIdWithHttpInfo(String lineItemId, PreferredLineItemUpdateModelV2Request preferredLineItemUpdateModelV2Request) throws ApiException {
        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, preferredLineItemUpdateModelV2Request, null);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the preferred line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param preferredLineItemUpdateModelV2Request The line item settings to create a line item with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202110ExternalPreferredLineItemByLineItemIdAsync(String lineItemId, PreferredLineItemUpdateModelV2Request preferredLineItemUpdateModelV2Request, final ApiCallback<PreferredLineItemV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202110ExternalPreferredLineItemByLineItemIdValidateBeforeCall(lineItemId, preferredLineItemUpdateModelV2Request, _callback);
        Type localVarReturnType = new TypeToken<PreferredLineItemV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productButtonRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()))
            .replace("{" + "product-button-id" + "}", localVarApiClient.escapeString(productButtonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        // verify the required parameter 'productButtonId' is set
        if (productButtonId == null) {
            throw new ApiException("Missing the required parameter 'productButtonId' when calling putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(Async)");
        }

        return putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdCall(lineItemId, productButtonId, productButtonRequest, _callback);

    }

    /**
     * 
     * Update a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @return ProductButtonListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductButtonListResponse putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest) throws ApiException {
        ApiResponse<ProductButtonListResponse> localVarResp = putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(lineItemId, productButtonId, productButtonRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @return ApiResponse&lt;ProductButtonListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductButtonListResponse> putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest) throws ApiException {
        okhttp3.Call localVarCall = putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, productButtonRequest, null);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a product button
     * @param lineItemId Long external id of the associated line item (required)
     * @param productButtonId Sequential id of the product button (required)
     * @param productButtonRequest Details of the updated product button (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync(String lineItemId, String productButtonId, ProductButtonRequest productButtonRequest, final ApiCallback<ProductButtonListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdValidateBeforeCall(lineItemId, productButtonId, productButtonRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductButtonListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2ExternalAccountByAccountIdCreativescreativeId
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel2 The creative to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalAccountByAccountIdCreativescreativeIdCall(String accountId, String creativeId, CreativeUpdateModel2 creativeUpdateModel2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creativeUpdateModel2;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{account-id}/creatives/{creative-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "creative-id" + "}", localVarApiClient.escapeString(creativeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(String accountId, String creativeId, CreativeUpdateModel2 creativeUpdateModel2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling putApiV2ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        // verify the required parameter 'creativeId' is set
        if (creativeId == null) {
            throw new ApiException("Missing the required parameter 'creativeId' when calling putApiV2ExternalAccountByAccountIdCreativescreativeId(Async)");
        }

        return putApiV2ExternalAccountByAccountIdCreativescreativeIdCall(accountId, creativeId, creativeUpdateModel2, _callback);

    }

    /**
     * 
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel2 The creative to create (optional)
     * @return Creative2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public Creative2Response putApiV2ExternalAccountByAccountIdCreativescreativeId(String accountId, String creativeId, CreativeUpdateModel2 creativeUpdateModel2) throws ApiException {
        ApiResponse<Creative2Response> localVarResp = putApiV2ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(accountId, creativeId, creativeUpdateModel2);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel2 The creative to create (optional)
     * @return ApiResponse&lt;Creative2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Creative2Response> putApiV2ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo(String accountId, String creativeId, CreativeUpdateModel2 creativeUpdateModel2) throws ApiException {
        okhttp3.Call localVarCall = putApiV2ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, creativeUpdateModel2, null);
        Type localVarReturnType = new TypeToken<Creative2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a creative
     * @param accountId External account id containing the creative (required)
     * @param creativeId Creative to update (required)
     * @param creativeUpdateModel2 The creative to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Creative updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalAccountByAccountIdCreativescreativeIdAsync(String accountId, String creativeId, CreativeUpdateModel2 creativeUpdateModel2, final ApiCallback<Creative2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2ExternalAccountByAccountIdCreativescreativeIdValidateBeforeCall(accountId, creativeId, creativeUpdateModel2, _callback);
        Type localVarReturnType = new TypeToken<Creative2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV2ExternalLineItemBidMultipliersByLineItemId
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @param lineItemBidMultipliersV2Request New Bid Multipliers to be set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalLineItemBidMultipliersByLineItemIdCall(String lineItemId, LineItemBidMultipliersV2Request lineItemBidMultipliersV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lineItemBidMultipliersV2Request;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/bid-multipliers"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV2ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(String lineItemId, LineItemBidMultipliersV2Request lineItemBidMultipliersV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApiV2ExternalLineItemBidMultipliersByLineItemId(Async)");
        }

        return putApiV2ExternalLineItemBidMultipliersByLineItemIdCall(lineItemId, lineItemBidMultipliersV2Request, _callback);

    }

    /**
     * 
     * Updates the bid multipliers for a given line item
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @param lineItemBidMultipliersV2Request New Bid Multipliers to be set (optional)
     * @return LineItemBidMultipliersV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Updated </td><td>  -  </td></tr>
     </table>
     */
    public LineItemBidMultipliersV2Response putApiV2ExternalLineItemBidMultipliersByLineItemId(String lineItemId, LineItemBidMultipliersV2Request lineItemBidMultipliersV2Request) throws ApiException {
        ApiResponse<LineItemBidMultipliersV2Response> localVarResp = putApiV2ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(lineItemId, lineItemBidMultipliersV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the bid multipliers for a given line item
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @param lineItemBidMultipliersV2Request New Bid Multipliers to be set (optional)
     * @return ApiResponse&lt;LineItemBidMultipliersV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LineItemBidMultipliersV2Response> putApiV2ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo(String lineItemId, LineItemBidMultipliersV2Request lineItemBidMultipliersV2Request) throws ApiException {
        okhttp3.Call localVarCall = putApiV2ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, lineItemBidMultipliersV2Request, null);
        Type localVarReturnType = new TypeToken<LineItemBidMultipliersV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the bid multipliers for a given line item
     * @param lineItemId External LineItemId for bid multiplier retrieval (required)
     * @param lineItemBidMultipliersV2Request New Bid Multipliers to be set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BidMultipliers Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV2ExternalLineItemBidMultipliersByLineItemIdAsync(String lineItemId, LineItemBidMultipliersV2Request lineItemBidMultipliersV2Request, final ApiCallback<LineItemBidMultipliersV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV2ExternalLineItemBidMultipliersByLineItemIdValidateBeforeCall(lineItemId, lineItemBidMultipliersV2Request, _callback);
        Type localVarReturnType = new TypeToken<LineItemBidMultipliersV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchBrandsByNameAsyncV1
     * @param limit the number of brands to return (optional, default to 25)
     * @param offset offset of paginated results (optional, default to 0)
     * @param valueResourceInputBrandIdSearchRequest BrandIdSearchRequest which contains the request parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchBrandsByNameAsyncV1Call(Integer limit, Integer offset, ValueResourceInputBrandIdSearchRequest valueResourceInputBrandIdSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputBrandIdSearchRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/brands/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBrandsByNameAsyncV1ValidateBeforeCall(Integer limit, Integer offset, ValueResourceInputBrandIdSearchRequest valueResourceInputBrandIdSearchRequest, final ApiCallback _callback) throws ApiException {
        return searchBrandsByNameAsyncV1Call(limit, offset, valueResourceInputBrandIdSearchRequest, _callback);

    }

    /**
     * 
     * Search for brands given a retailer ID and search term.
     * @param limit the number of brands to return (optional, default to 25)
     * @param offset offset of paginated results (optional, default to 0)
     * @param valueResourceInputBrandIdSearchRequest BrandIdSearchRequest which contains the request parameters (optional)
     * @return EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata searchBrandsByNameAsyncV1(Integer limit, Integer offset, ValueResourceInputBrandIdSearchRequest valueResourceInputBrandIdSearchRequest) throws ApiException {
        ApiResponse<EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata> localVarResp = searchBrandsByNameAsyncV1WithHttpInfo(limit, offset, valueResourceInputBrandIdSearchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for brands given a retailer ID and search term.
     * @param limit the number of brands to return (optional, default to 25)
     * @param offset offset of paginated results (optional, default to 0)
     * @param valueResourceInputBrandIdSearchRequest BrandIdSearchRequest which contains the request parameters (optional)
     * @return ApiResponse&lt;EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata> searchBrandsByNameAsyncV1WithHttpInfo(Integer limit, Integer offset, ValueResourceInputBrandIdSearchRequest valueResourceInputBrandIdSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = searchBrandsByNameAsyncV1ValidateBeforeCall(limit, offset, valueResourceInputBrandIdSearchRequest, null);
        Type localVarReturnType = new TypeToken<EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for brands given a retailer ID and search term.
     * @param limit the number of brands to return (optional, default to 25)
     * @param offset offset of paginated results (optional, default to 0)
     * @param valueResourceInputBrandIdSearchRequest BrandIdSearchRequest which contains the request parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchBrandsByNameAsyncV1Async(Integer limit, Integer offset, ValueResourceInputBrandIdSearchRequest valueResourceInputBrandIdSearchRequest, final ApiCallback<EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBrandsByNameAsyncV1ValidateBeforeCall(limit, offset, valueResourceInputBrandIdSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceCollectionOutcomeBrandIdSearchResultPagingOffsetLimitMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setKeywordBids
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setKeywordBidsCall(String id, SetBidsModelRequest setBidsModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setBidsModelRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{id}/keywords/set-bid"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setKeywordBidsValidateBeforeCall(String id, SetBidsModelRequest setBidsModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setKeywordBids(Async)");
        }

        return setKeywordBidsCall(id, setBidsModelRequest, _callback);

    }

    /**
     * 
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @return ResourceOutcome
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcome setKeywordBids(String id, SetBidsModelRequest setBidsModelRequest) throws ApiException {
        ApiResponse<ResourceOutcome> localVarResp = setKeywordBidsWithHttpInfo(id, setBidsModelRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @return ApiResponse&lt;ResourceOutcome&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcome> setKeywordBidsWithHttpInfo(String id, SetBidsModelRequest setBidsModelRequest) throws ApiException {
        okhttp3.Call localVarCall = setKeywordBidsValidateBeforeCall(id, setBidsModelRequest, null);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set bid overrides for associated keywords to the given line item in bulk
     * @param id ID of the line item (required)
     * @param setBidsModelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setKeywordBidsAsync(String id, SetBidsModelRequest setBidsModelRequest, final ApiCallback<ResourceOutcome> _callback) throws ApiException {

        okhttp3.Call localVarCall = setKeywordBidsValidateBeforeCall(id, setBidsModelRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcome>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpausePromotedProducts
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpausePromotedProductsCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotedProductResourceCollectionInput;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/products/unpause"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpausePromotedProductsValidateBeforeCall(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling unpausePromotedProducts(Async)");
        }

        return unpausePromotedProductsCall(lineItemId, promotedProductResourceCollectionInput, _callback);

    }

    /**
     * 
     * Un-pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public void unpausePromotedProducts(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        unpausePromotedProductsWithHttpInfo(lineItemId, promotedProductResourceCollectionInput);
    }

    /**
     * 
     * Un-pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unpausePromotedProductsWithHttpInfo(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput) throws ApiException {
        okhttp3.Call localVarCall = unpausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Un-pause a collection of promoted products associated with a line item
     * @param lineItemId ID of the line item (required)
     * @param promotedProductResourceCollectionInput Request body whose {data} contains an array of promoted products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Promoted products un-paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid external line item ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpausePromotedProductsAsync(String lineItemId, PromotedProductResourceCollectionInput promotedProductResourceCollectionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpausePromotedProductsValidateBeforeCall(lineItemId, promotedProductResourceCollectionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateKeywordReviewsV1
     * @param lineItemId The line item to update keyword review statuses for (required)
     * @param valueResourceInputRetailMediaKeywordsReview Request object containing a list of Phrase-ReviewState pairs to update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeywordReviewsV1Call(Long lineItemId, ValueResourceInputRetailMediaKeywordsReview valueResourceInputRetailMediaKeywordsReview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputRetailMediaKeywordsReview;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{line-item-id}/keywords/review"
            .replace("{" + "line-item-id" + "}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKeywordReviewsV1ValidateBeforeCall(Long lineItemId, ValueResourceInputRetailMediaKeywordsReview valueResourceInputRetailMediaKeywordsReview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling updateKeywordReviewsV1(Async)");
        }

        return updateKeywordReviewsV1Call(lineItemId, valueResourceInputRetailMediaKeywordsReview, _callback);

    }

    /**
     * 
     * Update the status of keyword reviews under a line item
     * @param lineItemId The line item to update keyword review statuses for (required)
     * @param valueResourceInputRetailMediaKeywordsReview Request object containing a list of Phrase-ReviewState pairs to update (optional)
     * @return ValueResourceOutcomeRetailMediaKeywordsReviewResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValueResourceOutcomeRetailMediaKeywordsReviewResult updateKeywordReviewsV1(Long lineItemId, ValueResourceInputRetailMediaKeywordsReview valueResourceInputRetailMediaKeywordsReview) throws ApiException {
        ApiResponse<ValueResourceOutcomeRetailMediaKeywordsReviewResult> localVarResp = updateKeywordReviewsV1WithHttpInfo(lineItemId, valueResourceInputRetailMediaKeywordsReview);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the status of keyword reviews under a line item
     * @param lineItemId The line item to update keyword review statuses for (required)
     * @param valueResourceInputRetailMediaKeywordsReview Request object containing a list of Phrase-ReviewState pairs to update (optional)
     * @return ApiResponse&lt;ValueResourceOutcomeRetailMediaKeywordsReviewResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueResourceOutcomeRetailMediaKeywordsReviewResult> updateKeywordReviewsV1WithHttpInfo(Long lineItemId, ValueResourceInputRetailMediaKeywordsReview valueResourceInputRetailMediaKeywordsReview) throws ApiException {
        okhttp3.Call localVarCall = updateKeywordReviewsV1ValidateBeforeCall(lineItemId, valueResourceInputRetailMediaKeywordsReview, null);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeRetailMediaKeywordsReviewResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the status of keyword reviews under a line item
     * @param lineItemId The line item to update keyword review statuses for (required)
     * @param valueResourceInputRetailMediaKeywordsReview Request object containing a list of Phrase-ReviewState pairs to update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeywordReviewsV1Async(Long lineItemId, ValueResourceInputRetailMediaKeywordsReview valueResourceInputRetailMediaKeywordsReview, final ApiCallback<ValueResourceOutcomeRetailMediaKeywordsReviewResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKeywordReviewsV1ValidateBeforeCall(lineItemId, valueResourceInputRetailMediaKeywordsReview, _callback);
        Type localVarReturnType = new TypeToken<ValueResourceOutcomeRetailMediaKeywordsReviewResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
