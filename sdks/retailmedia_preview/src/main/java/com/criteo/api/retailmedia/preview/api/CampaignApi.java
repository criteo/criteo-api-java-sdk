/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.preview.api;

import com.criteo.api.retailmedia.preview.ApiCallback;
import com.criteo.api.retailmedia.preview.ApiClient;
import com.criteo.api.retailmedia.preview.ApiException;
import com.criteo.api.retailmedia.preview.ApiResponse;
import com.criteo.api.retailmedia.preview.Configuration;
import com.criteo.api.retailmedia.preview.Pair;
import com.criteo.api.retailmedia.preview.ProgressRequestBody;
import com.criteo.api.retailmedia.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.preview.model.ExternalPostCampaign;
import com.criteo.api.retailmedia.preview.model.ExternalPostLineItem;
import com.criteo.api.retailmedia.preview.model.ExternalPutCampaign;
import com.criteo.api.retailmedia.preview.model.ExternalPutLineItem;
import com.criteo.api.retailmedia.preview.model.JsonApiDataRequestOfDeleteBalanceCampaign;
import com.criteo.api.retailmedia.preview.model.JsonApiDataRequestOfPutBalanceCampaign;
import com.criteo.api.retailmedia.preview.model.JsonApiDataRequestWithIdOfStringAndPromotedProduct;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfAccount;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfBalance;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfBrand;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfCampaign;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfLineItem;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfRetailer;
import com.criteo.api.retailmedia.preview.model.JsonApiPageResponseOfStringAndPromotedProduct;
import com.criteo.api.retailmedia.preview.model.JsonApiRequestOfCatalogRequestPreview;
import com.criteo.api.retailmedia.preview.model.JsonApiSingleResponseOfCampaign;
import com.criteo.api.retailmedia.preview.model.JsonApiSingleResponseOfCatalogStatus;
import com.criteo.api.retailmedia.preview.model.JsonApiSingleResponseOfLineItem;
import com.criteo.api.retailmedia.preview.model.PageOfBalanceCampaign;
import com.criteo.api.retailmedia.preview.model.SellerPreviewResponse;
import com.criteo.api.retailmedia.preview.model.SkuDataPreviewListResponse;
import com.criteo.api.retailmedia.preview.model.SkuSearchRequestPreviewRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient localVarApiClient;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteApiV1ExternalBalanceCampaignsByBalanceId
     * @param balanceId The balance to remove campaigns from (required)
     * @param jsonApiDataRequestOfDeleteBalanceCampaign The campaigns to append (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV1ExternalBalanceCampaignsByBalanceIdCall(String balanceId, JsonApiDataRequestOfDeleteBalanceCampaign jsonApiDataRequestOfDeleteBalanceCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiDataRequestOfDeleteBalanceCampaign;

        // create path and map variables
        String localVarPath = "/preview/retail-media/balances/{balanceId}/campaigns"
            .replaceAll("\\{" + "balanceId" + "\\}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(String balanceId, JsonApiDataRequestOfDeleteBalanceCampaign jsonApiDataRequestOfDeleteBalanceCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling deleteApiV1ExternalBalanceCampaignsByBalanceId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteApiV1ExternalBalanceCampaignsByBalanceIdCall(balanceId, jsonApiDataRequestOfDeleteBalanceCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param jsonApiDataRequestOfDeleteBalanceCampaign The campaigns to append (optional)
     * @return PageOfBalanceCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PageOfBalanceCampaign deleteApiV1ExternalBalanceCampaignsByBalanceId(String balanceId, JsonApiDataRequestOfDeleteBalanceCampaign jsonApiDataRequestOfDeleteBalanceCampaign) throws ApiException {
        ApiResponse<PageOfBalanceCampaign> localVarResp = deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo(balanceId, jsonApiDataRequestOfDeleteBalanceCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param jsonApiDataRequestOfDeleteBalanceCampaign The campaigns to append (optional)
     * @return ApiResponse&lt;PageOfBalanceCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfBalanceCampaign> deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo(String balanceId, JsonApiDataRequestOfDeleteBalanceCampaign jsonApiDataRequestOfDeleteBalanceCampaign) throws ApiException {
        okhttp3.Call localVarCall = deleteApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, jsonApiDataRequestOfDeleteBalanceCampaign, null);
        Type localVarReturnType = new TypeToken<PageOfBalanceCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more campaigns on the specified balance
     * @param balanceId The balance to remove campaigns from (required)
     * @param jsonApiDataRequestOfDeleteBalanceCampaign The campaigns to append (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV1ExternalBalanceCampaignsByBalanceIdAsync(String balanceId, JsonApiDataRequestOfDeleteBalanceCampaign jsonApiDataRequestOfDeleteBalanceCampaign, final ApiCallback<PageOfBalanceCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, jsonApiDataRequestOfDeleteBalanceCampaign, _callback);
        Type localVarReturnType = new TypeToken<PageOfBalanceCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiV1ExternalLineItemProductsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV1ExternalLineItemProductsByLineItemIdCall(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiDataRequestWithIdOfStringAndPromotedProduct;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{lineItemId}/products"
            .replaceAll("\\{" + "lineItemId" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling deleteApiV1ExternalLineItemProductsByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteApiV1ExternalLineItemProductsByLineItemIdCall(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint removes one or more products from promotion on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct  (optional)
     * @return JsonApiPageResponseOfStringAndPromotedProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfStringAndPromotedProduct deleteApiV1ExternalLineItemProductsByLineItemId(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct) throws ApiException {
        ApiResponse<JsonApiPageResponseOfStringAndPromotedProduct> localVarResp = deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint removes one or more products from promotion on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct  (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfStringAndPromotedProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfStringAndPromotedProduct> deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct) throws ApiException {
        okhttp3.Call localVarCall = deleteApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfStringAndPromotedProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint removes one or more products from promotion on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiV1ExternalLineItemProductsByLineItemIdAsync(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct, final ApiCallback<JsonApiPageResponseOfStringAndPromotedProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfStringAndPromotedProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV0ExternalCatalogOutputByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogOutputByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/{catalogId}/output"
            .replaceAll("\\{" + "catalogId" + "\\}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-json-stream", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV0ExternalCatalogOutputByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV0ExternalCatalogOutputByCatalogId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV0ExternalCatalogOutputByCatalogIdCall(catalogId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public void getApiV0ExternalCatalogOutputByCatalogId(String catalogId) throws ApiException {
        getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo(catalogId);
    }

    /**
     * 
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV0ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of CatalogProduct json objects.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog download initiated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The indicated catalog is not available for retrieval, wait for a success status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogOutputByCatalogIdAsync(String catalogId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV0ExternalCatalogOutputByCatalogIdValidateBeforeCall(catalogId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV0ExternalCatalogStatusByCatalogId
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogStatusByCatalogIdCall(String catalogId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/{catalogId}/status"
            .replaceAll("\\{" + "catalogId" + "\\}", localVarApiClient.escapeString(catalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV0ExternalCatalogStatusByCatalogIdValidateBeforeCall(String catalogId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogId' is set
        if (catalogId == null) {
            throw new ApiException("Missing the required parameter 'catalogId' when calling getApiV0ExternalCatalogStatusByCatalogId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV0ExternalCatalogStatusByCatalogIdCall(catalogId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus getApiV0ExternalCatalogStatusByCatalogId(String catalogId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo(catalogId);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo(String catalogId) throws ApiException {
        okhttp3.Call localVarCall = getApiV0ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the status of a catalog request.
     * @param catalogId A catalog ID returned from an account catalog request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV0ExternalCatalogStatusByCatalogIdAsync(String catalogId, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV0ExternalCatalogStatusByCatalogIdValidateBeforeCall(catalogId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountBalancesByAccountId
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBalancesByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/balances"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountBalancesByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountBalancesByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountBalancesByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfBalance getApiV1ExternalAccountBalancesByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfBalance> localVarResp = getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfBalance> getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountBalancesByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBalancesByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountBalancesByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountBrandsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/brands"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountBrandsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfBrand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfBrand getApiV1ExternalAccountBrandsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfBrand> localVarResp = getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfBrand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfBrand> getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountBrandsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfBrand> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountBrandsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfBrand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/campaigns"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountCampaignsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfCampaign getApiV1ExternalAccountCampaignsByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfCampaign> localVarResp = getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfCampaign> getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaign objects for the given account id
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountCampaignsByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccountRetailersByAccountId
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/retailers"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getApiV1ExternalAccountRetailersByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfRetailer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfRetailer getApiV1ExternalAccountRetailersByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfRetailer> localVarResp = getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfRetailer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfRetailer> getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of retailer objects that are associated with the given account
     * @param accountId The given account id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountRetailersByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfRetailer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountRetailersByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfRetailer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalAccounts
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalAccountsValidateBeforeCall(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getApiV1ExternalAccountsCall(limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfAccount getApiV1ExternalAccounts(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfAccount> localVarResp = getApiV1ExternalAccountsWithHttpInfo(limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfAccount> getApiV1ExternalAccountsWithHttpInfo(List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of account objects that the current user can access
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalAccountsAsync(List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalAccountsValidateBeforeCall(limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalBalanceCampaignsByBalanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalBalanceCampaignsByBalanceIdCall(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/balances/{balanceId}/campaigns"
            .replaceAll("\\{" + "balanceId" + "\\}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling getApiV1ExternalBalanceCampaignsByBalanceId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalBalanceCampaignsByBalanceIdCall(balanceId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return PageOfBalanceCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PageOfBalanceCampaign getApiV1ExternalBalanceCampaignsByBalanceId(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<PageOfBalanceCampaign> localVarResp = getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo(balanceId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;PageOfBalanceCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfBalanceCampaign> getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<PageOfBalanceCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalBalanceCampaignsByBalanceIdAsync(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<PageOfBalanceCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PageOfBalanceCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignByCampaignIdCall(String campaignId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV1ExternalCampaignByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdCall(campaignId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign getApiV1ExternalCampaignByCampaignId(String campaignId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = getApiV1ExternalCampaignByCampaignIdWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> getApiV1ExternalCampaignByCampaignIdWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignByCampaignIdAsync(String campaignId, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalCampaignLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignLineItemsByCampaignIdCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/campaigns/{campaignId}/line-items"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalCampaignLineItemsByCampaignIdValidateBeforeCall(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiV1ExternalCampaignLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalCampaignLineItemsByCampaignIdCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets page of line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfLineItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfLineItem getApiV1ExternalCampaignLineItemsByCampaignId(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfLineItem> localVarResp = getApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo(campaignId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfLineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfLineItem> getApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalCampaignLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfLineItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of line item objects for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalCampaignLineItemsByCampaignIdAsync(String campaignId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfLineItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalCampaignLineItemsByCampaignIdValidateBeforeCall(campaignId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfLineItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalLineItemByLineItemIdCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{lineItemId}"
            .replaceAll("\\{" + "lineItemId" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalLineItemByLineItemIdValidateBeforeCall(String lineItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV1ExternalLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalLineItemByLineItemIdCall(lineItemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return JsonApiSingleResponseOfLineItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfLineItem getApiV1ExternalLineItemByLineItemId(String lineItemId) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfLineItem> localVarResp = getApiV1ExternalLineItemByLineItemIdWithHttpInfo(lineItemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @return ApiResponse&lt;JsonApiSingleResponseOfLineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfLineItem> getApiV1ExternalLineItemByLineItemIdWithHttpInfo(String lineItemId) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalLineItemByLineItemIdAsync(String lineItemId, final ApiCallback<JsonApiSingleResponseOfLineItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalLineItemProductsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalLineItemProductsByLineItemIdCall(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{lineItemId}/products"
            .replaceAll("\\{" + "lineItemId" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling getApiV1ExternalLineItemProductsByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalLineItemProductsByLineItemIdCall(lineItemId, limitToId, pageIndex, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint gets the promoted products on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return JsonApiPageResponseOfStringAndPromotedProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfStringAndPromotedProduct getApiV1ExternalLineItemProductsByLineItemId(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<JsonApiPageResponseOfStringAndPromotedProduct> localVarResp = getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo(lineItemId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint gets the promoted products on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfStringAndPromotedProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfStringAndPromotedProduct> getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfStringAndPromotedProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint gets the promoted products on the specified line item.
     * @param lineItemId The line item to interact with (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional)
     * @param pageSize The maximum number of items you would like to receive in this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalLineItemProductsByLineItemIdAsync(String lineItemId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<JsonApiPageResponseOfStringAndPromotedProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfStringAndPromotedProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiV1ExternalRetailerByRetailerIdSellerBySeller
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerCall(Integer retailerId, String seller, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/retail-media/retailers/{retailerId}/sellers/{seller}"
            .replaceAll("\\{" + "retailerId" + "\\}", localVarApiClient.escapeString(retailerId.toString()))
            .replaceAll("\\{" + "seller" + "\\}", localVarApiClient.escapeString(seller.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(Integer retailerId, String seller, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'retailerId' is set
        if (retailerId == null) {
            throw new ApiException("Missing the required parameter 'retailerId' when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller(Async)");
        }
        
        // verify the required parameter 'seller' is set
        if (seller == null) {
            throw new ApiException("Missing the required parameter 'seller' when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller(Async)");
        }
        

        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerCall(retailerId, seller, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @return SellerPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public SellerPreviewResponse getApiV1ExternalRetailerByRetailerIdSellerBySeller(Integer retailerId, String seller) throws ApiException {
        ApiResponse<SellerPreviewResponse> localVarResp = getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo(retailerId, seller);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @return ApiResponse&lt;SellerPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerPreviewResponse> getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo(Integer retailerId, String seller) throws ApiException {
        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(retailerId, seller, null);
        Type localVarReturnType = new TypeToken<SellerPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to get market place seller id and name
     * @param retailerId The retailer id for which seller should be fetched. (required)
     * @param seller The seller id or seller name which should be validated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Seller found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync(Integer retailerId, String seller, final ApiCallback<SellerPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiV1ExternalRetailerByRetailerIdSellerBySellerValidateBeforeCall(retailerId, seller, _callback);
        Type localVarReturnType = new TypeToken<SellerPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV0ExternalAccountCatalogsByAccountId
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV0ExternalAccountCatalogsByAccountIdCall(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiRequestOfCatalogRequestPreview;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/catalogs"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV0ExternalAccountCatalogsByAccountIdValidateBeforeCall(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV0ExternalAccountCatalogsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV0ExternalAccountCatalogsByAccountIdCall(accountId, jsonApiRequestOfCatalogRequestPreview, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @return JsonApiSingleResponseOfCatalogStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCatalogStatus postApiV0ExternalAccountCatalogsByAccountId(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCatalogStatus> localVarResp = postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo(accountId, jsonApiRequestOfCatalogRequestPreview);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCatalogStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCatalogStatus> postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview) throws ApiException {
        okhttp3.Call localVarCall = postApiV0ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequestPreview, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a request for a Catalog available to the indicated account.
     * @param accountId The account to request the catalog for. (required)
     * @param jsonApiRequestOfCatalogRequestPreview  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog request successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV0ExternalAccountCatalogsByAccountIdAsync(String accountId, JsonApiRequestOfCatalogRequestPreview jsonApiRequestOfCatalogRequestPreview, final ApiCallback<JsonApiSingleResponseOfCatalogStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV0ExternalAccountCatalogsByAccountIdValidateBeforeCall(accountId, jsonApiRequestOfCatalogRequestPreview, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCatalogStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalAccountCampaignsByAccountId
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdCall(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPostCampaign;

        // create path and map variables
        String localVarPath = "/preview/retail-media/accounts/{accountId}/campaigns"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postApiV1ExternalAccountCampaignsByAccountId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdCall(accountId, externalPostCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign postApiV1ExternalAccountCampaignsByAccountId(String accountId, ExternalPostCampaign externalPostCampaign) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(accountId, externalPostCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo(String accountId, ExternalPostCampaign externalPostCampaign) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, externalPostCampaign, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new campaign with the specified settings
     * @param accountId The given account id (required)
     * @param externalPostCampaign The campaign settings to create a campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalAccountCampaignsByAccountIdAsync(String accountId, ExternalPostCampaign externalPostCampaign, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalAccountCampaignsByAccountIdValidateBeforeCall(accountId, externalPostCampaign, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCampaignLineItemsByCampaignId
     * @param campaignId The given campaign id (required)
     * @param externalPostLineItem The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCampaignLineItemsByCampaignIdCall(String campaignId, ExternalPostLineItem externalPostLineItem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPostLineItem;

        // create path and map variables
        String localVarPath = "/preview/retail-media/campaigns/{campaignId}/line-items"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCampaignLineItemsByCampaignIdValidateBeforeCall(String campaignId, ExternalPostLineItem externalPostLineItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApiV1ExternalCampaignLineItemsByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = postApiV1ExternalCampaignLineItemsByCampaignIdCall(campaignId, externalPostLineItem, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param externalPostLineItem The line item settings to create a line item with (optional)
     * @return JsonApiSingleResponseOfLineItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfLineItem postApiV1ExternalCampaignLineItemsByCampaignId(String campaignId, ExternalPostLineItem externalPostLineItem) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfLineItem> localVarResp = postApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo(campaignId, externalPostLineItem);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param externalPostLineItem The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfLineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfLineItem> postApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo(String campaignId, ExternalPostLineItem externalPostLineItem) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCampaignLineItemsByCampaignIdValidateBeforeCall(campaignId, externalPostLineItem, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new line item with the specified settings
     * @param campaignId The given campaign id (required)
     * @param externalPostLineItem The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCampaignLineItemsByCampaignIdAsync(String campaignId, ExternalPostLineItem externalPostLineItem, final ApiCallback<JsonApiSingleResponseOfLineItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCampaignLineItemsByCampaignIdValidateBeforeCall(campaignId, externalPostLineItem, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuRetrieval
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalCall(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-retrieval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalCall(pageIndex, pageSize, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @return SkuDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuDataPreviewListResponse postApiV1ExternalCatalogsSkuRetrieval(Integer pageIndex, Integer pageSize, List<String> requestBody) throws ApiException {
        ApiResponse<SkuDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo(pageIndex, pageSize, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @return ApiResponse&lt;SkuDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuDataPreviewListResponse> postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo(Integer pageIndex, Integer pageSize, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(pageIndex, pageSize, requestBody, null);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param requestBody The list of SKU keys to retrieve sku information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuRetrievalAsync(Integer pageIndex, Integer pageSize, List<String> requestBody, final ApiCallback<SkuDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuRetrievalValidateBeforeCall(pageIndex, pageSize, requestBody, _callback);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiV1ExternalCatalogsSkuSearch
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchCall(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = skuSearchRequestPreviewRequest;

        // create path and map variables
        String localVarPath = "/preview/retail-media/catalogs/sku-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @return SkuDataPreviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public SkuDataPreviewListResponse postApiV1ExternalCatalogsSkuSearch(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest) throws ApiException {
        ApiResponse<SkuDataPreviewListResponse> localVarResp = postApiV1ExternalCatalogsSkuSearchWithHttpInfo(pageIndex, pageSize, skuSearchRequestPreviewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @return ApiResponse&lt;SkuDataPreviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuDataPreviewListResponse> postApiV1ExternalCatalogsSkuSearchWithHttpInfo(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, null);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint to search skus by text, retailer and sellers/brands.
     * @param pageIndex The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param pageSize The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param skuSearchRequestPreviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skus found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiV1ExternalCatalogsSkuSearchAsync(Integer pageIndex, Integer pageSize, SkuSearchRequestPreviewRequest skuSearchRequestPreviewRequest, final ApiCallback<SkuDataPreviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiV1ExternalCatalogsSkuSearchValidateBeforeCall(pageIndex, pageSize, skuSearchRequestPreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<SkuDataPreviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV1ExternalBalanceCampaignsByBalanceId
     * @param balanceId The balance to add campaigns from (required)
     * @param jsonApiDataRequestOfPutBalanceCampaign The campaigns to append (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalBalanceCampaignsByBalanceIdCall(String balanceId, JsonApiDataRequestOfPutBalanceCampaign jsonApiDataRequestOfPutBalanceCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiDataRequestOfPutBalanceCampaign;

        // create path and map variables
        String localVarPath = "/preview/retail-media/balances/{balanceId}/campaigns"
            .replaceAll("\\{" + "balanceId" + "\\}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(String balanceId, JsonApiDataRequestOfPutBalanceCampaign jsonApiDataRequestOfPutBalanceCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling putApiV1ExternalBalanceCampaignsByBalanceId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV1ExternalBalanceCampaignsByBalanceIdCall(balanceId, jsonApiDataRequestOfPutBalanceCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param jsonApiDataRequestOfPutBalanceCampaign The campaigns to append (optional)
     * @return PageOfBalanceCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PageOfBalanceCampaign putApiV1ExternalBalanceCampaignsByBalanceId(String balanceId, JsonApiDataRequestOfPutBalanceCampaign jsonApiDataRequestOfPutBalanceCampaign) throws ApiException {
        ApiResponse<PageOfBalanceCampaign> localVarResp = putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo(balanceId, jsonApiDataRequestOfPutBalanceCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param jsonApiDataRequestOfPutBalanceCampaign The campaigns to append (optional)
     * @return ApiResponse&lt;PageOfBalanceCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfBalanceCampaign> putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo(String balanceId, JsonApiDataRequestOfPutBalanceCampaign jsonApiDataRequestOfPutBalanceCampaign) throws ApiException {
        okhttp3.Call localVarCall = putApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, jsonApiDataRequestOfPutBalanceCampaign, null);
        Type localVarReturnType = new TypeToken<PageOfBalanceCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * appends one or more campaigns to the specified balance
     * @param balanceId The balance to add campaigns from (required)
     * @param jsonApiDataRequestOfPutBalanceCampaign The campaigns to append (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalBalanceCampaignsByBalanceIdAsync(String balanceId, JsonApiDataRequestOfPutBalanceCampaign jsonApiDataRequestOfPutBalanceCampaign, final ApiCallback<PageOfBalanceCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV1ExternalBalanceCampaignsByBalanceIdValidateBeforeCall(balanceId, jsonApiDataRequestOfPutBalanceCampaign, _callback);
        Type localVarReturnType = new TypeToken<PageOfBalanceCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV1ExternalCampaignByCampaignId
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalCampaignByCampaignIdCall(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPutCampaign;

        // create path and map variables
        String localVarPath = "/preview/retail-media/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling putApiV1ExternalCampaignByCampaignId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdCall(campaignId, externalPutCampaign, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @return JsonApiSingleResponseOfCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfCampaign putApiV1ExternalCampaignByCampaignId(String campaignId, ExternalPutCampaign externalPutCampaign) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfCampaign> localVarResp = putApiV1ExternalCampaignByCampaignIdWithHttpInfo(campaignId, externalPutCampaign);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfCampaign> putApiV1ExternalCampaignByCampaignIdWithHttpInfo(String campaignId, ExternalPutCampaign externalPutCampaign) throws ApiException {
        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, externalPutCampaign, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the campaign for the given campaign id
     * @param campaignId The given campaign id (required)
     * @param externalPutCampaign The campaign settings to update that campaign with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalCampaignByCampaignIdAsync(String campaignId, ExternalPutCampaign externalPutCampaign, final ApiCallback<JsonApiSingleResponseOfCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV1ExternalCampaignByCampaignIdValidateBeforeCall(campaignId, externalPutCampaign, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV1ExternalLineItemByLineItemId
     * @param lineItemId The given line item id (required)
     * @param externalPutLineItem The line item settings to create a line item with (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalLineItemByLineItemIdCall(String lineItemId, ExternalPutLineItem externalPutLineItem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = externalPutLineItem;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{lineItemId}"
            .replaceAll("\\{" + "lineItemId" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV1ExternalLineItemByLineItemIdValidateBeforeCall(String lineItemId, ExternalPutLineItem externalPutLineItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApiV1ExternalLineItemByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV1ExternalLineItemByLineItemIdCall(lineItemId, externalPutLineItem, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param externalPutLineItem The line item settings to create a line item with (optional)
     * @return JsonApiSingleResponseOfLineItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiSingleResponseOfLineItem putApiV1ExternalLineItemByLineItemId(String lineItemId, ExternalPutLineItem externalPutLineItem) throws ApiException {
        ApiResponse<JsonApiSingleResponseOfLineItem> localVarResp = putApiV1ExternalLineItemByLineItemIdWithHttpInfo(lineItemId, externalPutLineItem);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param externalPutLineItem The line item settings to create a line item with (optional)
     * @return ApiResponse&lt;JsonApiSingleResponseOfLineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiSingleResponseOfLineItem> putApiV1ExternalLineItemByLineItemIdWithHttpInfo(String lineItemId, ExternalPutLineItem externalPutLineItem) throws ApiException {
        okhttp3.Call localVarCall = putApiV1ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, externalPutLineItem, null);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the line item for the given line item id
     * @param lineItemId The given line item id (required)
     * @param externalPutLineItem The line item settings to create a line item with (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalLineItemByLineItemIdAsync(String lineItemId, ExternalPutLineItem externalPutLineItem, final ApiCallback<JsonApiSingleResponseOfLineItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV1ExternalLineItemByLineItemIdValidateBeforeCall(lineItemId, externalPutLineItem, _callback);
        Type localVarReturnType = new TypeToken<JsonApiSingleResponseOfLineItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiV1ExternalLineItemProductsByLineItemId
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct the products to append to this line item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalLineItemProductsByLineItemIdCall(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsonApiDataRequestWithIdOfStringAndPromotedProduct;

        // create path and map variables
        String localVarPath = "/preview/retail-media/line-items/{lineItemId}/products"
            .replaceAll("\\{" + "lineItemId" + "\\}", localVarApiClient.escapeString(lineItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lineItemId' is set
        if (lineItemId == null) {
            throw new ApiException("Missing the required parameter 'lineItemId' when calling putApiV1ExternalLineItemProductsByLineItemId(Async)");
        }
        

        okhttp3.Call localVarCall = putApiV1ExternalLineItemProductsByLineItemIdCall(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct, _callback);
        return localVarCall;

    }

    /**
     * 
     * This endpoint appends one or more products to promote on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct the products to append to this line item (optional)
     * @return JsonApiPageResponseOfStringAndPromotedProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonApiPageResponseOfStringAndPromotedProduct putApiV1ExternalLineItemProductsByLineItemId(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct) throws ApiException {
        ApiResponse<JsonApiPageResponseOfStringAndPromotedProduct> localVarResp = putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint appends one or more products to promote on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct the products to append to this line item (optional)
     * @return ApiResponse&lt;JsonApiPageResponseOfStringAndPromotedProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonApiPageResponseOfStringAndPromotedProduct> putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct) throws ApiException {
        okhttp3.Call localVarCall = putApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct, null);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfStringAndPromotedProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint appends one or more products to promote on the specified line item.  The resulting state of the line item is returned.
     * @param lineItemId The line item to interact with (required)
     * @param jsonApiDataRequestWithIdOfStringAndPromotedProduct the products to append to this line item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiV1ExternalLineItemProductsByLineItemIdAsync(String lineItemId, JsonApiDataRequestWithIdOfStringAndPromotedProduct jsonApiDataRequestWithIdOfStringAndPromotedProduct, final ApiCallback<JsonApiPageResponseOfStringAndPromotedProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiV1ExternalLineItemProductsByLineItemIdValidateBeforeCall(lineItemId, jsonApiDataRequestWithIdOfStringAndPromotedProduct, _callback);
        Type localVarReturnType = new TypeToken<JsonApiPageResponseOfStringAndPromotedProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
