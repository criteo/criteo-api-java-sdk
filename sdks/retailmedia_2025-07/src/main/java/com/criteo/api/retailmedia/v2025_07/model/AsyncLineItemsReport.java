/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_07.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2025_07.JSON;

/**
 * Async Line Items report body request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AsyncLineItemsReport {
  /**
   * Filter the type of campaigns to report on: sponsoredProducts or onSiteDisplays
   */
  @JsonAdapter(CampaignTypeEnum.Adapter.class)
  public enum CampaignTypeEnum {
    ALL("all"),
    
    SPONSOREDPRODUCTS("sponsoredProducts"),
    
    ONSITEDISPLAYS("onSiteDisplays");

    private String value;

    CampaignTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CampaignTypeEnum fromValue(String value) {
      for (CampaignTypeEnum b : CampaignTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CampaignTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CampaignTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CampaignTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CampaignTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CAMPAIGN_TYPE = "campaignType";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_TYPE)
  private CampaignTypeEnum campaignType = CampaignTypeEnum.ALL;

  /**
   * Click attribution window
   */
  @JsonAdapter(ClickAttributionWindowEnum.Adapter.class)
  public enum ClickAttributionWindowEnum {
    NONE("none"),
    
    _7D("7D"),
    
    _14D("14D"),
    
    _30D("30D");

    private String value;

    ClickAttributionWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClickAttributionWindowEnum fromValue(String value) {
      for (ClickAttributionWindowEnum b : ClickAttributionWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClickAttributionWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClickAttributionWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClickAttributionWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClickAttributionWindowEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLICK_ATTRIBUTION_WINDOW = "clickAttributionWindow";
  @SerializedName(SERIALIZED_NAME_CLICK_ATTRIBUTION_WINDOW)
  private ClickAttributionWindowEnum clickAttributionWindow = ClickAttributionWindowEnum.NONE;

  /**
   * Gets or Sets dimensions
   */
  @JsonAdapter(DimensionsEnum.Adapter.class)
  public enum DimensionsEnum {
    DATE("date"),
    
    HOUR("hour"),
    
    ACCOUNTID("accountId"),
    
    ACCOUNTNAME("accountName"),
    
    CAMPAIGNID("campaignId"),
    
    CAMPAIGNNAME("campaignName"),
    
    CAMPAIGNTYPENAME("campaignTypeName"),
    
    LINEITEMID("lineItemId"),
    
    LINEITEMNAME("lineItemName"),
    
    RETAILERID("retailerId"),
    
    RETAILERNAME("retailerName"),
    
    BRANDID("brandId"),
    
    BRANDNAME("brandName"),
    
    ADVPRODUCTCATEGORY("advProductCategory"),
    
    ADVPRODUCTID("advProductId"),
    
    ADVPRODUCTNAME("advProductName"),
    
    SALESCHANNEL("salesChannel"),
    
    MEDIATYPE("mediaType"),
    
    ENVIRONMENT("environment"),
    
    PAGETYPENAME("pageTypeName"),
    
    PAGECATEGORY("pageCategory"),
    
    SERVEDCATEGORY("servedCategory"),
    
    TAXONOMYBREADCRUMB("taxonomyBreadcrumb"),
    
    KEYWORD("keyword"),
    
    SEARCHTERM("searchTerm"),
    
    SEARCHTERMTYPE("searchTermType"),
    
    SEARCHTERMTARGETING("searchTermTargeting"),
    
    CREATIVEID("creativeId"),
    
    CREATIVENAME("creativeName"),
    
    CREATIVETYPEID("creativeTypeId"),
    
    CREATIVETYPENAME("creativeTypeName"),
    
    CREATIVETEMPLATEID("creativeTemplateId"),
    
    CREATIVETEMPLATENAME("creativeTemplateName"),
    
    TARGETEDKEYWORDTYPE("targetedKeywordType");

    private String value;

    DimensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionsEnum fromValue(String value) {
      for (DimensionsEnum b : DimensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<DimensionsEnum> dimensions = null;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  /**
   * Format of the output
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    JSON("json"),
    
    JSON_COMPACT("json-compact"),
    
    JSON_NEWLINE("json-newline"),
    
    CSV("csv");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.JSON_COMPACT;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<String> ids = null;

  /**
   * Filter on the type of media: unknown, display, video
   */
  @JsonAdapter(MediaTypeEnum.Adapter.class)
  public enum MediaTypeEnum {
    UNKNOWN("unknown"),
    
    VIDEO("video"),
    
    DISPLAY("display"),
    
    ALL("all");

    private String value;

    MediaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediaTypeEnum fromValue(String value) {
      for (MediaTypeEnum b : MediaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaTypeEnum mediaType = MediaTypeEnum.ALL;

  /**
   * Gets or Sets metrics
   */
  @JsonAdapter(MetricsEnum.Adapter.class)
  public enum MetricsEnum {
    IMPRESSIONS("impressions"),
    
    CLICKS("clicks"),
    
    SPEND("spend"),
    
    ATTRIBUTEDSALES("attributedSales"),
    
    ATTRIBUTEDUNITS("attributedUnits"),
    
    ATTRIBUTEDORDERS("attributedOrders"),
    
    ASSISTEDSALES("assistedSales"),
    
    ASSISTEDUNITS("assistedUnits"),
    
    CTR("ctr"),
    
    CPC("cpc"),
    
    CPO("cpo"),
    
    CPM("cpm"),
    
    ROAS("roas"),
    
    VIDEOVIEWS("videoViews"),
    
    VIDEOSSTARTED("videosStarted"),
    
    VIDEOSPLAYEDTO25("videosPlayedTo25"),
    
    VIDEOSPLAYEDTO50("videosPlayedTo50"),
    
    VIDEOSPLAYEDTO75("videosPlayedTo75"),
    
    VIDEOSPLAYEDTO100("videosPlayedTo100"),
    
    VIDEOPLAYINGRATE("videoPlayingRate"),
    
    VIDEOCOMPLETIONRATE("videoCompletionRate"),
    
    VIDEOIMPRESSIONS("videoImpressions"),
    
    VIDEOMUTED("videoMuted"),
    
    VIDEOUNMUTED("videoUnmuted"),
    
    VIDEOPAUSED("videoPaused"),
    
    VIDEORESUMED("videoResumed"),
    
    VIDEOAVGINTERACTIONRATE("videoAvgInteractionRate"),
    
    VIDEOVIEWABILITY("videoViewability"),
    
    VIDEOSTARTINGRATE("videoStartingRate"),
    
    VIDEOCPC("videoCPC"),
    
    VIDEOCPCV("videoCPCV"),
    
    NEWTOBRANDATTRIBUTEDSALES("newToBrandAttributedSales"),
    
    NEWTOBRANDATTRIBUTEDSALESRATE("newToBrandAttributedSalesRate"),
    
    NEWTOBRANDATTRIBUTEDUNITS("newToBrandAttributedUnits"),
    
    NEWTOBRANDATTRIBUTEDUNITSRATE("newToBrandAttributedUnitsRate"),
    
    UNIQUEVISITORS("uniqueVisitors"),
    
    FREQUENCY("frequency"),
    
    WINRATE("winRate"),
    
    SAMPLEDBIDSWON("sampledBidsWon"),
    
    SAMPLEDBIDSPARTICIPATED("sampledBidsParticipated");

    private String value;

    MetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricsEnum fromValue(String value) {
      for (MetricsEnum b : MetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricsEnum> metrics = null;

  /**
   * Type of report, if no dimensions and metrics are provided, falls back to summary reportType
   */
  @JsonAdapter(ReportTypeEnum.Adapter.class)
  public enum ReportTypeEnum {
    SUMMARY("summary"),
    
    PAGETYPE("pageType"),
    
    KEYWORD("keyword"),
    
    PRODUCTCATEGORY("productCategory"),
    
    PRODUCT("product"),
    
    ATTRIBUTEDTRANSACTIONS("attributedTransactions"),
    
    ENVIRONMENT("environment"),
    
    SERVEDCATEGORY("servedCategory"),
    
    CAPOUT("capout");

    private String value;

    ReportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportTypeEnum fromValue(String value) {
      for (ReportTypeEnum b : ReportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private ReportTypeEnum reportType = ReportTypeEnum.SUMMARY;

  /**
   * Filter on specific sales channel: offline or online
   */
  @JsonAdapter(SalesChannelEnum.Adapter.class)
  public enum SalesChannelEnum {
    ONLINE("online"),
    
    OFFLINE("offline"),
    
    ALL("all");

    private String value;

    SalesChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalesChannelEnum fromValue(String value) {
      for (SalesChannelEnum b : SalesChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SalesChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalesChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalesChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SalesChannelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private SalesChannelEnum salesChannel = SalesChannelEnum.ALL;

  /**
   * Gets or Sets searchTermTargetings
   */
  @JsonAdapter(SearchTermTargetingsEnum.Adapter.class)
  public enum SearchTermTargetingsEnum {
    UNKNOWN("unknown"),
    
    AUTOMATIC("automatic"),
    
    MANUAL("manual");

    private String value;

    SearchTermTargetingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchTermTargetingsEnum fromValue(String value) {
      for (SearchTermTargetingsEnum b : SearchTermTargetingsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchTermTargetingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchTermTargetingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchTermTargetingsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchTermTargetingsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_TERM_TARGETINGS = "searchTermTargetings";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM_TARGETINGS)
  private List<SearchTermTargetingsEnum> searchTermTargetings = null;

  /**
   * Gets or Sets searchTermTypes
   */
  @JsonAdapter(SearchTermTypesEnum.Adapter.class)
  public enum SearchTermTypesEnum {
    UNKNOWN("unknown"),
    
    SEARCHED("searched"),
    
    ENTERED("entered");

    private String value;

    SearchTermTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchTermTypesEnum fromValue(String value) {
      for (SearchTermTypesEnum b : SearchTermTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchTermTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchTermTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchTermTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchTermTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_TERM_TYPES = "searchTermTypes";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM_TYPES)
  private List<SearchTermTypesEnum> searchTermTypes = null;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * Gets or Sets targetedKeywordTypes
   */
  @JsonAdapter(TargetedKeywordTypesEnum.Adapter.class)
  public enum TargetedKeywordTypesEnum {
    UNKNOWN("unknown"),
    
    GENERIC("generic"),
    
    BRANDED("branded"),
    
    CONQUESTING("conquesting");

    private String value;

    TargetedKeywordTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetedKeywordTypesEnum fromValue(String value) {
      for (TargetedKeywordTypesEnum b : TargetedKeywordTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetedKeywordTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetedKeywordTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetedKeywordTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetedKeywordTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGETED_KEYWORD_TYPES = "targetedKeywordTypes";
  @SerializedName(SERIALIZED_NAME_TARGETED_KEYWORD_TYPES)
  private List<TargetedKeywordTypesEnum> targetedKeywordTypes = null;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone = "UTC";

  /**
   * View attribution window
   */
  @JsonAdapter(ViewAttributionWindowEnum.Adapter.class)
  public enum ViewAttributionWindowEnum {
    NONE("none"),
    
    _1D("1D"),
    
    _7D("7D"),
    
    _14D("14D"),
    
    _30D("30D");

    private String value;

    ViewAttributionWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewAttributionWindowEnum fromValue(String value) {
      for (ViewAttributionWindowEnum b : ViewAttributionWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewAttributionWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewAttributionWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewAttributionWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewAttributionWindowEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIEW_ATTRIBUTION_WINDOW = "viewAttributionWindow";
  @SerializedName(SERIALIZED_NAME_VIEW_ATTRIBUTION_WINDOW)
  private ViewAttributionWindowEnum viewAttributionWindow = ViewAttributionWindowEnum.NONE;

  public AsyncLineItemsReport() {
  }

  public AsyncLineItemsReport campaignType(CampaignTypeEnum campaignType) {
    
    this.campaignType = campaignType;
    return this;
  }

   /**
   * Filter the type of campaigns to report on: sponsoredProducts or onSiteDisplays
   * @return campaignType
  **/
  @javax.annotation.Nullable

  public CampaignTypeEnum getCampaignType() {
    return campaignType;
  }


  public void setCampaignType(CampaignTypeEnum campaignType) {
    this.campaignType = campaignType;
  }


  public AsyncLineItemsReport clickAttributionWindow(ClickAttributionWindowEnum clickAttributionWindow) {
    
    this.clickAttributionWindow = clickAttributionWindow;
    return this;
  }

   /**
   * Click attribution window
   * @return clickAttributionWindow
  **/
  @javax.annotation.Nullable

  public ClickAttributionWindowEnum getClickAttributionWindow() {
    return clickAttributionWindow;
  }


  public void setClickAttributionWindow(ClickAttributionWindowEnum clickAttributionWindow) {
    this.clickAttributionWindow = clickAttributionWindow;
  }


  public AsyncLineItemsReport dimensions(List<DimensionsEnum> dimensions) {
    
    this.dimensions = dimensions;
    return this;
  }

  public AsyncLineItemsReport addDimensionsItem(DimensionsEnum dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * List of dimensions to report on
   * @return dimensions
  **/
  @javax.annotation.Nullable

  public List<DimensionsEnum> getDimensions() {
    return dimensions;
  }


  public void setDimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
  }


  public AsyncLineItemsReport endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date
   * @return endDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public AsyncLineItemsReport format(FormatEnum format) {
    
    this.format = format;
    return this;
  }

   /**
   * Format of the output
   * @return format
  **/
  @javax.annotation.Nullable

  public FormatEnum getFormat() {
    return format;
  }


  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public AsyncLineItemsReport id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Line Item id to report on
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public AsyncLineItemsReport ids(List<String> ids) {
    
    this.ids = ids;
    return this;
  }

  public AsyncLineItemsReport addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Line Item ids to report on
   * @return ids
  **/
  @javax.annotation.Nullable

  public List<String> getIds() {
    return ids;
  }


  public void setIds(List<String> ids) {
    this.ids = ids;
  }


  public AsyncLineItemsReport mediaType(MediaTypeEnum mediaType) {
    
    this.mediaType = mediaType;
    return this;
  }

   /**
   * Filter on the type of media: unknown, display, video
   * @return mediaType
  **/
  @javax.annotation.Nullable

  public MediaTypeEnum getMediaType() {
    return mediaType;
  }


  public void setMediaType(MediaTypeEnum mediaType) {
    this.mediaType = mediaType;
  }


  public AsyncLineItemsReport metrics(List<MetricsEnum> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public AsyncLineItemsReport addMetricsItem(MetricsEnum metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * List of metrics to report on
   * @return metrics
  **/
  @javax.annotation.Nullable

  public List<MetricsEnum> getMetrics() {
    return metrics;
  }


  public void setMetrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
  }


  public AsyncLineItemsReport reportType(ReportTypeEnum reportType) {
    
    this.reportType = reportType;
    return this;
  }

   /**
   * Type of report, if no dimensions and metrics are provided, falls back to summary reportType
   * @return reportType
  **/
  @javax.annotation.Nullable

  public ReportTypeEnum getReportType() {
    return reportType;
  }


  public void setReportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
  }


  public AsyncLineItemsReport salesChannel(SalesChannelEnum salesChannel) {
    
    this.salesChannel = salesChannel;
    return this;
  }

   /**
   * Filter on specific sales channel: offline or online
   * @return salesChannel
  **/
  @javax.annotation.Nullable

  public SalesChannelEnum getSalesChannel() {
    return salesChannel;
  }


  public void setSalesChannel(SalesChannelEnum salesChannel) {
    this.salesChannel = salesChannel;
  }


  public AsyncLineItemsReport searchTermTargetings(List<SearchTermTargetingsEnum> searchTermTargetings) {
    
    this.searchTermTargetings = searchTermTargetings;
    return this;
  }

  public AsyncLineItemsReport addSearchTermTargetingsItem(SearchTermTargetingsEnum searchTermTargetingsItem) {
    if (this.searchTermTargetings == null) {
      this.searchTermTargetings = new ArrayList<>();
    }
    this.searchTermTargetings.add(searchTermTargetingsItem);
    return this;
  }

   /**
   * Filter on the type of search term targeting: unknown, automatic, manual
   * @return searchTermTargetings
  **/
  @javax.annotation.Nullable

  public List<SearchTermTargetingsEnum> getSearchTermTargetings() {
    return searchTermTargetings;
  }


  public void setSearchTermTargetings(List<SearchTermTargetingsEnum> searchTermTargetings) {
    this.searchTermTargetings = searchTermTargetings;
  }


  public AsyncLineItemsReport searchTermTypes(List<SearchTermTypesEnum> searchTermTypes) {
    
    this.searchTermTypes = searchTermTypes;
    return this;
  }

  public AsyncLineItemsReport addSearchTermTypesItem(SearchTermTypesEnum searchTermTypesItem) {
    if (this.searchTermTypes == null) {
      this.searchTermTypes = new ArrayList<>();
    }
    this.searchTermTypes.add(searchTermTypesItem);
    return this;
  }

   /**
   * Filter on the type of search term type: unknown, searched, entered
   * @return searchTermTypes
  **/
  @javax.annotation.Nullable

  public List<SearchTermTypesEnum> getSearchTermTypes() {
    return searchTermTypes;
  }


  public void setSearchTermTypes(List<SearchTermTypesEnum> searchTermTypes) {
    this.searchTermTypes = searchTermTypes;
  }


  public AsyncLineItemsReport startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public AsyncLineItemsReport targetedKeywordTypes(List<TargetedKeywordTypesEnum> targetedKeywordTypes) {
    
    this.targetedKeywordTypes = targetedKeywordTypes;
    return this;
  }

  public AsyncLineItemsReport addTargetedKeywordTypesItem(TargetedKeywordTypesEnum targetedKeywordTypesItem) {
    if (this.targetedKeywordTypes == null) {
      this.targetedKeywordTypes = new ArrayList<>();
    }
    this.targetedKeywordTypes.add(targetedKeywordTypesItem);
    return this;
  }

   /**
   * Filter on targeted keyword type: unknown, generic, branded, conquesting
   * @return targetedKeywordTypes
  **/
  @javax.annotation.Nullable

  public List<TargetedKeywordTypesEnum> getTargetedKeywordTypes() {
    return targetedKeywordTypes;
  }


  public void setTargetedKeywordTypes(List<TargetedKeywordTypesEnum> targetedKeywordTypes) {
    this.targetedKeywordTypes = targetedKeywordTypes;
  }


  public AsyncLineItemsReport timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Time zone : see criteo developer portal for supported time zones
   * @return timezone
  **/
  @javax.annotation.Nullable

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public AsyncLineItemsReport viewAttributionWindow(ViewAttributionWindowEnum viewAttributionWindow) {
    
    this.viewAttributionWindow = viewAttributionWindow;
    return this;
  }

   /**
   * View attribution window
   * @return viewAttributionWindow
  **/
  @javax.annotation.Nullable

  public ViewAttributionWindowEnum getViewAttributionWindow() {
    return viewAttributionWindow;
  }


  public void setViewAttributionWindow(ViewAttributionWindowEnum viewAttributionWindow) {
    this.viewAttributionWindow = viewAttributionWindow;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AsyncLineItemsReport instance itself
   */
  public AsyncLineItemsReport putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncLineItemsReport asyncLineItemsReport = (AsyncLineItemsReport) o;
    return Objects.equals(this.campaignType, asyncLineItemsReport.campaignType) &&
        Objects.equals(this.clickAttributionWindow, asyncLineItemsReport.clickAttributionWindow) &&
        Objects.equals(this.dimensions, asyncLineItemsReport.dimensions) &&
        Objects.equals(this.endDate, asyncLineItemsReport.endDate) &&
        Objects.equals(this.format, asyncLineItemsReport.format) &&
        Objects.equals(this.id, asyncLineItemsReport.id) &&
        Objects.equals(this.ids, asyncLineItemsReport.ids) &&
        Objects.equals(this.mediaType, asyncLineItemsReport.mediaType) &&
        Objects.equals(this.metrics, asyncLineItemsReport.metrics) &&
        Objects.equals(this.reportType, asyncLineItemsReport.reportType) &&
        Objects.equals(this.salesChannel, asyncLineItemsReport.salesChannel) &&
        Objects.equals(this.searchTermTargetings, asyncLineItemsReport.searchTermTargetings) &&
        Objects.equals(this.searchTermTypes, asyncLineItemsReport.searchTermTypes) &&
        Objects.equals(this.startDate, asyncLineItemsReport.startDate) &&
        Objects.equals(this.targetedKeywordTypes, asyncLineItemsReport.targetedKeywordTypes) &&
        Objects.equals(this.timezone, asyncLineItemsReport.timezone) &&
        Objects.equals(this.viewAttributionWindow, asyncLineItemsReport.viewAttributionWindow)&&
        Objects.equals(this.additionalProperties, asyncLineItemsReport.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignType, clickAttributionWindow, dimensions, endDate, format, id, ids, mediaType, metrics, reportType, salesChannel, searchTermTargetings, searchTermTypes, startDate, targetedKeywordTypes, timezone, viewAttributionWindow, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncLineItemsReport {\n");
    sb.append("    campaignType: ").append(toIndentedString(campaignType)).append("\n");
    sb.append("    clickAttributionWindow: ").append(toIndentedString(clickAttributionWindow)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    searchTermTargetings: ").append(toIndentedString(searchTermTargetings)).append("\n");
    sb.append("    searchTermTypes: ").append(toIndentedString(searchTermTypes)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    targetedKeywordTypes: ").append(toIndentedString(targetedKeywordTypes)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    viewAttributionWindow: ").append(toIndentedString(viewAttributionWindow)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaignType");
    openapiFields.add("clickAttributionWindow");
    openapiFields.add("dimensions");
    openapiFields.add("endDate");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("ids");
    openapiFields.add("mediaType");
    openapiFields.add("metrics");
    openapiFields.add("reportType");
    openapiFields.add("salesChannel");
    openapiFields.add("searchTermTargetings");
    openapiFields.add("searchTermTypes");
    openapiFields.add("startDate");
    openapiFields.add("targetedKeywordTypes");
    openapiFields.add("timezone");
    openapiFields.add("viewAttributionWindow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AsyncLineItemsReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AsyncLineItemsReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsyncLineItemsReport is not found in the empty JSON string", AsyncLineItemsReport.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AsyncLineItemsReport.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("campaignType") != null && !jsonObj.get("campaignType").isJsonNull()) && !jsonObj.get("campaignType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignType").toString()));
      }
      if ((jsonObj.get("clickAttributionWindow") != null && !jsonObj.get("clickAttributionWindow").isJsonNull()) && !jsonObj.get("clickAttributionWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickAttributionWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickAttributionWindow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      if ((jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) && !jsonObj.get("mediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("reportType") != null && !jsonObj.get("reportType").isJsonNull()) && !jsonObj.get("reportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportType").toString()));
      }
      if ((jsonObj.get("salesChannel") != null && !jsonObj.get("salesChannel").isJsonNull()) && !jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchTermTargetings") != null && !jsonObj.get("searchTermTargetings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTermTargetings` to be an array in the JSON string but got `%s`", jsonObj.get("searchTermTargetings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchTermTypes") != null && !jsonObj.get("searchTermTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTermTypes` to be an array in the JSON string but got `%s`", jsonObj.get("searchTermTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetedKeywordTypes") != null && !jsonObj.get("targetedKeywordTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetedKeywordTypes` to be an array in the JSON string but got `%s`", jsonObj.get("targetedKeywordTypes").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("viewAttributionWindow") != null && !jsonObj.get("viewAttributionWindow").isJsonNull()) && !jsonObj.get("viewAttributionWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewAttributionWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewAttributionWindow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsyncLineItemsReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsyncLineItemsReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsyncLineItemsReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsyncLineItemsReport.class));

       return (TypeAdapter<T>) new TypeAdapter<AsyncLineItemsReport>() {
           @Override
           public void write(JsonWriter out, AsyncLineItemsReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AsyncLineItemsReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AsyncLineItemsReport instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AsyncLineItemsReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AsyncLineItemsReport
  * @throws IOException if the JSON string is invalid with respect to AsyncLineItemsReport
  */
  public static AsyncLineItemsReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsyncLineItemsReport.class);
  }

 /**
  * Convert an instance of AsyncLineItemsReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

