/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_07.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2025_07.JSON;

/**
 * Reports on a line item which contains one or more actionable keyword reviews
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LineItemKeywordReviewReport {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CAMPAIGN_NAME = "campaignName";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_NAME)
  private String campaignName;

  public static final String SERIALIZED_NAME_COUNT_KEYWORDS = "countKeywords";
  @SerializedName(SERIALIZED_NAME_COUNT_KEYWORDS)
  private Integer countKeywords;

  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_LINE_ITEM_NAME = "lineItemName";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_NAME)
  private String lineItemName;

  public static final String SERIALIZED_NAME_RETAILER_ID = "retailerId";
  @SerializedName(SERIALIZED_NAME_RETAILER_ID)
  private String retailerId;

  public static final String SERIALIZED_NAME_RETAILER_NAME = "retailerName";
  @SerializedName(SERIALIZED_NAME_RETAILER_NAME)
  private String retailerName;

  public LineItemKeywordReviewReport() {
  }

  public LineItemKeywordReviewReport accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * External ID of the account containing the campaign containing the line item this report is for
   * @return accountId
  **/
  @javax.annotation.Nonnull

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public LineItemKeywordReviewReport accountName(String accountName) {
    
    this.accountName = accountName;
    return this;
  }

   /**
   * Name of the account containing the campaign containing the line item this report is for
   * @return accountName
  **/
  @javax.annotation.Nonnull

  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public LineItemKeywordReviewReport campaignId(String campaignId) {
    
    this.campaignId = campaignId;
    return this;
  }

   /**
   * External ID of the campaign containing the line item this report is for
   * @return campaignId
  **/
  @javax.annotation.Nonnull

  public String getCampaignId() {
    return campaignId;
  }


  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public LineItemKeywordReviewReport campaignName(String campaignName) {
    
    this.campaignName = campaignName;
    return this;
  }

   /**
   * Name of the campaign containing the line item this report is for
   * @return campaignName
  **/
  @javax.annotation.Nonnull

  public String getCampaignName() {
    return campaignName;
  }


  public void setCampaignName(String campaignName) {
    this.campaignName = campaignName;
  }


  public LineItemKeywordReviewReport countKeywords(Integer countKeywords) {
    
    this.countKeywords = countKeywords;
    return this;
  }

   /**
   * Number of PositiveExactMatch keywords on this line item that are in either \&quot;InReview\&quot; or \&quot;Pending\&quot; state
   * @return countKeywords
  **/
  @javax.annotation.Nonnull

  public Integer getCountKeywords() {
    return countKeywords;
  }


  public void setCountKeywords(Integer countKeywords) {
    this.countKeywords = countKeywords;
  }


  public LineItemKeywordReviewReport lineItemId(String lineItemId) {
    
    this.lineItemId = lineItemId;
    return this;
  }

   /**
   * External ID of the line item that this report is for
   * @return lineItemId
  **/
  @javax.annotation.Nonnull

  public String getLineItemId() {
    return lineItemId;
  }


  public void setLineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
  }


  public LineItemKeywordReviewReport lineItemName(String lineItemName) {
    
    this.lineItemName = lineItemName;
    return this;
  }

   /**
   * Name of the line item that this report is for
   * @return lineItemName
  **/
  @javax.annotation.Nonnull

  public String getLineItemName() {
    return lineItemName;
  }


  public void setLineItemName(String lineItemName) {
    this.lineItemName = lineItemName;
  }


  public LineItemKeywordReviewReport retailerId(String retailerId) {
    
    this.retailerId = retailerId;
    return this;
  }

   /**
   * Retailer ID connected to the line item this report is for
   * @return retailerId
  **/
  @javax.annotation.Nonnull

  public String getRetailerId() {
    return retailerId;
  }


  public void setRetailerId(String retailerId) {
    this.retailerId = retailerId;
  }


  public LineItemKeywordReviewReport retailerName(String retailerName) {
    
    this.retailerName = retailerName;
    return this;
  }

   /**
   * Name of the retailer connected to the line item this report is for
   * @return retailerName
  **/
  @javax.annotation.Nonnull

  public String getRetailerName() {
    return retailerName;
  }


  public void setRetailerName(String retailerName) {
    this.retailerName = retailerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemKeywordReviewReport lineItemKeywordReviewReport = (LineItemKeywordReviewReport) o;
    return Objects.equals(this.accountId, lineItemKeywordReviewReport.accountId) &&
        Objects.equals(this.accountName, lineItemKeywordReviewReport.accountName) &&
        Objects.equals(this.campaignId, lineItemKeywordReviewReport.campaignId) &&
        Objects.equals(this.campaignName, lineItemKeywordReviewReport.campaignName) &&
        Objects.equals(this.countKeywords, lineItemKeywordReviewReport.countKeywords) &&
        Objects.equals(this.lineItemId, lineItemKeywordReviewReport.lineItemId) &&
        Objects.equals(this.lineItemName, lineItemKeywordReviewReport.lineItemName) &&
        Objects.equals(this.retailerId, lineItemKeywordReviewReport.retailerId) &&
        Objects.equals(this.retailerName, lineItemKeywordReviewReport.retailerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountName, campaignId, campaignName, countKeywords, lineItemId, lineItemName, retailerId, retailerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemKeywordReviewReport {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    campaignName: ").append(toIndentedString(campaignName)).append("\n");
    sb.append("    countKeywords: ").append(toIndentedString(countKeywords)).append("\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    lineItemName: ").append(toIndentedString(lineItemName)).append("\n");
    sb.append("    retailerId: ").append(toIndentedString(retailerId)).append("\n");
    sb.append("    retailerName: ").append(toIndentedString(retailerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountName");
    openapiFields.add("campaignId");
    openapiFields.add("campaignName");
    openapiFields.add("countKeywords");
    openapiFields.add("lineItemId");
    openapiFields.add("lineItemName");
    openapiFields.add("retailerId");
    openapiFields.add("retailerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("campaignId");
    openapiRequiredFields.add("campaignName");
    openapiRequiredFields.add("countKeywords");
    openapiRequiredFields.add("lineItemId");
    openapiRequiredFields.add("lineItemName");
    openapiRequiredFields.add("retailerId");
    openapiRequiredFields.add("retailerName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LineItemKeywordReviewReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LineItemKeywordReviewReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemKeywordReviewReport is not found in the empty JSON string", LineItemKeywordReviewReport.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LineItemKeywordReviewReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemKeywordReviewReport` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LineItemKeywordReviewReport.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if (!jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if (!jsonObj.get("campaignName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignName").toString()));
      }
      if (!jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      if (!jsonObj.get("lineItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemName").toString()));
      }
      if (!jsonObj.get("retailerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retailerId").toString()));
      }
      if (!jsonObj.get("retailerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retailerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemKeywordReviewReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemKeywordReviewReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemKeywordReviewReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemKeywordReviewReport.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemKeywordReviewReport>() {
           @Override
           public void write(JsonWriter out, LineItemKeywordReviewReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemKeywordReviewReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LineItemKeywordReviewReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LineItemKeywordReviewReport
  * @throws IOException if the JSON string is invalid with respect to LineItemKeywordReviewReport
  */
  public static LineItemKeywordReviewReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemKeywordReviewReport.class);
  }

 /**
  * Convert an instance of LineItemKeywordReviewReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

