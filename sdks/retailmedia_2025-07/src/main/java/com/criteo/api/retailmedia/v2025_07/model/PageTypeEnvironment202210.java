/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_07.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.retailmedia.v2025_07.JSON;

/**
 * The PageType-Environment Tuples for creatives
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PageTypeEnvironment202210 {
  /**
   * Creative format, defining where the creative can be served
   */
  @JsonAdapter(EnvironmentsEnum.Adapter.class)
  public enum EnvironmentsEnum {
    WEB("Web"),
    
    MOBILE("Mobile"),
    
    APP("App"),
    
    LOCKOUT("Lockout"),
    
    MIXED("Mixed"),
    
    IOS("iOS"),
    
    ANDROID("Android");

    private String value;

    EnvironmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentsEnum fromValue(String value) {
      for (EnvironmentsEnum b : EnvironmentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENTS = "environments";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENTS)
  private List<EnvironmentsEnum> environments = null;

  /**
   * Creative PageType
   */
  @JsonAdapter(PageTypeEnum.Adapter.class)
  public enum PageTypeEnum {
    SEARCH("Search"),
    
    HOME("Home"),
    
    BROWSE("Browse"),
    
    CHECKOUT("Checkout"),
    
    CATEGORY("Category"),
    
    PRODUCTDETAIL("ProductDetail"),
    
    CONFIRMATION("Confirmation"),
    
    MERCHANDISING("Merchandising"),
    
    DEALS("Deals");

    private String value;

    PageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageTypeEnum fromValue(String value) {
      for (PageTypeEnum b : PageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAGE_TYPE = "pageType";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPE)
  private PageTypeEnum pageType;

  public PageTypeEnvironment202210() {
  }

  public PageTypeEnvironment202210 environments(List<EnvironmentsEnum> environments) {
    
    this.environments = environments;
    return this;
  }

  public PageTypeEnvironment202210 addEnvironmentsItem(EnvironmentsEnum environmentsItem) {
    if (this.environments == null) {
      this.environments = null;
    }
    this.environments.add(environmentsItem);
    return this;
  }

   /**
   * List of environments per PageType
   * @return environments
  **/
  @javax.annotation.Nullable

  public List<EnvironmentsEnum> getEnvironments() {
    return environments;
  }


  public void setEnvironments(List<EnvironmentsEnum> environments) {
    this.environments = environments;
  }


  public PageTypeEnvironment202210 pageType(PageTypeEnum pageType) {
    
    this.pageType = pageType;
    return this;
  }

   /**
   * Creative PageType
   * @return pageType
  **/
  @javax.annotation.Nullable

  public PageTypeEnum getPageType() {
    return pageType;
  }


  public void setPageType(PageTypeEnum pageType) {
    this.pageType = pageType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTypeEnvironment202210 pageTypeEnvironment202210 = (PageTypeEnvironment202210) o;
    return Objects.equals(this.environments, pageTypeEnvironment202210.environments) &&
        Objects.equals(this.pageType, pageTypeEnvironment202210.pageType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(environments, pageType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTypeEnvironment202210 {\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environments");
    openapiFields.add("pageType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PageTypeEnvironment202210
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PageTypeEnvironment202210.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTypeEnvironment202210 is not found in the empty JSON string", PageTypeEnvironment202210.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PageTypeEnvironment202210.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageTypeEnvironment202210` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("environments") != null && !jsonObj.get("environments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environments` to be an array in the JSON string but got `%s`", jsonObj.get("environments").toString()));
      }
      if ((jsonObj.get("pageType") != null && !jsonObj.get("pageType").isJsonNull()) && !jsonObj.get("pageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTypeEnvironment202210.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTypeEnvironment202210' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTypeEnvironment202210> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTypeEnvironment202210.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTypeEnvironment202210>() {
           @Override
           public void write(JsonWriter out, PageTypeEnvironment202210 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTypeEnvironment202210 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PageTypeEnvironment202210 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PageTypeEnvironment202210
  * @throws IOException if the JSON string is invalid with respect to PageTypeEnvironment202210
  */
  public static PageTypeEnvironment202210 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTypeEnvironment202210.class);
  }

 /**
  * Convert an instance of PageTypeEnvironment202210 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

