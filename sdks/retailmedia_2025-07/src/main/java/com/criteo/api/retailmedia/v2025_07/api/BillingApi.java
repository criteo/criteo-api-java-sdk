/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_07.api;

import com.criteo.api.retailmedia.v2025_07.ApiCallback;
import com.criteo.api.retailmedia.v2025_07.ApiClient;
import com.criteo.api.retailmedia.v2025_07.ApiException;
import com.criteo.api.retailmedia.v2025_07.ApiResponse;
import com.criteo.api.retailmedia.v2025_07.Configuration;
import com.criteo.api.retailmedia.v2025_07.Pair;
import com.criteo.api.retailmedia.v2025_07.ProgressRequestBody;
import com.criteo.api.retailmedia.v2025_07.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.v2025_07.model.EntityResourceOutcomePartnerBillingReportStatusV1;
import java.io.File;
import com.criteo.api.retailmedia.v2025_07.model.ValueResourceInputPartnerBillingReportRequestV1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BillingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPartnerBillingReportRequestV1
     * @param valueResourceInputPartnerBillingReportRequestV1 Partner Billing Report request object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPartnerBillingReportRequestV1Call(ValueResourceInputPartnerBillingReportRequestV1 valueResourceInputPartnerBillingReportRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = valueResourceInputPartnerBillingReportRequestV1;

        // create path and map variables
        String localVarPath = "/2025-07/retail-media/billing/partner-report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPartnerBillingReportRequestV1ValidateBeforeCall(ValueResourceInputPartnerBillingReportRequestV1 valueResourceInputPartnerBillingReportRequestV1, final ApiCallback _callback) throws ApiException {
        return createPartnerBillingReportRequestV1Call(valueResourceInputPartnerBillingReportRequestV1, _callback);

    }

    /**
     * 
     * Create a Partner Billing Report request.
     * @param valueResourceInputPartnerBillingReportRequestV1 Partner Billing Report request object. (optional)
     * @return EntityResourceOutcomePartnerBillingReportStatusV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomePartnerBillingReportStatusV1 createPartnerBillingReportRequestV1(ValueResourceInputPartnerBillingReportRequestV1 valueResourceInputPartnerBillingReportRequestV1) throws ApiException {
        ApiResponse<EntityResourceOutcomePartnerBillingReportStatusV1> localVarResp = createPartnerBillingReportRequestV1WithHttpInfo(valueResourceInputPartnerBillingReportRequestV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Partner Billing Report request.
     * @param valueResourceInputPartnerBillingReportRequestV1 Partner Billing Report request object. (optional)
     * @return ApiResponse&lt;EntityResourceOutcomePartnerBillingReportStatusV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomePartnerBillingReportStatusV1> createPartnerBillingReportRequestV1WithHttpInfo(ValueResourceInputPartnerBillingReportRequestV1 valueResourceInputPartnerBillingReportRequestV1) throws ApiException {
        okhttp3.Call localVarCall = createPartnerBillingReportRequestV1ValidateBeforeCall(valueResourceInputPartnerBillingReportRequestV1, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomePartnerBillingReportStatusV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Partner Billing Report request.
     * @param valueResourceInputPartnerBillingReportRequestV1 Partner Billing Report request object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPartnerBillingReportRequestV1Async(ValueResourceInputPartnerBillingReportRequestV1 valueResourceInputPartnerBillingReportRequestV1, final ApiCallback<EntityResourceOutcomePartnerBillingReportStatusV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPartnerBillingReportRequestV1ValidateBeforeCall(valueResourceInputPartnerBillingReportRequestV1, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomePartnerBillingReportStatusV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartnerBillingReportOutputV1
     * @param requestId The id of a Partner Billing Report request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerBillingReportOutputV1Call(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/retail-media/billing/partner-report/{requestId}/output"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartnerBillingReportOutputV1ValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getPartnerBillingReportOutputV1(Async)");
        }

        return getPartnerBillingReportOutputV1Call(requestId, _callback);

    }

    /**
     * 
     * Get the output of an existing Partner Billing Report.
     * @param requestId The id of a Partner Billing Report request. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File getPartnerBillingReportOutputV1(String requestId) throws ApiException {
        ApiResponse<File> localVarResp = getPartnerBillingReportOutputV1WithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the output of an existing Partner Billing Report.
     * @param requestId The id of a Partner Billing Report request. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPartnerBillingReportOutputV1WithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = getPartnerBillingReportOutputV1ValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the output of an existing Partner Billing Report.
     * @param requestId The id of a Partner Billing Report request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerBillingReportOutputV1Async(String requestId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartnerBillingReportOutputV1ValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartnerBillingReportStatusV1
     * @param requestId The id of a Partner Billing Report request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerBillingReportStatusV1Call(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-07/retail-media/billing/partner-report/{requestId}/status"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartnerBillingReportStatusV1ValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getPartnerBillingReportStatusV1(Async)");
        }

        return getPartnerBillingReportStatusV1Call(requestId, _callback);

    }

    /**
     * 
     * Get the status of an existing Partner Billing Report.
     * @param requestId The id of a Partner Billing Report request. (required)
     * @return EntityResourceOutcomePartnerBillingReportStatusV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityResourceOutcomePartnerBillingReportStatusV1 getPartnerBillingReportStatusV1(String requestId) throws ApiException {
        ApiResponse<EntityResourceOutcomePartnerBillingReportStatusV1> localVarResp = getPartnerBillingReportStatusV1WithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the status of an existing Partner Billing Report.
     * @param requestId The id of a Partner Billing Report request. (required)
     * @return ApiResponse&lt;EntityResourceOutcomePartnerBillingReportStatusV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResourceOutcomePartnerBillingReportStatusV1> getPartnerBillingReportStatusV1WithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = getPartnerBillingReportStatusV1ValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomePartnerBillingReportStatusV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the status of an existing Partner Billing Report.
     * @param requestId The id of a Partner Billing Report request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerBillingReportStatusV1Async(String requestId, final ApiCallback<EntityResourceOutcomePartnerBillingReportStatusV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartnerBillingReportStatusV1ValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<EntityResourceOutcomePartnerBillingReportStatusV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
