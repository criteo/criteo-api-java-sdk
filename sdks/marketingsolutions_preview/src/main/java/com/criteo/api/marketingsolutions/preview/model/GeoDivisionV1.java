/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Geo area defined by country/zipcode/city/subdivision.
 */
@ApiModel(description = "Geo area defined by country/zipcode/city/subdivision.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GeoDivisionV1 {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_CITY_GEO_NAME_ID = "cityGeoNameId";
  @SerializedName(SERIALIZED_NAME_CITY_GEO_NAME_ID)
  private String cityGeoNameId;

  public static final String SERIALIZED_NAME_SUBDIVISION_CODE = "subdivisionCode";
  @SerializedName(SERIALIZED_NAME_SUBDIVISION_CODE)
  private String subdivisionCode;


  public GeoDivisionV1 country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Country code (iso alpha-2)
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country code (iso alpha-2)")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public GeoDivisionV1 zipCode(String zipCode) {
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * ZipCode in the country
   * @return zipCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ZipCode in the country")

  public String getZipCode() {
    return zipCode;
  }


  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public GeoDivisionV1 cityGeoNameId(String cityGeoNameId) {
    
    this.cityGeoNameId = cityGeoNameId;
    return this;
  }

   /**
   * City id defined by GeoName api
   * @return cityGeoNameId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City id defined by GeoName api")

  public String getCityGeoNameId() {
    return cityGeoNameId;
  }


  public void setCityGeoNameId(String cityGeoNameId) {
    this.cityGeoNameId = cityGeoNameId;
  }


  public GeoDivisionV1 subdivisionCode(String subdivisionCode) {
    
    this.subdivisionCode = subdivisionCode;
    return this;
  }

   /**
   * Subdivision iso code
   * @return subdivisionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subdivision iso code")

  public String getSubdivisionCode() {
    return subdivisionCode;
  }


  public void setSubdivisionCode(String subdivisionCode) {
    this.subdivisionCode = subdivisionCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoDivisionV1 geoDivisionV1 = (GeoDivisionV1) o;
    return Objects.equals(this.country, geoDivisionV1.country) &&
        Objects.equals(this.zipCode, geoDivisionV1.zipCode) &&
        Objects.equals(this.cityGeoNameId, geoDivisionV1.cityGeoNameId) &&
        Objects.equals(this.subdivisionCode, geoDivisionV1.subdivisionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, zipCode, cityGeoNameId, subdivisionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoDivisionV1 {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    cityGeoNameId: ").append(toIndentedString(cityGeoNameId)).append("\n");
    sb.append("    subdivisionCode: ").append(toIndentedString(subdivisionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

