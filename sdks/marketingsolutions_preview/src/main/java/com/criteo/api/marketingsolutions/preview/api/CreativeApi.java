/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.api;

import com.criteo.api.marketingsolutions.preview.ApiCallback;
import com.criteo.api.marketingsolutions.preview.ApiClient;
import com.criteo.api.marketingsolutions.preview.ApiException;
import com.criteo.api.marketingsolutions.preview.ApiResponse;
import com.criteo.api.marketingsolutions.preview.Configuration;
import com.criteo.api.marketingsolutions.preview.Pair;
import com.criteo.api.marketingsolutions.preview.ProgressRequestBody;
import com.criteo.api.marketingsolutions.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.marketingsolutions.preview.model.AdListResponse;
import com.criteo.api.marketingsolutions.preview.model.AdResponse;
import com.criteo.api.marketingsolutions.preview.model.AdWriteRequest;
import com.criteo.api.marketingsolutions.preview.model.CouponListResponse;
import com.criteo.api.marketingsolutions.preview.model.CouponResponse;
import com.criteo.api.marketingsolutions.preview.model.CouponSupportedSizesResponse;
import com.criteo.api.marketingsolutions.preview.model.CreateCouponRequest;
import com.criteo.api.marketingsolutions.preview.model.CreativeListResponse;
import com.criteo.api.marketingsolutions.preview.model.CreativeResponse;
import com.criteo.api.marketingsolutions.preview.model.CreativeWriteRequest;
import com.criteo.api.marketingsolutions.preview.model.UpdateCouponRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreativeApi {
    private ApiClient localVarApiClient;

    public CreativeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreativeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAd
     * @param advertiserId The advertiser identifier. (required)
     * @param adWriteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdCall(String advertiserId, AdWriteRequest adWriteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adWriteRequest;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/ads"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdValidateBeforeCall(String advertiserId, AdWriteRequest adWriteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling createAd(Async)");
        }
        

        okhttp3.Call localVarCall = createAdCall(advertiserId, adWriteRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create an Ad
     * @param advertiserId The advertiser identifier. (required)
     * @param adWriteRequest  (optional)
     * @return AdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public AdResponse createAd(String advertiserId, AdWriteRequest adWriteRequest) throws ApiException {
        ApiResponse<AdResponse> localVarResp = createAdWithHttpInfo(advertiserId, adWriteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an Ad
     * @param advertiserId The advertiser identifier. (required)
     * @param adWriteRequest  (optional)
     * @return ApiResponse&lt;AdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdResponse> createAdWithHttpInfo(String advertiserId, AdWriteRequest adWriteRequest) throws ApiException {
        okhttp3.Call localVarCall = createAdValidateBeforeCall(advertiserId, adWriteRequest, null);
        Type localVarReturnType = new TypeToken<AdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Ad
     * @param advertiserId The advertiser identifier. (required)
     * @param adWriteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdAsync(String advertiserId, AdWriteRequest adWriteRequest, final ApiCallback<AdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdValidateBeforeCall(advertiserId, adWriteRequest, _callback);
        Type localVarReturnType = new TypeToken<AdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param createCouponRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCouponCall(String advertiserId, CreateCouponRequest createCouponRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createCouponRequest;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCouponValidateBeforeCall(String advertiserId, CreateCouponRequest createCouponRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling createCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = createCouponCall(advertiserId, createCouponRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param createCouponRequest  (optional)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public CouponResponse createCoupon(String advertiserId, CreateCouponRequest createCouponRequest) throws ApiException {
        ApiResponse<CouponResponse> localVarResp = createCouponWithHttpInfo(advertiserId, createCouponRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param createCouponRequest  (optional)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponResponse> createCouponWithHttpInfo(String advertiserId, CreateCouponRequest createCouponRequest) throws ApiException {
        okhttp3.Call localVarCall = createCouponValidateBeforeCall(advertiserId, createCouponRequest, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param createCouponRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCouponAsync(String advertiserId, CreateCouponRequest createCouponRequest, final ApiCallback<CouponResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCouponValidateBeforeCall(advertiserId, createCouponRequest, _callback);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreative
     * @param advertiserId The advertiser identifier. (required)
     * @param creativeWriteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreativeCall(String advertiserId, CreativeWriteRequest creativeWriteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = creativeWriteRequest;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/creatives"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreativeValidateBeforeCall(String advertiserId, CreativeWriteRequest creativeWriteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling createCreative(Async)");
        }
        

        okhttp3.Call localVarCall = createCreativeCall(advertiserId, creativeWriteRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a Creative
     * @param advertiserId The advertiser identifier. (required)
     * @param creativeWriteRequest  (optional)
     * @return CreativeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public CreativeResponse createCreative(String advertiserId, CreativeWriteRequest creativeWriteRequest) throws ApiException {
        ApiResponse<CreativeResponse> localVarResp = createCreativeWithHttpInfo(advertiserId, creativeWriteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Creative
     * @param advertiserId The advertiser identifier. (required)
     * @param creativeWriteRequest  (optional)
     * @return ApiResponse&lt;CreativeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreativeResponse> createCreativeWithHttpInfo(String advertiserId, CreativeWriteRequest creativeWriteRequest) throws ApiException {
        okhttp3.Call localVarCall = createCreativeValidateBeforeCall(advertiserId, creativeWriteRequest, null);
        Type localVarReturnType = new TypeToken<CreativeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Creative
     * @param advertiserId The advertiser identifier. (required)
     * @param creativeWriteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreativeAsync(String advertiserId, CreativeWriteRequest creativeWriteRequest, final ApiCallback<CreativeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreativeValidateBeforeCall(advertiserId, creativeWriteRequest, _callback);
        Type localVarReturnType = new TypeToken<CreativeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAd
     * @param id The ad identifier to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/ads/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAd(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAdCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete an Ad
     * @param id The ad identifier to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAd(Integer id) throws ApiException {
        deleteAdWithHttpInfo(id);
    }

    /**
     * 
     * Delete an Ad
     * @param id The ad identifier to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteAdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an Ad
     * @param id The ad identifier to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons/{id}"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCouponValidateBeforeCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling deleteCoupon(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCouponCall(advertiserId, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCoupon(String advertiserId, String id) throws ApiException {
        deleteCouponWithHttpInfo(advertiserId, id);
    }

    /**
     * 
     * Delete a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCouponWithHttpInfo(String advertiserId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCouponValidateBeforeCall(advertiserId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponAsync(String advertiserId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCouponValidateBeforeCall(advertiserId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCreative
     * @param id The creative identifier to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCreativeCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/creatives/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCreativeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCreative(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCreativeCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a Creative if there are no ads binded to it
     * @param id The creative identifier to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCreative(String id) throws ApiException {
        deleteCreativeWithHttpInfo(id);
    }

    /**
     * 
     * Delete a Creative if there are no ads binded to it
     * @param id The creative identifier to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCreativeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCreativeValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Creative if there are no ads binded to it
     * @param id The creative identifier to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCreativeAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCreativeValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param updateCouponRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCouponCall(String advertiserId, String id, UpdateCouponRequest updateCouponRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateCouponRequest;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons/{id}"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCouponValidateBeforeCall(String advertiserId, String id, UpdateCouponRequest updateCouponRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling editCoupon(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = editCouponCall(advertiserId, id, updateCouponRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Edit a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param updateCouponRequest  (optional)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public CouponResponse editCoupon(String advertiserId, String id, UpdateCouponRequest updateCouponRequest) throws ApiException {
        ApiResponse<CouponResponse> localVarResp = editCouponWithHttpInfo(advertiserId, id, updateCouponRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param updateCouponRequest  (optional)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponResponse> editCouponWithHttpInfo(String advertiserId, String id, UpdateCouponRequest updateCouponRequest) throws ApiException {
        okhttp3.Call localVarCall = editCouponValidateBeforeCall(advertiserId, id, updateCouponRequest, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param updateCouponRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCouponAsync(String advertiserId, String id, UpdateCouponRequest updateCouponRequest, final ApiCallback<CouponResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCouponValidateBeforeCall(advertiserId, id, updateCouponRequest, _callback);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editCreative
     * @param id The creative identifier to edit. (required)
     * @param creativeWriteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCreativeCall(String id, CreativeWriteRequest creativeWriteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = creativeWriteRequest;

        // create path and map variables
        String localVarPath = "/preview/creatives/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCreativeValidateBeforeCall(String id, CreativeWriteRequest creativeWriteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editCreative(Async)");
        }
        

        okhttp3.Call localVarCall = editCreativeCall(id, creativeWriteRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Edit a specific Creative
     * @param id The creative identifier to edit. (required)
     * @param creativeWriteRequest  (optional)
     * @return CreativeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public CreativeResponse editCreative(String id, CreativeWriteRequest creativeWriteRequest) throws ApiException {
        ApiResponse<CreativeResponse> localVarResp = editCreativeWithHttpInfo(id, creativeWriteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit a specific Creative
     * @param id The creative identifier to edit. (required)
     * @param creativeWriteRequest  (optional)
     * @return ApiResponse&lt;CreativeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreativeResponse> editCreativeWithHttpInfo(String id, CreativeWriteRequest creativeWriteRequest) throws ApiException {
        okhttp3.Call localVarCall = editCreativeValidateBeforeCall(id, creativeWriteRequest, null);
        Type localVarReturnType = new TypeToken<CreativeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit a specific Creative
     * @param id The creative identifier to edit. (required)
     * @param creativeWriteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCreativeAsync(String id, CreativeWriteRequest creativeWriteRequest, final ApiCallback<CreativeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCreativeValidateBeforeCall(id, creativeWriteRequest, _callback);
        Type localVarReturnType = new TypeToken<CreativeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAd
     * @param id The ad identifier to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/ads/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAd(Async)");
        }
        

        okhttp3.Call localVarCall = getAdCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get an Ad with its id
     * @param id The ad identifier to retrieve. (required)
     * @return AdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public AdResponse getAd(Integer id) throws ApiException {
        ApiResponse<AdResponse> localVarResp = getAdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an Ad with its id
     * @param id The ad identifier to retrieve. (required)
     * @return ApiResponse&lt;AdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdResponse> getAdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getAdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Ad with its id
     * @param id The ad identifier to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdAsync(Integer id, final ApiCallback<AdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAds
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdsCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/ads"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdsValidateBeforeCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAds(Async)");
        }
        

        okhttp3.Call localVarCall = getAdsCall(advertiserId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the list of self-services Ads for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @return AdListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public AdListResponse getAds(String advertiserId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<AdListResponse> localVarResp = getAdsWithHttpInfo(advertiserId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of self-services Ads for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @return ApiResponse&lt;AdListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdListResponse> getAdsWithHttpInfo(String advertiserId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAdsValidateBeforeCall(advertiserId, limit, offset, null);
        Type localVarReturnType = new TypeToken<AdListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of self-services Ads for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdsAsync(String advertiserId, Integer limit, Integer offset, final ApiCallback<AdListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdsValidateBeforeCall(advertiserId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AdListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons/{id}"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponValidateBeforeCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getCoupon(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponCall(advertiserId, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a Coupon with its id
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public CouponResponse getCoupon(String advertiserId, String id) throws ApiException {
        ApiResponse<CouponResponse> localVarResp = getCouponWithHttpInfo(advertiserId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Coupon with its id
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponResponse> getCouponWithHttpInfo(String advertiserId, String id) throws ApiException {
        okhttp3.Call localVarCall = getCouponValidateBeforeCall(advertiserId, id, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Coupon with its id
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponAsync(String advertiserId, String id, final ApiCallback<CouponResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponValidateBeforeCall(advertiserId, id, _callback);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCouponPreview
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param width The width of the coupon to preview. (optional)
     * @param height The height of the coupon to preview. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponPreviewCall(String advertiserId, String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons/{id}/preview"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "text/html", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponPreviewValidateBeforeCall(String advertiserId, String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getCouponPreview(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCouponPreview(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponPreviewCall(advertiserId, id, width, height, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the preview of a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param width The width of the coupon to preview. (optional)
     * @param height The height of the coupon to preview. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public String getCouponPreview(String advertiserId, String id, Integer width, Integer height) throws ApiException {
        ApiResponse<String> localVarResp = getCouponPreviewWithHttpInfo(advertiserId, id, width, height);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the preview of a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param width The width of the coupon to preview. (optional)
     * @param height The height of the coupon to preview. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCouponPreviewWithHttpInfo(String advertiserId, String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = getCouponPreviewValidateBeforeCall(advertiserId, id, width, height, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the preview of a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param width The width of the coupon to preview. (optional)
     * @param height The height of the coupon to preview. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponPreviewAsync(String advertiserId, String id, Integer width, Integer height, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponPreviewValidateBeforeCall(advertiserId, id, width, height, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCouponSupportedSizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponSupportedSizesCall(String advertiserId, String adSetId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons-supported-sizes"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad-set-id", adSetId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponSupportedSizesValidateBeforeCall(String advertiserId, String adSetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getCouponSupportedSizes(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponSupportedSizesCall(advertiserId, adSetId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the list of Coupon supported sizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @return CouponSupportedSizesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public CouponSupportedSizesResponse getCouponSupportedSizes(String advertiserId, String adSetId) throws ApiException {
        ApiResponse<CouponSupportedSizesResponse> localVarResp = getCouponSupportedSizesWithHttpInfo(advertiserId, adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Coupon supported sizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @return ApiResponse&lt;CouponSupportedSizesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponSupportedSizesResponse> getCouponSupportedSizesWithHttpInfo(String advertiserId, String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getCouponSupportedSizesValidateBeforeCall(advertiserId, adSetId, null);
        Type localVarReturnType = new TypeToken<CouponSupportedSizesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Coupon supported sizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponSupportedSizesAsync(String advertiserId, String adSetId, final ApiCallback<CouponSupportedSizesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponSupportedSizesValidateBeforeCall(advertiserId, adSetId, _callback);
        Type localVarReturnType = new TypeToken<CouponSupportedSizesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoupons
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponsCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/coupons"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponsValidateBeforeCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponsCall(advertiserId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the list of self-services Coupons for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @return CouponListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public CouponListResponse getCoupons(String advertiserId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CouponListResponse> localVarResp = getCouponsWithHttpInfo(advertiserId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of self-services Coupons for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @return ApiResponse&lt;CouponListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponListResponse> getCouponsWithHttpInfo(String advertiserId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCouponsValidateBeforeCall(advertiserId, limit, offset, null);
        Type localVarReturnType = new TypeToken<CouponListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of self-services Coupons for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponsAsync(String advertiserId, Integer limit, Integer offset, final ApiCallback<CouponListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponsValidateBeforeCall(advertiserId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CouponListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreative
     * @param id The creative identifier to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativeCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/creatives/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreativeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCreative(Async)");
        }
        

        okhttp3.Call localVarCall = getCreativeCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a Creative with its id
     * @param id The creative identifier to retrieve. (required)
     * @return CreativeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public CreativeResponse getCreative(String id) throws ApiException {
        ApiResponse<CreativeResponse> localVarResp = getCreativeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Creative with its id
     * @param id The creative identifier to retrieve. (required)
     * @return ApiResponse&lt;CreativeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreativeResponse> getCreativeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCreativeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreativeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Creative with its id
     * @param id The creative identifier to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativeAsync(String id, final ApiCallback<CreativeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreativeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreativeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreativePreview
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativePreviewCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/creatives/{id}/preview"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "text/html", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreativePreviewValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCreativePreview(Async)");
        }
        

        okhttp3.Call localVarCall = getCreativePreviewCall(id, width, height, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public String getCreativePreview(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<String> localVarResp = getCreativePreviewWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCreativePreviewWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = getCreativePreviewValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativePreviewAsync(String id, Integer width, Integer height, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreativePreviewValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreativePreviewPost
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativePreviewPostCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/creatives/{id}/preview"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "text/html", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreativePreviewPostValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCreativePreviewPost(Async)");
        }
        

        okhttp3.Call localVarCall = getCreativePreviewPostCall(id, width, height, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public String getCreativePreviewPost(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<String> localVarResp = getCreativePreviewPostWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCreativePreviewPostWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = getCreativePreviewPostValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param width The width of the Creative to preview. (optional)
     * @param height The height of the Creative to preview. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativePreviewPostAsync(String id, Integer width, Integer height, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreativePreviewPostValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreatives
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativesCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiser-id}/creatives"
            .replaceAll("\\{" + "advertiser-id" + "\\}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreativesValidateBeforeCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getCreatives(Async)");
        }
        

        okhttp3.Call localVarCall = getCreativesCall(advertiserId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the list of self-services Creatives for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @return CreativeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public CreativeListResponse getCreatives(String advertiserId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CreativeListResponse> localVarResp = getCreativesWithHttpInfo(advertiserId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of self-services Creatives for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @return ApiResponse&lt;CreativeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreativeListResponse> getCreativesWithHttpInfo(String advertiserId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCreativesValidateBeforeCall(advertiserId, limit, offset, null);
        Type localVarReturnType = new TypeToken<CreativeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of self-services Creatives for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativesAsync(String advertiserId, Integer limit, Integer offset, final ApiCallback<CreativeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreativesValidateBeforeCall(advertiserId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CreativeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
