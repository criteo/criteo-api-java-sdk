/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.marketingsolutions.preview.model.ReportDetailErrors;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The report on a given operationToken is ready. The report is available for 4 days
 */
@ApiModel(description = "The report on a given operationToken is ready. The report is available for 4 days")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportOkResponse {
  /**
   * The status of the operation. The operation is completed when the status is one of (VALIDATED,VALIDATED_WITH_ERRORS,FAILED)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACCEPTED("ACCEPTED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    VALIDATED("VALIDATED"),
    
    VALIDATED_WITH_ERRORS("VALIDATED_WITH_ERRORS"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_IMPORT_REQUEST_TIMESTAMP = "importRequestTimestamp";
  @SerializedName(SERIALIZED_NAME_IMPORT_REQUEST_TIMESTAMP)
  private Long importRequestTimestamp;

  public static final String SERIALIZED_NAME_NUMBER_OF_PRODUCTS_IN_THE_BATCH = "numberOfProductsInTheBatch";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PRODUCTS_IN_THE_BATCH)
  private Integer numberOfProductsInTheBatch;

  public static final String SERIALIZED_NAME_NUMBER_OF_PRODUCTS_UPSERTED = "numberOfProductsUpserted";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PRODUCTS_UPSERTED)
  private Integer numberOfProductsUpserted;

  public static final String SERIALIZED_NAME_NUMBER_OF_PRODUCTS_DELETED = "numberOfProductsDeleted";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PRODUCTS_DELETED)
  private Integer numberOfProductsDeleted;

  public static final String SERIALIZED_NAME_NUMBER_OF_PRODUCTS_WITH_ERRORS = "numberOfProductsWithErrors";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PRODUCTS_WITH_ERRORS)
  private Integer numberOfProductsWithErrors;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private List<ReportDetailErrors> errorDetails = new ArrayList<>();


  public ReportOkResponse status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the operation. The operation is completed when the status is one of (VALIDATED,VALIDATED_WITH_ERRORS,FAILED)
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the operation. The operation is completed when the status is one of (VALIDATED,VALIDATED_WITH_ERRORS,FAILED)")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ReportOkResponse importRequestTimestamp(Long importRequestTimestamp) {
    
    this.importRequestTimestamp = importRequestTimestamp;
    return this;
  }

   /**
   * The date when the original batch request was sent.
   * @return importRequestTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date when the original batch request was sent.")

  public Long getImportRequestTimestamp() {
    return importRequestTimestamp;
  }


  public void setImportRequestTimestamp(Long importRequestTimestamp) {
    this.importRequestTimestamp = importRequestTimestamp;
  }


  public ReportOkResponse numberOfProductsInTheBatch(Integer numberOfProductsInTheBatch) {
    
    this.numberOfProductsInTheBatch = numberOfProductsInTheBatch;
    return this;
  }

   /**
   * The number of products present in the batch.
   * @return numberOfProductsInTheBatch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of products present in the batch.")

  public Integer getNumberOfProductsInTheBatch() {
    return numberOfProductsInTheBatch;
  }


  public void setNumberOfProductsInTheBatch(Integer numberOfProductsInTheBatch) {
    this.numberOfProductsInTheBatch = numberOfProductsInTheBatch;
  }


  public ReportOkResponse numberOfProductsUpserted(Integer numberOfProductsUpserted) {
    
    this.numberOfProductsUpserted = numberOfProductsUpserted;
    return this;
  }

   /**
   * The number of products upserted.
   * @return numberOfProductsUpserted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of products upserted.")

  public Integer getNumberOfProductsUpserted() {
    return numberOfProductsUpserted;
  }


  public void setNumberOfProductsUpserted(Integer numberOfProductsUpserted) {
    this.numberOfProductsUpserted = numberOfProductsUpserted;
  }


  public ReportOkResponse numberOfProductsDeleted(Integer numberOfProductsDeleted) {
    
    this.numberOfProductsDeleted = numberOfProductsDeleted;
    return this;
  }

   /**
   * The number of products deleted.
   * @return numberOfProductsDeleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of products deleted.")

  public Integer getNumberOfProductsDeleted() {
    return numberOfProductsDeleted;
  }


  public void setNumberOfProductsDeleted(Integer numberOfProductsDeleted) {
    this.numberOfProductsDeleted = numberOfProductsDeleted;
  }


  public ReportOkResponse numberOfProductsWithErrors(Integer numberOfProductsWithErrors) {
    
    this.numberOfProductsWithErrors = numberOfProductsWithErrors;
    return this;
  }

   /**
   * The number of products with errors.
   * @return numberOfProductsWithErrors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of products with errors.")

  public Integer getNumberOfProductsWithErrors() {
    return numberOfProductsWithErrors;
  }


  public void setNumberOfProductsWithErrors(Integer numberOfProductsWithErrors) {
    this.numberOfProductsWithErrors = numberOfProductsWithErrors;
  }


  public ReportOkResponse errorDetails(List<ReportDetailErrors> errorDetails) {
    
    this.errorDetails = errorDetails;
    return this;
  }

  public ReportOkResponse addErrorDetailsItem(ReportDetailErrors errorDetailsItem) {
    this.errorDetails.add(errorDetailsItem);
    return this;
  }

   /**
   * The list of errors with details.
   * @return errorDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of errors with details.")

  public List<ReportDetailErrors> getErrorDetails() {
    return errorDetails;
  }


  public void setErrorDetails(List<ReportDetailErrors> errorDetails) {
    this.errorDetails = errorDetails;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportOkResponse reportOkResponse = (ReportOkResponse) o;
    return Objects.equals(this.status, reportOkResponse.status) &&
        Objects.equals(this.importRequestTimestamp, reportOkResponse.importRequestTimestamp) &&
        Objects.equals(this.numberOfProductsInTheBatch, reportOkResponse.numberOfProductsInTheBatch) &&
        Objects.equals(this.numberOfProductsUpserted, reportOkResponse.numberOfProductsUpserted) &&
        Objects.equals(this.numberOfProductsDeleted, reportOkResponse.numberOfProductsDeleted) &&
        Objects.equals(this.numberOfProductsWithErrors, reportOkResponse.numberOfProductsWithErrors) &&
        Objects.equals(this.errorDetails, reportOkResponse.errorDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, importRequestTimestamp, numberOfProductsInTheBatch, numberOfProductsUpserted, numberOfProductsDeleted, numberOfProductsWithErrors, errorDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportOkResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    importRequestTimestamp: ").append(toIndentedString(importRequestTimestamp)).append("\n");
    sb.append("    numberOfProductsInTheBatch: ").append(toIndentedString(numberOfProductsInTheBatch)).append("\n");
    sb.append("    numberOfProductsUpserted: ").append(toIndentedString(numberOfProductsUpserted)).append("\n");
    sb.append("    numberOfProductsDeleted: ").append(toIndentedString(numberOfProductsDeleted)).append("\n");
    sb.append("    numberOfProductsWithErrors: ").append(toIndentedString(numberOfProductsWithErrors)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

