/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.marketingsolutions.preview.JSON;

/**
 * This is the message defining the query for Realtime report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GenerateRealtimeStatisticsReportRequestAttributes {
  public static final String SERIALIZED_NAME_ADSET_IDS = "adsetIds";
  @SerializedName(SERIALIZED_NAME_ADSET_IDS)
  private List<String> adsetIds = null;

  public static final String SERIALIZED_NAME_ADVERTISER_IDS = "advertiserIds";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_IDS)
  private List<String> advertiserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_IDS = "campaignIds";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_IDS)
  private List<String> campaignIds = null;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "EUR";

  /**
   * Gets or Sets dimensions
   */
  @JsonAdapter(DimensionsEnum.Adapter.class)
  public enum DimensionsEnum {
    ADVERTISER("Advertiser"),
    
    ADVERTISERID("AdvertiserId"),
    
    CAMPAIGN("Campaign"),
    
    CAMPAIGNID("CampaignId"),
    
    ADSET("Adset"),
    
    ADSETID("AdsetId"),
    
    YEAR("Year"),
    
    MONTH("Month"),
    
    WEEK("Week"),
    
    DAY("Day"),
    
    HOUR("Hour");

    private String value;

    DimensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionsEnum fromValue(String value) {
      for (DimensionsEnum b : DimensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<DimensionsEnum> dimensions = null;

  public static final String SERIALIZED_NAME_LOOKBACK_WINDOW = "lookbackWindow";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_WINDOW)
  private Integer lookbackWindow = 12;

  /**
   * Gets or Sets metrics
   */
  @JsonAdapter(MetricsEnum.Adapter.class)
  public enum MetricsEnum {
    CLICKS("Clicks"),
    
    COST("Cost"),
    
    DISPLAYS("Displays");

    private String value;

    MetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricsEnum fromValue(String value) {
      for (MetricsEnum b : MetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricsEnum> metrics = null;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone = "UTC";

  public GenerateRealtimeStatisticsReportRequestAttributes() {
  }

  public GenerateRealtimeStatisticsReportRequestAttributes adsetIds(List<String> adsetIds) {
    
    this.adsetIds = adsetIds;
    return this;
  }

  public GenerateRealtimeStatisticsReportRequestAttributes addAdsetIdsItem(String adsetIdsItem) {
    if (this.adsetIds == null) {
      this.adsetIds = null;
    }
    this.adsetIds.add(adsetIdsItem);
    return this;
  }

   /**
   * List of adset ids to filter.
   * @return adsetIds
  **/
  @javax.annotation.Nullable

  public List<String> getAdsetIds() {
    return adsetIds;
  }


  public void setAdsetIds(List<String> adsetIds) {
    this.adsetIds = adsetIds;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes advertiserIds(List<String> advertiserIds) {
    
    this.advertiserIds = advertiserIds;
    return this;
  }

  public GenerateRealtimeStatisticsReportRequestAttributes addAdvertiserIdsItem(String advertiserIdsItem) {
    this.advertiserIds.add(advertiserIdsItem);
    return this;
  }

   /**
   * List of advertiser ids to report on.
   * @return advertiserIds
  **/
  @javax.annotation.Nonnull

  public List<String> getAdvertiserIds() {
    return advertiserIds;
  }


  public void setAdvertiserIds(List<String> advertiserIds) {
    this.advertiserIds = advertiserIds;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes campaignIds(List<String> campaignIds) {
    
    this.campaignIds = campaignIds;
    return this;
  }

  public GenerateRealtimeStatisticsReportRequestAttributes addCampaignIdsItem(String campaignIdsItem) {
    if (this.campaignIds == null) {
      this.campaignIds = null;
    }
    this.campaignIds.add(campaignIdsItem);
    return this;
  }

   /**
   * List of campaign ids to filter.
   * @return campaignIds
  **/
  @javax.annotation.Nullable

  public List<String> getCampaignIds() {
    return campaignIds;
  }


  public void setCampaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency used for the report. ISO 4217 code (three-letter capitals).
   * @return currency
  **/
  @javax.annotation.Nullable

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes dimensions(List<DimensionsEnum> dimensions) {
    
    this.dimensions = dimensions;
    return this;
  }

  public GenerateRealtimeStatisticsReportRequestAttributes addDimensionsItem(DimensionsEnum dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>(Arrays.asList(DimensionsEnum.ADVERTISERID, DimensionsEnum.ADVERTISER, DimensionsEnum.CAMPAIGNID, DimensionsEnum.CAMPAIGN, DimensionsEnum.ADSETID, DimensionsEnum.ADSET, DimensionsEnum.DAY, DimensionsEnum.HOUR));
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * List of dimensions for the report.
   * @return dimensions
  **/
  @javax.annotation.Nullable

  public List<DimensionsEnum> getDimensions() {
    return dimensions;
  }


  public void setDimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes lookbackWindow(Integer lookbackWindow) {
    
    this.lookbackWindow = lookbackWindow;
    return this;
  }

   /**
   * The number of hours to consider in the past.
   * minimum: 1
   * maximum: 24
   * @return lookbackWindow
  **/
  @javax.annotation.Nullable

  public Integer getLookbackWindow() {
    return lookbackWindow;
  }


  public void setLookbackWindow(Integer lookbackWindow) {
    this.lookbackWindow = lookbackWindow;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes metrics(List<MetricsEnum> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public GenerateRealtimeStatisticsReportRequestAttributes addMetricsItem(MetricsEnum metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>(Arrays.asList(MetricsEnum.DISPLAYS, MetricsEnum.CLICKS, MetricsEnum.COST));
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * List of metrics for the report.
   * @return metrics
  **/
  @javax.annotation.Nullable

  public List<MetricsEnum> getMetrics() {
    return metrics;
  }


  public void setMetrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
  }


  public GenerateRealtimeStatisticsReportRequestAttributes timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone used for the report.
   * @return timezone
  **/
  @javax.annotation.Nullable

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateRealtimeStatisticsReportRequestAttributes generateRealtimeStatisticsReportRequestAttributes = (GenerateRealtimeStatisticsReportRequestAttributes) o;
    return Objects.equals(this.adsetIds, generateRealtimeStatisticsReportRequestAttributes.adsetIds) &&
        Objects.equals(this.advertiserIds, generateRealtimeStatisticsReportRequestAttributes.advertiserIds) &&
        Objects.equals(this.campaignIds, generateRealtimeStatisticsReportRequestAttributes.campaignIds) &&
        Objects.equals(this.currency, generateRealtimeStatisticsReportRequestAttributes.currency) &&
        Objects.equals(this.dimensions, generateRealtimeStatisticsReportRequestAttributes.dimensions) &&
        Objects.equals(this.lookbackWindow, generateRealtimeStatisticsReportRequestAttributes.lookbackWindow) &&
        Objects.equals(this.metrics, generateRealtimeStatisticsReportRequestAttributes.metrics) &&
        Objects.equals(this.timezone, generateRealtimeStatisticsReportRequestAttributes.timezone);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(adsetIds, advertiserIds, campaignIds, currency, dimensions, lookbackWindow, metrics, timezone);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateRealtimeStatisticsReportRequestAttributes {\n");
    sb.append("    adsetIds: ").append(toIndentedString(adsetIds)).append("\n");
    sb.append("    advertiserIds: ").append(toIndentedString(advertiserIds)).append("\n");
    sb.append("    campaignIds: ").append(toIndentedString(campaignIds)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    lookbackWindow: ").append(toIndentedString(lookbackWindow)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adsetIds");
    openapiFields.add("advertiserIds");
    openapiFields.add("campaignIds");
    openapiFields.add("currency");
    openapiFields.add("dimensions");
    openapiFields.add("lookbackWindow");
    openapiFields.add("metrics");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("advertiserIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenerateRealtimeStatisticsReportRequestAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GenerateRealtimeStatisticsReportRequestAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateRealtimeStatisticsReportRequestAttributes is not found in the empty JSON string", GenerateRealtimeStatisticsReportRequestAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GenerateRealtimeStatisticsReportRequestAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateRealtimeStatisticsReportRequestAttributes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateRealtimeStatisticsReportRequestAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adsetIds") != null && !jsonObj.get("adsetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adsetIds` to be an array in the JSON string but got `%s`", jsonObj.get("adsetIds").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("advertiserIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("advertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("advertiserIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("campaignIds") != null && !jsonObj.get("campaignIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignIds` to be an array in the JSON string but got `%s`", jsonObj.get("campaignIds").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateRealtimeStatisticsReportRequestAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateRealtimeStatisticsReportRequestAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateRealtimeStatisticsReportRequestAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateRealtimeStatisticsReportRequestAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateRealtimeStatisticsReportRequestAttributes>() {
           @Override
           public void write(JsonWriter out, GenerateRealtimeStatisticsReportRequestAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateRealtimeStatisticsReportRequestAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateRealtimeStatisticsReportRequestAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateRealtimeStatisticsReportRequestAttributes
  * @throws IOException if the JSON string is invalid with respect to GenerateRealtimeStatisticsReportRequestAttributes
  */
  public static GenerateRealtimeStatisticsReportRequestAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateRealtimeStatisticsReportRequestAttributes.class);
  }

 /**
  * Convert an instance of GenerateRealtimeStatisticsReportRequestAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

