/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.marketingsolutions.preview.JSON;

/**
 * Request attributes for async audience performance report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GenerateAudiencePerformanceReportRequestAttributes {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  /**
   * The dimension for the report.
   */
  @JsonAdapter(DimensionEnum.Adapter.class)
  public enum DimensionEnum {
    ADVERTISERID("AdvertiserId"),
    
    ADVERTISER("Advertiser"),
    
    TOP30BRANDSBYDISPLAYS("Top30BrandsByDisplays"),
    
    TOP30BRANDSBYCLICKS("Top30BrandsByClicks"),
    
    TOP30BRANDSBYSALES("Top30BrandsBySales"),
    
    TOP30INTERESTSBYDISPLAYS("Top30InterestsByDisplays"),
    
    TOP30INTERESTSBYCLICKS("Top30InterestsByClicks"),
    
    TOP30INTERESTSBYSALES("Top30InterestsBySales");

    private String value;

    DimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionEnum fromValue(String value) {
      for (DimensionEnum b : DimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private DimensionEnum dimension;

  /**
   * Gets or Sets metrics
   */
  @JsonAdapter(MetricsEnum.Adapter.class)
  public enum MetricsEnum {
    CLICKS("Clicks"),
    
    DISPLAYS("Displays"),
    
    VISITS("Visits"),
    
    SALES("Sales"),
    
    REVENUE("Revenue"),
    
    COSTPERVISIT("CostPerVisit"),
    
    EXPOSEDUSERS("ExposedUsers");

    private String value;

    MetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricsEnum fromValue(String value) {
      for (MetricsEnum b : MetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricsEnum> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_AD_SET_IDS = "adSetIds";
  @SerializedName(SERIALIZED_NAME_AD_SET_IDS)
  private List<String> adSetIds = null;

  public static final String SERIALIZED_NAME_AUDIENCE_IDS = "audienceIds";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_IDS)
  private List<String> audienceIds = null;

  public static final String SERIALIZED_NAME_SEGMENTS_IDS = "segmentsIds";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_IDS)
  private List<String> segmentsIds = null;

  public GenerateAudiencePerformanceReportRequestAttributes() {
  }

  public GenerateAudiencePerformanceReportRequestAttributes startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public GenerateAudiencePerformanceReportRequestAttributes endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.
   * @return endDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public GenerateAudiencePerformanceReportRequestAttributes advertiserId(String advertiserId) {
    
    this.advertiserId = advertiserId;
    return this;
  }

   /**
   * The advertiser id
   * @return advertiserId
  **/
  @javax.annotation.Nonnull

  public String getAdvertiserId() {
    return advertiserId;
  }


  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public GenerateAudiencePerformanceReportRequestAttributes timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone used for the report. Timezone Database format (Tz).
   * @return timezone
  **/
  @javax.annotation.Nullable

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public GenerateAudiencePerformanceReportRequestAttributes dimension(DimensionEnum dimension) {
    
    this.dimension = dimension;
    return this;
  }

   /**
   * The dimension for the report.
   * @return dimension
  **/
  @javax.annotation.Nonnull

  public DimensionEnum getDimension() {
    return dimension;
  }


  public void setDimension(DimensionEnum dimension) {
    this.dimension = dimension;
  }


  public GenerateAudiencePerformanceReportRequestAttributes metrics(List<MetricsEnum> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public GenerateAudiencePerformanceReportRequestAttributes addMetricsItem(MetricsEnum metricsItem) {
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * The list of metrics to report.
   * @return metrics
  **/
  @javax.annotation.Nonnull

  public List<MetricsEnum> getMetrics() {
    return metrics;
  }


  public void setMetrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
  }


  public GenerateAudiencePerformanceReportRequestAttributes currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency used for the report. ISO 4217 code (three-letter capitals).
   * @return currency
  **/
  @javax.annotation.Nullable

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public GenerateAudiencePerformanceReportRequestAttributes adSetIds(List<String> adSetIds) {
    
    this.adSetIds = adSetIds;
    return this;
  }

  public GenerateAudiencePerformanceReportRequestAttributes addAdSetIdsItem(String adSetIdsItem) {
    if (this.adSetIds == null) {
      this.adSetIds = new ArrayList<>();
    }
    this.adSetIds.add(adSetIdsItem);
    return this;
  }

   /**
   * The list of adSets ids. If empty, all the adSets will be fetched.
   * @return adSetIds
  **/
  @javax.annotation.Nullable

  public List<String> getAdSetIds() {
    return adSetIds;
  }


  public void setAdSetIds(List<String> adSetIds) {
    this.adSetIds = adSetIds;
  }


  public GenerateAudiencePerformanceReportRequestAttributes audienceIds(List<String> audienceIds) {
    
    this.audienceIds = audienceIds;
    return this;
  }

  public GenerateAudiencePerformanceReportRequestAttributes addAudienceIdsItem(String audienceIdsItem) {
    if (this.audienceIds == null) {
      this.audienceIds = new ArrayList<>();
    }
    this.audienceIds.add(audienceIdsItem);
    return this;
  }

   /**
   * The list of Audiences ids. If empty, all the Audiences will be fetched.
   * @return audienceIds
  **/
  @javax.annotation.Nullable

  public List<String> getAudienceIds() {
    return audienceIds;
  }


  public void setAudienceIds(List<String> audienceIds) {
    this.audienceIds = audienceIds;
  }


  public GenerateAudiencePerformanceReportRequestAttributes segmentsIds(List<String> segmentsIds) {
    
    this.segmentsIds = segmentsIds;
    return this;
  }

  public GenerateAudiencePerformanceReportRequestAttributes addSegmentsIdsItem(String segmentsIdsItem) {
    if (this.segmentsIds == null) {
      this.segmentsIds = new ArrayList<>();
    }
    this.segmentsIds.add(segmentsIdsItem);
    return this;
  }

   /**
   * The list of Segments ids. If empty, all the segments will be fetched.
   * @return segmentsIds
  **/
  @javax.annotation.Nullable

  public List<String> getSegmentsIds() {
    return segmentsIds;
  }


  public void setSegmentsIds(List<String> segmentsIds) {
    this.segmentsIds = segmentsIds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GenerateAudiencePerformanceReportRequestAttributes instance itself
   */
  public GenerateAudiencePerformanceReportRequestAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateAudiencePerformanceReportRequestAttributes generateAudiencePerformanceReportRequestAttributes = (GenerateAudiencePerformanceReportRequestAttributes) o;
    return Objects.equals(this.startDate, generateAudiencePerformanceReportRequestAttributes.startDate) &&
        Objects.equals(this.endDate, generateAudiencePerformanceReportRequestAttributes.endDate) &&
        Objects.equals(this.advertiserId, generateAudiencePerformanceReportRequestAttributes.advertiserId) &&
        Objects.equals(this.timezone, generateAudiencePerformanceReportRequestAttributes.timezone) &&
        Objects.equals(this.dimension, generateAudiencePerformanceReportRequestAttributes.dimension) &&
        Objects.equals(this.metrics, generateAudiencePerformanceReportRequestAttributes.metrics) &&
        Objects.equals(this.currency, generateAudiencePerformanceReportRequestAttributes.currency) &&
        Objects.equals(this.adSetIds, generateAudiencePerformanceReportRequestAttributes.adSetIds) &&
        Objects.equals(this.audienceIds, generateAudiencePerformanceReportRequestAttributes.audienceIds) &&
        Objects.equals(this.segmentsIds, generateAudiencePerformanceReportRequestAttributes.segmentsIds)&&
        Objects.equals(this.additionalProperties, generateAudiencePerformanceReportRequestAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, advertiserId, timezone, dimension, metrics, currency, adSetIds, audienceIds, segmentsIds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateAudiencePerformanceReportRequestAttributes {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    adSetIds: ").append(toIndentedString(adSetIds)).append("\n");
    sb.append("    audienceIds: ").append(toIndentedString(audienceIds)).append("\n");
    sb.append("    segmentsIds: ").append(toIndentedString(segmentsIds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("advertiserId");
    openapiFields.add("timezone");
    openapiFields.add("dimension");
    openapiFields.add("metrics");
    openapiFields.add("currency");
    openapiFields.add("adSetIds");
    openapiFields.add("audienceIds");
    openapiFields.add("segmentsIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("advertiserId");
    openapiRequiredFields.add("dimension");
    openapiRequiredFields.add("metrics");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenerateAudiencePerformanceReportRequestAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GenerateAudiencePerformanceReportRequestAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateAudiencePerformanceReportRequestAttributes is not found in the empty JSON string", GenerateAudiencePerformanceReportRequestAttributes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateAudiencePerformanceReportRequestAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("dimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimension").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("metrics") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adSetIds") != null && !jsonObj.get("adSetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adSetIds` to be an array in the JSON string but got `%s`", jsonObj.get("adSetIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audienceIds") != null && !jsonObj.get("audienceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceIds` to be an array in the JSON string but got `%s`", jsonObj.get("audienceIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segmentsIds") != null && !jsonObj.get("segmentsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentsIds` to be an array in the JSON string but got `%s`", jsonObj.get("segmentsIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateAudiencePerformanceReportRequestAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateAudiencePerformanceReportRequestAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateAudiencePerformanceReportRequestAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateAudiencePerformanceReportRequestAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateAudiencePerformanceReportRequestAttributes>() {
           @Override
           public void write(JsonWriter out, GenerateAudiencePerformanceReportRequestAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateAudiencePerformanceReportRequestAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GenerateAudiencePerformanceReportRequestAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateAudiencePerformanceReportRequestAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateAudiencePerformanceReportRequestAttributes
  * @throws IOException if the JSON string is invalid with respect to GenerateAudiencePerformanceReportRequestAttributes
  */
  public static GenerateAudiencePerformanceReportRequestAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateAudiencePerformanceReportRequestAttributes.class);
  }

 /**
  * Convert an instance of GenerateAudiencePerformanceReportRequestAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

