/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.marketingsolutions.preview.model.CreativeLogo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The attributes specific to Dynamic creatives
 */
@ApiModel(description = "The attributes specific to Dynamic creatives")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DynamicAttributes {
  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private List<CreativeLogo> logos = null;

  public static final String SERIALIZED_NAME_CREATIVE_BACKGROUND_COLOR = "creativeBackgroundColor";
  @SerializedName(SERIALIZED_NAME_CREATIVE_BACKGROUND_COLOR)
  private String creativeBackgroundColor;

  public static final String SERIALIZED_NAME_BODY_TEXT_COLOR = "bodyTextColor";
  @SerializedName(SERIALIZED_NAME_BODY_TEXT_COLOR)
  private String bodyTextColor;

  public static final String SERIALIZED_NAME_PRICES_COLOR = "pricesColor";
  @SerializedName(SERIALIZED_NAME_PRICES_COLOR)
  private String pricesColor;

  public static final String SERIALIZED_NAME_PRIMARY_FONT = "primaryFont";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FONT)
  private String primaryFont;

  public static final String SERIALIZED_NAME_CALLS_TO_ACTION = "callsToAction";
  @SerializedName(SERIALIZED_NAME_CALLS_TO_ACTION)
  private List<String> callsToAction = null;

  /**
   * Value can be \&quot;ShowFullImage\&quot; or \&quot;ZoomOnImage\&quot;. Choose whether your product catalog images should fit inside the allocated  space (\&quot;ShowFullImage\&quot;) or whether they should fill that space (\&quot;ZoomOnImage\&quot;). If you choose ZoomOnImage, there may be some  image cropping.
   */
  @JsonAdapter(ProductImageDisplayEnum.Adapter.class)
  public enum ProductImageDisplayEnum {
    SHOWFULLIMAGE("ShowFullImage"),
    
    ZOOMONIMAGE("ZoomOnImage");

    private String value;

    ProductImageDisplayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductImageDisplayEnum fromValue(String value) {
      for (ProductImageDisplayEnum b : ProductImageDisplayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductImageDisplayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductImageDisplayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductImageDisplayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductImageDisplayEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_IMAGE_DISPLAY = "productImageDisplay";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IMAGE_DISPLAY)
  private ProductImageDisplayEnum productImageDisplay;


  public DynamicAttributes logos(List<CreativeLogo> logos) {
    
    this.logos = logos;
    return this;
  }

  public DynamicAttributes addLogosItem(CreativeLogo logosItem) {
    if (this.logos == null) {
      this.logos = new ArrayList<>();
    }
    this.logos.add(logosItem);
    return this;
  }

   /**
   * Logo images uploaded on demostatic.criteo.com when deploying and then static.criteo.net
   * @return logos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logo images uploaded on demostatic.criteo.com when deploying and then static.criteo.net")

  public List<CreativeLogo> getLogos() {
    return logos;
  }


  public void setLogos(List<CreativeLogo> logos) {
    this.logos = logos;
  }


  public DynamicAttributes creativeBackgroundColor(String creativeBackgroundColor) {
    
    this.creativeBackgroundColor = creativeBackgroundColor;
    return this;
  }

   /**
   * Color of the creative&#39;s background  Valid hexadecimal color (e.g. \&quot;AB00FF\&quot;)
   * @return creativeBackgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Color of the creative's background  Valid hexadecimal color (e.g. \"AB00FF\")")

  public String getCreativeBackgroundColor() {
    return creativeBackgroundColor;
  }


  public void setCreativeBackgroundColor(String creativeBackgroundColor) {
    this.creativeBackgroundColor = creativeBackgroundColor;
  }


  public DynamicAttributes bodyTextColor(String bodyTextColor) {
    
    this.bodyTextColor = bodyTextColor;
    return this;
  }

   /**
   * Color of the creative&#39;s body text  Valid hexadecimal color (e.g. \&quot;AB00FF\&quot;)
   * @return bodyTextColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Color of the creative's body text  Valid hexadecimal color (e.g. \"AB00FF\")")

  public String getBodyTextColor() {
    return bodyTextColor;
  }


  public void setBodyTextColor(String bodyTextColor) {
    this.bodyTextColor = bodyTextColor;
  }


  public DynamicAttributes pricesColor(String pricesColor) {
    
    this.pricesColor = pricesColor;
    return this;
  }

   /**
   * Color of the creative&#39;s prices  Valid hexadecimal color (e.g. \&quot;AB00FF\&quot;)
   * @return pricesColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Color of the creative's prices  Valid hexadecimal color (e.g. \"AB00FF\")")

  public String getPricesColor() {
    return pricesColor;
  }


  public void setPricesColor(String pricesColor) {
    this.pricesColor = pricesColor;
  }


  public DynamicAttributes primaryFont(String primaryFont) {
    
    this.primaryFont = primaryFont;
    return this;
  }

   /**
   * Font of the primary font  Valid supported font like \&quot;Arial\&quot;
   * @return primaryFont
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Font of the primary font  Valid supported font like \"Arial\"")

  public String getPrimaryFont() {
    return primaryFont;
  }


  public void setPrimaryFont(String primaryFont) {
    this.primaryFont = primaryFont;
  }


  public DynamicAttributes callsToAction(List<String> callsToAction) {
    
    this.callsToAction = callsToAction;
    return this;
  }

  public DynamicAttributes addCallsToActionItem(String callsToActionItem) {
    if (this.callsToAction == null) {
      this.callsToAction = new ArrayList<>();
    }
    this.callsToAction.add(callsToActionItem);
    return this;
  }

   /**
   * A Call-to-Action (CTA) is an action-driven instruction to your audience intended to provoke an immediate  response, such as “Buy now” or “Go!”.
   * @return callsToAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A Call-to-Action (CTA) is an action-driven instruction to your audience intended to provoke an immediate  response, such as “Buy now” or “Go!”.")

  public List<String> getCallsToAction() {
    return callsToAction;
  }


  public void setCallsToAction(List<String> callsToAction) {
    this.callsToAction = callsToAction;
  }


  public DynamicAttributes productImageDisplay(ProductImageDisplayEnum productImageDisplay) {
    
    this.productImageDisplay = productImageDisplay;
    return this;
  }

   /**
   * Value can be \&quot;ShowFullImage\&quot; or \&quot;ZoomOnImage\&quot;. Choose whether your product catalog images should fit inside the allocated  space (\&quot;ShowFullImage\&quot;) or whether they should fill that space (\&quot;ZoomOnImage\&quot;). If you choose ZoomOnImage, there may be some  image cropping.
   * @return productImageDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value can be \"ShowFullImage\" or \"ZoomOnImage\". Choose whether your product catalog images should fit inside the allocated  space (\"ShowFullImage\") or whether they should fill that space (\"ZoomOnImage\"). If you choose ZoomOnImage, there may be some  image cropping.")

  public ProductImageDisplayEnum getProductImageDisplay() {
    return productImageDisplay;
  }


  public void setProductImageDisplay(ProductImageDisplayEnum productImageDisplay) {
    this.productImageDisplay = productImageDisplay;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicAttributes dynamicAttributes = (DynamicAttributes) o;
    return Objects.equals(this.logos, dynamicAttributes.logos) &&
        Objects.equals(this.creativeBackgroundColor, dynamicAttributes.creativeBackgroundColor) &&
        Objects.equals(this.bodyTextColor, dynamicAttributes.bodyTextColor) &&
        Objects.equals(this.pricesColor, dynamicAttributes.pricesColor) &&
        Objects.equals(this.primaryFont, dynamicAttributes.primaryFont) &&
        Objects.equals(this.callsToAction, dynamicAttributes.callsToAction) &&
        Objects.equals(this.productImageDisplay, dynamicAttributes.productImageDisplay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logos, creativeBackgroundColor, bodyTextColor, pricesColor, primaryFont, callsToAction, productImageDisplay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicAttributes {\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    creativeBackgroundColor: ").append(toIndentedString(creativeBackgroundColor)).append("\n");
    sb.append("    bodyTextColor: ").append(toIndentedString(bodyTextColor)).append("\n");
    sb.append("    pricesColor: ").append(toIndentedString(pricesColor)).append("\n");
    sb.append("    primaryFont: ").append(toIndentedString(primaryFont)).append("\n");
    sb.append("    callsToAction: ").append(toIndentedString(callsToAction)).append("\n");
    sb.append("    productImageDisplay: ").append(toIndentedString(productImageDisplay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

