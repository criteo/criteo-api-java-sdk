/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.marketingsolutions.preview.model.AdaptiveColors;
import com.criteo.api.marketingsolutions.preview.model.ImageSet;
import com.criteo.api.marketingsolutions.preview.model.ImageShape;
import com.criteo.api.marketingsolutions.preview.model.VideoDetail;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

/**
 * The attributes specific to Adaptive creatives
 */
@ApiModel(description = "The attributes specific to Adaptive creatives")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AdaptiveAttributes {
  /**
   * Gets or Sets layouts
   */
  @JsonAdapter(LayoutsEnum.Adapter.class)
  public enum LayoutsEnum {
    EDITORIAL("Editorial"),
    
    MONTAGE("Montage"),
    
    INBANNERVIDEO("InBannerVideo");

    private String value;

    LayoutsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutsEnum fromValue(String value) {
      for (LayoutsEnum b : LayoutsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LayoutsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LayoutsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LAYOUTS = "layouts";
  @SerializedName(SERIALIZED_NAME_LAYOUTS)
  private List<LayoutsEnum> layouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private List<ImageShape> logos = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEADLINE_TEXT = "headlineText";
  @SerializedName(SERIALIZED_NAME_HEADLINE_TEXT)
  private String headlineText;

  public static final String SERIALIZED_NAME_HEADLINE_FONT = "headlineFont";
  @SerializedName(SERIALIZED_NAME_HEADLINE_FONT)
  private String headlineFont;

  public static final String SERIALIZED_NAME_DESCRIPTION_TEXT = "descriptionText";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TEXT)
  private String descriptionText;

  public static final String SERIALIZED_NAME_DESCRIPTION_FONT = "descriptionFont";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_FONT)
  private String descriptionFont;

  public static final String SERIALIZED_NAME_CALLS_TO_ACTION = "callsToAction";
  @SerializedName(SERIALIZED_NAME_CALLS_TO_ACTION)
  private List<String> callsToAction = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private AdaptiveColors colors;

  public static final String SERIALIZED_NAME_IMAGE_SETS = "imageSets";
  @SerializedName(SERIALIZED_NAME_IMAGE_SETS)
  private List<ImageSet> imageSets = null;

  /**
   * Value can be \&quot;ShowFullImage\&quot; or \&quot;ZoomOnImage\&quot;. Choose whether your image set should fit inside the allocated  space (\&quot;ShowFullImage\&quot;) or whether it should fill that space (\&quot;ZoomOnImage\&quot;). If you choose ZoomOnImage, there may be some  image cropping.
   */
  @JsonAdapter(ImageDisplayEnum.Adapter.class)
  public enum ImageDisplayEnum {
    SHOWFULLIMAGE("ShowFullImage"),
    
    ZOOMONIMAGE("ZoomOnImage");

    private String value;

    ImageDisplayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageDisplayEnum fromValue(String value) {
      for (ImageDisplayEnum b : ImageDisplayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageDisplayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageDisplayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageDisplayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageDisplayEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_DISPLAY = "imageDisplay";
  @SerializedName(SERIALIZED_NAME_IMAGE_DISPLAY)
  private ImageDisplayEnum imageDisplay;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<VideoDetail> videos = null;

  public static final String SERIALIZED_NAME_LANDING_PAGE_URL = "landingPageUrl";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE_URL)
  private URI landingPageUrl;


  public AdaptiveAttributes layouts(List<LayoutsEnum> layouts) {
    
    this.layouts = layouts;
    return this;
  }

  public AdaptiveAttributes addLayoutsItem(LayoutsEnum layoutsItem) {
    this.layouts.add(layoutsItem);
    return this;
  }

   /**
   * The Adaptive layouts that are enabled.  It can contain any of the following values: \&quot;Editorial\&quot;, “Montage“, \&quot;InBannerVideo\&quot;.
   * @return layouts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Adaptive layouts that are enabled.  It can contain any of the following values: \"Editorial\", “Montage“, \"InBannerVideo\".")

  public List<LayoutsEnum> getLayouts() {
    return layouts;
  }


  public void setLayouts(List<LayoutsEnum> layouts) {
    this.layouts = layouts;
  }


  public AdaptiveAttributes logos(List<ImageShape> logos) {
    
    this.logos = logos;
    return this;
  }

  public AdaptiveAttributes addLogosItem(ImageShape logosItem) {
    this.logos.add(logosItem);
    return this;
  }

   /**
   * Logo images uploaded on demostatic.criteo.com when deploying and then static.criteo.net
   * @return logos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Logo images uploaded on demostatic.criteo.com when deploying and then static.criteo.net")

  public List<ImageShape> getLogos() {
    return logos;
  }


  public void setLogos(List<ImageShape> logos) {
    this.logos = logos;
  }


  public AdaptiveAttributes headlineText(String headlineText) {
    
    this.headlineText = headlineText;
    return this;
  }

   /**
   * The headline text of the banner
   * @return headlineText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The headline text of the banner")

  public String getHeadlineText() {
    return headlineText;
  }


  public void setHeadlineText(String headlineText) {
    this.headlineText = headlineText;
  }


  public AdaptiveAttributes headlineFont(String headlineFont) {
    
    this.headlineFont = headlineFont;
    return this;
  }

   /**
   * Font of the headline  Valid supported font like \&quot;Arial\&quot;
   * @return headlineFont
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Font of the headline  Valid supported font like \"Arial\"")

  public String getHeadlineFont() {
    return headlineFont;
  }


  public void setHeadlineFont(String headlineFont) {
    this.headlineFont = headlineFont;
  }


  public AdaptiveAttributes descriptionText(String descriptionText) {
    
    this.descriptionText = descriptionText;
    return this;
  }

   /**
   * The description text of the banner
   * @return descriptionText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The description text of the banner")

  public String getDescriptionText() {
    return descriptionText;
  }


  public void setDescriptionText(String descriptionText) {
    this.descriptionText = descriptionText;
  }


  public AdaptiveAttributes descriptionFont(String descriptionFont) {
    
    this.descriptionFont = descriptionFont;
    return this;
  }

   /**
   * Font of the description  Valid supported font like \&quot;Arial\&quot;
   * @return descriptionFont
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Font of the description  Valid supported font like \"Arial\"")

  public String getDescriptionFont() {
    return descriptionFont;
  }


  public void setDescriptionFont(String descriptionFont) {
    this.descriptionFont = descriptionFont;
  }


  public AdaptiveAttributes callsToAction(List<String> callsToAction) {
    
    this.callsToAction = callsToAction;
    return this;
  }

  public AdaptiveAttributes addCallsToActionItem(String callsToActionItem) {
    this.callsToAction.add(callsToActionItem);
    return this;
  }

   /**
   * A Call-to-Action (CTA) is an action-driven instruction to your audience intended to provoke an immediate  response, such as “Buy now” or “Go!”.
   * @return callsToAction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A Call-to-Action (CTA) is an action-driven instruction to your audience intended to provoke an immediate  response, such as “Buy now” or “Go!”.")

  public List<String> getCallsToAction() {
    return callsToAction;
  }


  public void setCallsToAction(List<String> callsToAction) {
    this.callsToAction = callsToAction;
  }


  public AdaptiveAttributes colors(AdaptiveColors colors) {
    
    this.colors = colors;
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AdaptiveColors getColors() {
    return colors;
  }


  public void setColors(AdaptiveColors colors) {
    this.colors = colors;
  }


  public AdaptiveAttributes imageSets(List<ImageSet> imageSets) {
    
    this.imageSets = imageSets;
    return this;
  }

  public AdaptiveAttributes addImageSetsItem(ImageSet imageSetsItem) {
    if (this.imageSets == null) {
      this.imageSets = new ArrayList<>();
    }
    this.imageSets.add(imageSetsItem);
    return this;
  }

   /**
   * Multiple image sets, each image set consists of multiple images and a headline text.
   * @return imageSets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multiple image sets, each image set consists of multiple images and a headline text.")

  public List<ImageSet> getImageSets() {
    return imageSets;
  }


  public void setImageSets(List<ImageSet> imageSets) {
    this.imageSets = imageSets;
  }


  public AdaptiveAttributes imageDisplay(ImageDisplayEnum imageDisplay) {
    
    this.imageDisplay = imageDisplay;
    return this;
  }

   /**
   * Value can be \&quot;ShowFullImage\&quot; or \&quot;ZoomOnImage\&quot;. Choose whether your image set should fit inside the allocated  space (\&quot;ShowFullImage\&quot;) or whether it should fill that space (\&quot;ZoomOnImage\&quot;). If you choose ZoomOnImage, there may be some  image cropping.
   * @return imageDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value can be \"ShowFullImage\" or \"ZoomOnImage\". Choose whether your image set should fit inside the allocated  space (\"ShowFullImage\") or whether it should fill that space (\"ZoomOnImage\"). If you choose ZoomOnImage, there may be some  image cropping.")

  public ImageDisplayEnum getImageDisplay() {
    return imageDisplay;
  }


  public void setImageDisplay(ImageDisplayEnum imageDisplay) {
    this.imageDisplay = imageDisplay;
  }


  public AdaptiveAttributes videos(List<VideoDetail> videos) {
    
    this.videos = videos;
    return this;
  }

  public AdaptiveAttributes addVideosItem(VideoDetail videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

   /**
   * Multiple videos potentially in different shapes.
   * @return videos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multiple videos potentially in different shapes.")

  public List<VideoDetail> getVideos() {
    return videos;
  }


  public void setVideos(List<VideoDetail> videos) {
    this.videos = videos;
  }


  public AdaptiveAttributes landingPageUrl(URI landingPageUrl) {
    
    this.landingPageUrl = landingPageUrl;
    return this;
  }

   /**
   * Web redirection of the landing page url
   * @return landingPageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Web redirection of the landing page url")

  public URI getLandingPageUrl() {
    return landingPageUrl;
  }


  public void setLandingPageUrl(URI landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdaptiveAttributes adaptiveAttributes = (AdaptiveAttributes) o;
    return Objects.equals(this.layouts, adaptiveAttributes.layouts) &&
        Objects.equals(this.logos, adaptiveAttributes.logos) &&
        Objects.equals(this.headlineText, adaptiveAttributes.headlineText) &&
        Objects.equals(this.headlineFont, adaptiveAttributes.headlineFont) &&
        Objects.equals(this.descriptionText, adaptiveAttributes.descriptionText) &&
        Objects.equals(this.descriptionFont, adaptiveAttributes.descriptionFont) &&
        Objects.equals(this.callsToAction, adaptiveAttributes.callsToAction) &&
        Objects.equals(this.colors, adaptiveAttributes.colors) &&
        Objects.equals(this.imageSets, adaptiveAttributes.imageSets) &&
        Objects.equals(this.imageDisplay, adaptiveAttributes.imageDisplay) &&
        Objects.equals(this.videos, adaptiveAttributes.videos) &&
        Objects.equals(this.landingPageUrl, adaptiveAttributes.landingPageUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layouts, logos, headlineText, headlineFont, descriptionText, descriptionFont, callsToAction, colors, imageSets, imageDisplay, videos, landingPageUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdaptiveAttributes {\n");
    sb.append("    layouts: ").append(toIndentedString(layouts)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    headlineText: ").append(toIndentedString(headlineText)).append("\n");
    sb.append("    headlineFont: ").append(toIndentedString(headlineFont)).append("\n");
    sb.append("    descriptionText: ").append(toIndentedString(descriptionText)).append("\n");
    sb.append("    descriptionFont: ").append(toIndentedString(descriptionFont)).append("\n");
    sb.append("    callsToAction: ").append(toIndentedString(callsToAction)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    imageSets: ").append(toIndentedString(imageSets)).append("\n");
    sb.append("    imageDisplay: ").append(toIndentedString(imageDisplay)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    landingPageUrl: ").append(toIndentedString(landingPageUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

