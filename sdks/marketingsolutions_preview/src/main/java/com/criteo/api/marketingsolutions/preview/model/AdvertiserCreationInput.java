/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.marketingsolutions.preview.JSON;

/**
 * Information for creating an advertiser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AdvertiserCreationInput {
  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  private String agencyId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public static final String SERIALIZED_NAME_COUNTRY_ISO_CODE = "countryIsoCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO_CODE)
  private String countryIsoCode;

  public static final String SERIALIZED_NAME_CURRENCY_ISO_CODE = "currencyIsoCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ISO_CODE)
  private String currencyIsoCode;

  public static final String SERIALIZED_NAME_INDUSTRY_ID = "industryId";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_ID)
  private String industryId;

  public AdvertiserCreationInput() {
  }

  public AdvertiserCreationInput agencyId(String agencyId) {
    
    this.agencyId = agencyId;
    return this;
  }

   /**
   * ID of the agency requesting the advertiser creation
   * @return agencyId
  **/
  @javax.annotation.Nonnull

  public String getAgencyId() {
    return agencyId;
  }


  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }


  public AdvertiserCreationInput accountName(String accountName) {
    
    this.accountName = accountName;
    return this;
  }

   /**
   * The Account Name; This will not be in fact the Advertiser name
   * @return accountName
  **/
  @javax.annotation.Nonnull

  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public AdvertiserCreationInput websiteUrl(String websiteUrl) {
    
    this.websiteUrl = websiteUrl;
    return this;
  }

   /**
   * Website url
   * @return websiteUrl
  **/
  @javax.annotation.Nonnull

  public String getWebsiteUrl() {
    return websiteUrl;
  }


  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }


  public AdvertiserCreationInput countryIsoCode(String countryIsoCode) {
    
    this.countryIsoCode = countryIsoCode;
    return this;
  }

   /**
   * Country ISO code
   * @return countryIsoCode
  **/
  @javax.annotation.Nonnull

  public String getCountryIsoCode() {
    return countryIsoCode;
  }


  public void setCountryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
  }


  public AdvertiserCreationInput currencyIsoCode(String currencyIsoCode) {
    
    this.currencyIsoCode = currencyIsoCode;
    return this;
  }

   /**
   * Currency ISO code
   * @return currencyIsoCode
  **/
  @javax.annotation.Nonnull

  public String getCurrencyIsoCode() {
    return currencyIsoCode;
  }


  public void setCurrencyIsoCode(String currencyIsoCode) {
    this.currencyIsoCode = currencyIsoCode;
  }


  public AdvertiserCreationInput industryId(String industryId) {
    
    this.industryId = industryId;
    return this;
  }

   /**
   * Industry ID
   * @return industryId
  **/
  @javax.annotation.Nonnull

  public String getIndustryId() {
    return industryId;
  }


  public void setIndustryId(String industryId) {
    this.industryId = industryId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AdvertiserCreationInput instance itself
   */
  public AdvertiserCreationInput putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvertiserCreationInput advertiserCreationInput = (AdvertiserCreationInput) o;
    return Objects.equals(this.agencyId, advertiserCreationInput.agencyId) &&
        Objects.equals(this.accountName, advertiserCreationInput.accountName) &&
        Objects.equals(this.websiteUrl, advertiserCreationInput.websiteUrl) &&
        Objects.equals(this.countryIsoCode, advertiserCreationInput.countryIsoCode) &&
        Objects.equals(this.currencyIsoCode, advertiserCreationInput.currencyIsoCode) &&
        Objects.equals(this.industryId, advertiserCreationInput.industryId)&&
        Objects.equals(this.additionalProperties, advertiserCreationInput.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agencyId, accountName, websiteUrl, countryIsoCode, currencyIsoCode, industryId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvertiserCreationInput {\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    countryIsoCode: ").append(toIndentedString(countryIsoCode)).append("\n");
    sb.append("    currencyIsoCode: ").append(toIndentedString(currencyIsoCode)).append("\n");
    sb.append("    industryId: ").append(toIndentedString(industryId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agencyId");
    openapiFields.add("accountName");
    openapiFields.add("websiteUrl");
    openapiFields.add("countryIsoCode");
    openapiFields.add("currencyIsoCode");
    openapiFields.add("industryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agencyId");
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("websiteUrl");
    openapiRequiredFields.add("countryIsoCode");
    openapiRequiredFields.add("currencyIsoCode");
    openapiRequiredFields.add("industryId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AdvertiserCreationInput
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AdvertiserCreationInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvertiserCreationInput is not found in the empty JSON string", AdvertiserCreationInput.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdvertiserCreationInput.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if (!jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if (!jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
      if (!jsonObj.get("countryIsoCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIsoCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIsoCode").toString()));
      }
      if (!jsonObj.get("currencyIsoCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyIsoCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyIsoCode").toString()));
      }
      if (!jsonObj.get("industryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvertiserCreationInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvertiserCreationInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvertiserCreationInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvertiserCreationInput.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvertiserCreationInput>() {
           @Override
           public void write(JsonWriter out, AdvertiserCreationInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvertiserCreationInput read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AdvertiserCreationInput instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdvertiserCreationInput given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdvertiserCreationInput
  * @throws IOException if the JSON string is invalid with respect to AdvertiserCreationInput
  */
  public static AdvertiserCreationInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvertiserCreationInput.class);
  }

 /**
  * Convert an instance of AdvertiserCreationInput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

