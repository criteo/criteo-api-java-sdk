/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.api;

import com.criteo.api.marketingsolutions.preview.ApiCallback;
import com.criteo.api.marketingsolutions.preview.ApiClient;
import com.criteo.api.marketingsolutions.preview.ApiException;
import com.criteo.api.marketingsolutions.preview.ApiResponse;
import com.criteo.api.marketingsolutions.preview.Configuration;
import com.criteo.api.marketingsolutions.preview.Pair;
import com.criteo.api.marketingsolutions.preview.ProgressRequestBody;
import com.criteo.api.marketingsolutions.preview.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.marketingsolutions.preview.model.AdSetAudienceLinkEntityV1Response;
import com.criteo.api.marketingsolutions.preview.model.AdSetAudienceLinkInputEntityV1;
import com.criteo.api.marketingsolutions.preview.model.AdSetCategoryBidListResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetDisplayMultiplierListResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetSearchRequestV24Q3;
import com.criteo.api.marketingsolutions.preview.model.AdSetTargetingDealIdsDisableResultResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetTargetingDealIdsResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetTargetingDealIdsSetResultResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetTargetingVideoPositioningDisableResultResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetTargetingVideoPositioningResponse;
import com.criteo.api.marketingsolutions.preview.model.AdSetTargetingVideoPositioningSetResultResponse;
import com.criteo.api.marketingsolutions.preview.model.ApiErrorResponse;
import com.criteo.api.marketingsolutions.preview.model.ApiRequestOfTargetingEntity;
import com.criteo.api.marketingsolutions.preview.model.ApiResponseOfTargetingEntity;
import com.criteo.api.marketingsolutions.preview.model.CampaignSearchRequestV23Q1;
import com.criteo.api.marketingsolutions.preview.model.CampaignV23Q1ListResponse;
import com.criteo.api.marketingsolutions.preview.model.CampaignV23Q1Response;
import com.criteo.api.marketingsolutions.preview.model.CreateAdSetV24Q3Request;
import com.criteo.api.marketingsolutions.preview.model.CreateCampaignRequest;
import com.criteo.api.marketingsolutions.preview.model.PatchAdSetCategoryBidListRequest;
import com.criteo.api.marketingsolutions.preview.model.PatchAdSetCategoryBidResultListResponse;
import com.criteo.api.marketingsolutions.preview.model.PatchAdSetDisplayMultiplierListRequest;
import com.criteo.api.marketingsolutions.preview.model.PatchAdSetDisplayMultiplierResultListResponse;
import com.criteo.api.marketingsolutions.preview.model.PatchCampaignListRequest;
import com.criteo.api.marketingsolutions.preview.model.PatchResultCampaignListResponse;
import com.criteo.api.marketingsolutions.preview.model.RequestsAdSetId;
import com.criteo.api.marketingsolutions.preview.model.RequestsPatchAdSetV24Q3;
import com.criteo.api.marketingsolutions.preview.model.ResponseReadAdSetV24Q3;
import com.criteo.api.marketingsolutions.preview.model.ResponsesAdSetId;
import com.criteo.api.marketingsolutions.preview.model.ResponsesAdSetIdV24Q3;
import com.criteo.api.marketingsolutions.preview.model.ResponsesReadAdSetV24Q3;
import com.criteo.api.marketingsolutions.preview.model.SetAdSetTargetingDealIdsRequest;
import com.criteo.api.marketingsolutions.preview.model.SetAdSetTargetingVideoPositioningRequest;
import com.criteo.api.marketingsolutions.preview.model.SupplyVendorListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAdSetV24Q3
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdSetV24Q3Call(CreateAdSetV24Q3Request createAdSetV24Q3Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAdSetV24Q3Request;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdSetV24Q3ValidateBeforeCall(CreateAdSetV24Q3Request createAdSetV24Q3Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAdSetV24Q3Request' is set
        if (createAdSetV24Q3Request == null) {
            throw new ApiException("Missing the required parameter 'createAdSetV24Q3Request' when calling createAdSetV24Q3(Async)");
        }

        return createAdSetV24Q3Call(createAdSetV24Q3Request, _callback);

    }

    /**
     * 
     * Create the specified ad set
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @return ResponseReadAdSetV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ResponseReadAdSetV24Q3 createAdSetV24Q3(CreateAdSetV24Q3Request createAdSetV24Q3Request) throws ApiException {
        ApiResponse<ResponseReadAdSetV24Q3> localVarResp = createAdSetV24Q3WithHttpInfo(createAdSetV24Q3Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Create the specified ad set
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @return ApiResponse&lt;ResponseReadAdSetV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseReadAdSetV24Q3> createAdSetV24Q3WithHttpInfo(CreateAdSetV24Q3Request createAdSetV24Q3Request) throws ApiException {
        okhttp3.Call localVarCall = createAdSetV24Q3ValidateBeforeCall(createAdSetV24Q3Request, null);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create the specified ad set
     * @param createAdSetV24Q3Request the ad sets to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ad set that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdSetV24Q3Async(CreateAdSetV24Q3Request createAdSetV24Q3Request, final ApiCallback<ResponseReadAdSetV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdSetV24Q3ValidateBeforeCall(createAdSetV24Q3Request, _callback);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCampaign
     * @param createCampaignRequest the campaigns to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignCall(CreateCampaignRequest createCampaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCampaignRequest;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCampaignValidateBeforeCall(CreateCampaignRequest createCampaignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCampaignRequest' is set
        if (createCampaignRequest == null) {
            throw new ApiException("Missing the required parameter 'createCampaignRequest' when calling createCampaign(Async)");
        }

        return createCampaignCall(createCampaignRequest, _callback);

    }

    /**
     * 
     * Create the specified campaign
     * @param createCampaignRequest the campaigns to create (required)
     * @return CampaignV23Q1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public CampaignV23Q1Response createCampaign(CreateCampaignRequest createCampaignRequest) throws ApiException {
        ApiResponse<CampaignV23Q1Response> localVarResp = createCampaignWithHttpInfo(createCampaignRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create the specified campaign
     * @param createCampaignRequest the campaigns to create (required)
     * @return ApiResponse&lt;CampaignV23Q1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignV23Q1Response> createCampaignWithHttpInfo(CreateCampaignRequest createCampaignRequest) throws ApiException {
        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(createCampaignRequest, null);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create the specified campaign
     * @param createCampaignRequest the campaigns to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The campaign that has been created and errors / warnings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignAsync(CreateCampaignRequest createCampaignRequest, final ApiCallback<CampaignV23Q1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(createCampaignRequest, _callback);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAdvertiserBundleRules
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvertiserBundleRulesCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/bundle-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdvertiserBundleRulesValidateBeforeCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling deleteAdvertiserBundleRules(Async)");
        }

        return deleteAdvertiserBundleRulesCall(advertiserId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Removes some bundles from the current list of targeted bundles for a given advertiser.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity deleteAdvertiserBundleRules(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = deleteAdvertiserBundleRulesWithHttpInfo(advertiserId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes some bundles from the current list of targeted bundles for a given advertiser.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> deleteAdvertiserBundleRulesWithHttpInfo(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = deleteAdvertiserBundleRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes some bundles from the current list of targeted bundles for a given advertiser.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvertiserBundleRulesAsync(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdvertiserBundleRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAdvertiserDomainRules
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvertiserDomainRulesCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/domain-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdvertiserDomainRulesValidateBeforeCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling deleteAdvertiserDomainRules(Async)");
        }

        return deleteAdvertiserDomainRulesCall(advertiserId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Removes some domains from the current list of targeted domains for a given advertiser.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity deleteAdvertiserDomainRules(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = deleteAdvertiserDomainRulesWithHttpInfo(advertiserId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes some domains from the current list of targeted domains for a given advertiser.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> deleteAdvertiserDomainRulesWithHttpInfo(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = deleteAdvertiserDomainRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes some domains from the current list of targeted domains for a given advertiser.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvertiserDomainRulesAsync(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdvertiserDomainRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCampaignBundleRules
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignBundleRulesCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/bundle-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCampaignBundleRulesValidateBeforeCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCampaignBundleRules(Async)");
        }

        return deleteCampaignBundleRulesCall(campaignId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Removes some bundles from the current list of targeted bundles for a given campaign.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity deleteCampaignBundleRules(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = deleteCampaignBundleRulesWithHttpInfo(campaignId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes some bundles from the current list of targeted bundles for a given campaign.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> deleteCampaignBundleRulesWithHttpInfo(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = deleteCampaignBundleRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes some bundles from the current list of targeted bundles for a given campaign.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignBundleRulesAsync(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCampaignBundleRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCampaignDomainRules
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignDomainRulesCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/domain-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCampaignDomainRulesValidateBeforeCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCampaignDomainRules(Async)");
        }

        return deleteCampaignDomainRulesCall(campaignId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Removes some domains from the current list of targeted domains for a given campaign.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity deleteCampaignDomainRules(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = deleteCampaignDomainRulesWithHttpInfo(campaignId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes some domains from the current list of targeted domains for a given campaign.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> deleteCampaignDomainRulesWithHttpInfo(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = deleteCampaignDomainRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes some domains from the current list of targeted domains for a given campaign.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to delete from the list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignDomainRulesAsync(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCampaignDomainRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableAdSetTargetingDealIds
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAdSetTargetingDealIdsCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/deal-ids/disable"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableAdSetTargetingDealIdsValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling disableAdSetTargetingDealIds(Async)");
        }

        return disableAdSetTargetingDealIdsCall(adSetId, _callback);

    }

    /**
     * 
     * Disable the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetTargetingDealIdsDisableResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetTargetingDealIdsDisableResultResponse disableAdSetTargetingDealIds(String adSetId) throws ApiException {
        ApiResponse<AdSetTargetingDealIdsDisableResultResponse> localVarResp = disableAdSetTargetingDealIdsWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetTargetingDealIdsDisableResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetTargetingDealIdsDisableResultResponse> disableAdSetTargetingDealIdsWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = disableAdSetTargetingDealIdsValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetTargetingDealIdsDisableResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAdSetTargetingDealIdsAsync(String adSetId, final ApiCallback<AdSetTargetingDealIdsDisableResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableAdSetTargetingDealIdsValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetTargetingDealIdsDisableResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableAdSetTargetingVideoPositioning
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAdSetTargetingVideoPositioningCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/video-positionings/disable"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableAdSetTargetingVideoPositioningValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling disableAdSetTargetingVideoPositioning(Async)");
        }

        return disableAdSetTargetingVideoPositioningCall(adSetId, _callback);

    }

    /**
     * 
     * Disable the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetTargetingVideoPositioningDisableResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetTargetingVideoPositioningDisableResultResponse disableAdSetTargetingVideoPositioning(String adSetId) throws ApiException {
        ApiResponse<AdSetTargetingVideoPositioningDisableResultResponse> localVarResp = disableAdSetTargetingVideoPositioningWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetTargetingVideoPositioningDisableResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetTargetingVideoPositioningDisableResultResponse> disableAdSetTargetingVideoPositioningWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = disableAdSetTargetingVideoPositioningValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetTargetingVideoPositioningDisableResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAdSetTargetingVideoPositioningAsync(String adSetId, final ApiCallback<AdSetTargetingVideoPositioningDisableResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableAdSetTargetingVideoPositioningValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetTargetingVideoPositioningDisableResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdSetTargetingDealIds
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Deal Id Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetTargetingDealIdsCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/deal-ids"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdSetTargetingDealIdsValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getAdSetTargetingDealIds(Async)");
        }

        return getAdSetTargetingDealIdsCall(adSetId, _callback);

    }

    /**
     * 
     * Get the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetTargetingDealIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Deal Id Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetTargetingDealIdsResponse getAdSetTargetingDealIds(String adSetId) throws ApiException {
        ApiResponse<AdSetTargetingDealIdsResponse> localVarResp = getAdSetTargetingDealIdsWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetTargetingDealIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Deal Id Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetTargetingDealIdsResponse> getAdSetTargetingDealIdsWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getAdSetTargetingDealIdsValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetTargetingDealIdsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Deal Id Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetTargetingDealIdsAsync(String adSetId, final ApiCallback<AdSetTargetingDealIdsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdSetTargetingDealIdsValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetTargetingDealIdsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdSetTargetingVideoPositioning
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Video Positioning Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetTargetingVideoPositioningCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/video-positioning"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdSetTargetingVideoPositioningValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getAdSetTargetingVideoPositioning(Async)");
        }

        return getAdSetTargetingVideoPositioningCall(adSetId, _callback);

    }

    /**
     * 
     * Get the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetTargetingVideoPositioningResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Video Positioning Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetTargetingVideoPositioningResponse getAdSetTargetingVideoPositioning(String adSetId) throws ApiException {
        ApiResponse<AdSetTargetingVideoPositioningResponse> localVarResp = getAdSetTargetingVideoPositioningWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetTargetingVideoPositioningResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Video Positioning Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetTargetingVideoPositioningResponse> getAdSetTargetingVideoPositioningWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getAdSetTargetingVideoPositioningValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetTargetingVideoPositioningResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Video Positioning Targeting configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetTargetingVideoPositioningAsync(String adSetId, final ApiCallback<AdSetTargetingVideoPositioningResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdSetTargetingVideoPositioningValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetTargetingVideoPositioningResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdSetV24Q3
     * @param adSetId Id of the ad set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetV24Q3Call(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdSetV24Q3ValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getAdSetV24Q3(Async)");
        }

        return getAdSetV24Q3Call(adSetId, _callback);

    }

    /**
     * 
     * Get the data for the specified ad set
     * @param adSetId Id of the ad set (required)
     * @return ResponseReadAdSetV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ResponseReadAdSetV24Q3 getAdSetV24Q3(String adSetId) throws ApiException {
        ApiResponse<ResponseReadAdSetV24Q3> localVarResp = getAdSetV24Q3WithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the data for the specified ad set
     * @param adSetId Id of the ad set (required)
     * @return ApiResponse&lt;ResponseReadAdSetV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseReadAdSetV24Q3> getAdSetV24Q3WithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getAdSetV24Q3ValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the data for the specified ad set
     * @param adSetId Id of the ad set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad set </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdSetV24Q3Async(String adSetId, final ApiCallback<ResponseReadAdSetV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdSetV24Q3ValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<ResponseReadAdSetV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserBundleRules
     * @param advertiserId The advertiser id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserBundleRulesCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/bundle-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserBundleRulesValidateBeforeCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserBundleRules(Async)");
        }

        return getAdvertiserBundleRulesCall(advertiserId, _callback);

    }

    /**
     * 
     * Returns a list of all targeted bundles for an advertiser.
     * @param advertiserId The advertiser id (required)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity getAdvertiserBundleRules(Integer advertiserId) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = getAdvertiserBundleRulesWithHttpInfo(advertiserId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all targeted bundles for an advertiser.
     * @param advertiserId The advertiser id (required)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> getAdvertiserBundleRulesWithHttpInfo(Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserBundleRulesValidateBeforeCall(advertiserId, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all targeted bundles for an advertiser.
     * @param advertiserId The advertiser id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserBundleRulesAsync(Integer advertiserId, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserBundleRulesValidateBeforeCall(advertiserId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserDomainRules
     * @param advertiserId The advertiser id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserDomainRulesCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/domain-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserDomainRulesValidateBeforeCall(Integer advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserDomainRules(Async)");
        }

        return getAdvertiserDomainRulesCall(advertiserId, _callback);

    }

    /**
     * 
     * Returns a list of all targeted domains for an advertiser.
     * @param advertiserId The advertiser id (required)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity getAdvertiserDomainRules(Integer advertiserId) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = getAdvertiserDomainRulesWithHttpInfo(advertiserId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all targeted domains for an advertiser.
     * @param advertiserId The advertiser id (required)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> getAdvertiserDomainRulesWithHttpInfo(Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserDomainRulesValidateBeforeCall(advertiserId, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all targeted domains for an advertiser.
     * @param advertiserId The advertiser id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserDomainRulesAsync(Integer advertiserId, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserDomainRulesValidateBeforeCall(advertiserId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignBundleRules
     * @param campaignId The campaign id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignBundleRulesCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/bundle-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignBundleRulesValidateBeforeCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignBundleRules(Async)");
        }

        return getCampaignBundleRulesCall(campaignId, _callback);

    }

    /**
     * 
     * Returns a list of all targeted bundles for a campaign.
     * @param campaignId The campaign id (required)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity getCampaignBundleRules(Integer campaignId) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = getCampaignBundleRulesWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all targeted bundles for a campaign.
     * @param campaignId The campaign id (required)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> getCampaignBundleRulesWithHttpInfo(Integer campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignBundleRulesValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all targeted bundles for a campaign.
     * @param campaignId The campaign id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignBundleRulesAsync(Integer campaignId, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignBundleRulesValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignDomainRules
     * @param campaignId The campaign id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignDomainRulesCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/domain-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignDomainRulesValidateBeforeCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignDomainRules(Async)");
        }

        return getCampaignDomainRulesCall(campaignId, _callback);

    }

    /**
     * 
     * Returns a list of all targeted domains for a campaign.
     * @param campaignId The campaign id (required)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity getCampaignDomainRules(Integer campaignId) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = getCampaignDomainRulesWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all targeted domains for a campaign.
     * @param campaignId The campaign id (required)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> getCampaignDomainRulesWithHttpInfo(Integer campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignDomainRulesValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all targeted domains for a campaign.
     * @param campaignId The campaign id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignDomainRulesAsync(Integer campaignId, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignDomainRulesValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignV23Q1
     * @param campaignId Id of the campaign (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignV23Q1Call(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/campaigns/{campaign-id}"
            .replace("{" + "campaign-id" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignV23Q1ValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignV23Q1(Async)");
        }

        return getCampaignV23Q1Call(campaignId, _callback);

    }

    /**
     * 
     * Get the data for the specified campaign
     * @param campaignId Id of the campaign (required)
     * @return CampaignV23Q1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public CampaignV23Q1Response getCampaignV23Q1(String campaignId) throws ApiException {
        ApiResponse<CampaignV23Q1Response> localVarResp = getCampaignV23Q1WithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the data for the specified campaign
     * @param campaignId Id of the campaign (required)
     * @return ApiResponse&lt;CampaignV23Q1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignV23Q1Response> getCampaignV23Q1WithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignV23Q1ValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the data for the specified campaign
     * @param campaignId Id of the campaign (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignV23Q1Async(String campaignId, final ApiCallback<CampaignV23Q1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignV23Q1ValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<CampaignV23Q1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryBidList
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryBidListCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/category-bids"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryBidListValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getCategoryBidList(Async)");
        }

        return getCategoryBidListCall(adSetId, _callback);

    }

    /**
     * 
     * Get the Category Bids for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetCategoryBidListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetCategoryBidListResponse getCategoryBidList(String adSetId) throws ApiException {
        ApiResponse<AdSetCategoryBidListResponse> localVarResp = getCategoryBidListWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Category Bids for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetCategoryBidListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetCategoryBidListResponse> getCategoryBidListWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryBidListValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetCategoryBidListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Category Bids for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Category Bids for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryBidListAsync(String adSetId, final ApiCallback<AdSetCategoryBidListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryBidListValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetCategoryBidListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDisplayMultipliers
     * @param adSetId Id of the Ad Set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisplayMultipliersCall(String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisplayMultipliersValidateBeforeCall(String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling getDisplayMultipliers(Async)");
        }

        return getDisplayMultipliersCall(adSetId, _callback);

    }

    /**
     * 
     * Get the Display Multipliers for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return AdSetDisplayMultiplierListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetDisplayMultiplierListResponse getDisplayMultipliers(String adSetId) throws ApiException {
        ApiResponse<AdSetDisplayMultiplierListResponse> localVarResp = getDisplayMultipliersWithHttpInfo(adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Display Multipliers for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @return ApiResponse&lt;AdSetDisplayMultiplierListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetDisplayMultiplierListResponse> getDisplayMultipliersWithHttpInfo(String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getDisplayMultipliersValidateBeforeCall(adSetId, null);
        Type localVarReturnType = new TypeToken<AdSetDisplayMultiplierListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Display Multipliers for all valid Categories associated to an Ad Set
     * @param adSetId Id of the Ad Set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Display Multipliers for all valid Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisplayMultipliersAsync(String adSetId, final ApiCallback<AdSetDisplayMultiplierListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisplayMultipliersValidateBeforeCall(adSetId, _callback);
        Type localVarReturnType = new TypeToken<AdSetDisplayMultiplierListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSupplyVendorList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSupplyVendorListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/targeting/supply-vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupplyVendorListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSupplyVendorListCall(_callback);

    }

    /**
     * 
     * Fetch the list of available supply vendors for any Ad Set targetings
     * @return SupplyVendorListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public SupplyVendorListResponse getSupplyVendorList() throws ApiException {
        ApiResponse<SupplyVendorListResponse> localVarResp = getSupplyVendorListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the list of available supply vendors for any Ad Set targetings
     * @return ApiResponse&lt;SupplyVendorListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyVendorListResponse> getSupplyVendorListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSupplyVendorListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SupplyVendorListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the list of available supply vendors for any Ad Set targetings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSupplyVendorListAsync(final ApiCallback<SupplyVendorListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupplyVendorListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SupplyVendorListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAdSetsV24Q3
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAdSetsV24Q3Call(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestsPatchAdSetV24Q3;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAdSetsV24Q3ValidateBeforeCall(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3, final ApiCallback _callback) throws ApiException {
        return patchAdSetsV24Q3Call(requestsPatchAdSetV24Q3, _callback);

    }

    /**
     * 
     * Patch a list of AdSets.
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @return ResponsesAdSetIdV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesAdSetIdV24Q3 patchAdSetsV24Q3(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3) throws ApiException {
        ApiResponse<ResponsesAdSetIdV24Q3> localVarResp = patchAdSetsV24Q3WithHttpInfo(requestsPatchAdSetV24Q3);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch a list of AdSets.
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @return ApiResponse&lt;ResponsesAdSetIdV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesAdSetIdV24Q3> patchAdSetsV24Q3WithHttpInfo(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3) throws ApiException {
        okhttp3.Call localVarCall = patchAdSetsV24Q3ValidateBeforeCall(requestsPatchAdSetV24Q3, null);
        Type localVarReturnType = new TypeToken<ResponsesAdSetIdV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch a list of AdSets.
     * @param requestsPatchAdSetV24Q3 List of adsets to patch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched adSets. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAdSetsV24Q3Async(RequestsPatchAdSetV24Q3 requestsPatchAdSetV24Q3, final ApiCallback<ResponsesAdSetIdV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAdSetsV24Q3ValidateBeforeCall(requestsPatchAdSetV24Q3, _callback);
        Type localVarReturnType = new TypeToken<ResponsesAdSetIdV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCampaigns
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCampaignsCall(PatchCampaignListRequest patchCampaignListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchCampaignListRequest;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCampaignsValidateBeforeCall(PatchCampaignListRequest patchCampaignListRequest, final ApiCallback _callback) throws ApiException {
        return patchCampaignsCall(patchCampaignListRequest, _callback);

    }

    /**
     * 
     * Patch a list of Campaigns.
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @return PatchResultCampaignListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PatchResultCampaignListResponse patchCampaigns(PatchCampaignListRequest patchCampaignListRequest) throws ApiException {
        ApiResponse<PatchResultCampaignListResponse> localVarResp = patchCampaignsWithHttpInfo(patchCampaignListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch a list of Campaigns.
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @return ApiResponse&lt;PatchResultCampaignListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchResultCampaignListResponse> patchCampaignsWithHttpInfo(PatchCampaignListRequest patchCampaignListRequest) throws ApiException {
        okhttp3.Call localVarCall = patchCampaignsValidateBeforeCall(patchCampaignListRequest, null);
        Type localVarReturnType = new TypeToken<PatchResultCampaignListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch a list of Campaigns.
     * @param patchCampaignListRequest List of campaigns to patch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of patched campaigns. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCampaignsAsync(PatchCampaignListRequest patchCampaignListRequest, final ApiCallback<PatchResultCampaignListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCampaignsValidateBeforeCall(patchCampaignListRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchResultCampaignListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCategoryBidList
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCategoryBidListCall(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAdSetCategoryBidListRequest;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/category-bids"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCategoryBidListValidateBeforeCall(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling patchCategoryBidList(Async)");
        }

        return patchCategoryBidListCall(adSetId, patchAdSetCategoryBidListRequest, _callback);

    }

    /**
     * 
     * Patch Category Bids for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @return PatchAdSetCategoryBidResultListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PatchAdSetCategoryBidResultListResponse patchCategoryBidList(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest) throws ApiException {
        ApiResponse<PatchAdSetCategoryBidResultListResponse> localVarResp = patchCategoryBidListWithHttpInfo(adSetId, patchAdSetCategoryBidListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch Category Bids for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @return ApiResponse&lt;PatchAdSetCategoryBidResultListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchAdSetCategoryBidResultListResponse> patchCategoryBidListWithHttpInfo(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest) throws ApiException {
        okhttp3.Call localVarCall = patchCategoryBidListValidateBeforeCall(adSetId, patchAdSetCategoryBidListRequest, null);
        Type localVarReturnType = new TypeToken<PatchAdSetCategoryBidResultListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch Category Bids for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetCategoryBidListRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Category Bids for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCategoryBidListAsync(String adSetId, PatchAdSetCategoryBidListRequest patchAdSetCategoryBidListRequest, final ApiCallback<PatchAdSetCategoryBidResultListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCategoryBidListValidateBeforeCall(adSetId, patchAdSetCategoryBidListRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchAdSetCategoryBidResultListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDisplayMultipliers
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDisplayMultipliersCall(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAdSetDisplayMultiplierListRequest;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDisplayMultipliersValidateBeforeCall(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling patchDisplayMultipliers(Async)");
        }

        return patchDisplayMultipliersCall(adSetId, patchAdSetDisplayMultiplierListRequest, _callback);

    }

    /**
     * 
     * Patch Display Multipliers for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @return PatchAdSetDisplayMultiplierResultListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PatchAdSetDisplayMultiplierResultListResponse patchDisplayMultipliers(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest) throws ApiException {
        ApiResponse<PatchAdSetDisplayMultiplierResultListResponse> localVarResp = patchDisplayMultipliersWithHttpInfo(adSetId, patchAdSetDisplayMultiplierListRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch Display Multipliers for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @return ApiResponse&lt;PatchAdSetDisplayMultiplierResultListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchAdSetDisplayMultiplierResultListResponse> patchDisplayMultipliersWithHttpInfo(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest) throws ApiException {
        okhttp3.Call localVarCall = patchDisplayMultipliersValidateBeforeCall(adSetId, patchAdSetDisplayMultiplierListRequest, null);
        Type localVarReturnType = new TypeToken<PatchAdSetDisplayMultiplierResultListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch Display Multipliers for one or more Categories in a single request. Partial success policy is followed.
     * @param adSetId Id of the Ad Set (required)
     * @param patchAdSetDisplayMultiplierListRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of updated Display Multipliers for given Categories associated to an Ad Set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDisplayMultipliersAsync(String adSetId, PatchAdSetDisplayMultiplierListRequest patchAdSetDisplayMultiplierListRequest, final ApiCallback<PatchAdSetDisplayMultiplierResultListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDisplayMultipliersValidateBeforeCall(adSetId, patchAdSetDisplayMultiplierListRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchAdSetDisplayMultiplierResultListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAdvertiserBundleRules
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAdvertiserBundleRulesCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/bundle-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAdvertiserBundleRulesValidateBeforeCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling postAdvertiserBundleRules(Async)");
        }

        return postAdvertiserBundleRulesCall(advertiserId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Inserts a list of targeted bundles for an advertiser and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity postAdvertiserBundleRules(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = postAdvertiserBundleRulesWithHttpInfo(advertiserId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Inserts a list of targeted bundles for an advertiser and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> postAdvertiserBundleRulesWithHttpInfo(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = postAdvertiserBundleRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Inserts a list of targeted bundles for an advertiser and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAdvertiserBundleRulesAsync(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAdvertiserBundleRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAdvertiserDomainRules
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAdvertiserDomainRulesCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/domain-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAdvertiserDomainRulesValidateBeforeCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling postAdvertiserDomainRules(Async)");
        }

        return postAdvertiserDomainRulesCall(advertiserId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Inserts a list of targeted domains for an advertiser and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity postAdvertiserDomainRules(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = postAdvertiserDomainRulesWithHttpInfo(advertiserId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Inserts a list of targeted domains for an advertiser and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> postAdvertiserDomainRulesWithHttpInfo(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = postAdvertiserDomainRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Inserts a list of targeted domains for an advertiser and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAdvertiserDomainRulesAsync(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAdvertiserDomainRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCampaignBundleRules
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCampaignBundleRulesCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/bundle-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCampaignBundleRulesValidateBeforeCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postCampaignBundleRules(Async)");
        }

        return postCampaignBundleRulesCall(campaignId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Inserts a list of targeted bundles for a campaign and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity postCampaignBundleRules(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = postCampaignBundleRulesWithHttpInfo(campaignId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Inserts a list of targeted bundles for a campaign and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> postCampaignBundleRulesWithHttpInfo(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = postCampaignBundleRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Inserts a list of targeted bundles for a campaign and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCampaignBundleRulesAsync(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCampaignBundleRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCampaignDomainRules
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCampaignDomainRulesCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/domain-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCampaignDomainRulesValidateBeforeCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postCampaignDomainRules(Async)");
        }

        return postCampaignDomainRulesCall(campaignId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Inserts a list of targeted domains for a campaign and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity postCampaignDomainRules(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = postCampaignDomainRulesWithHttpInfo(campaignId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Inserts a list of targeted domains for a campaign and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> postCampaignDomainRulesWithHttpInfo(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = postCampaignDomainRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Inserts a list of targeted domains for a campaign and sets the targeting mode : blocklisting or allowlisting.&lt;br /&gt;  It will replace the current list if any.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Description of the targeting rule to setup (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCampaignDomainRulesAsync(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCampaignDomainRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAdvertiserBundleRules
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAdvertiserBundleRulesCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/bundle-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAdvertiserBundleRulesValidateBeforeCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling putAdvertiserBundleRules(Async)");
        }

        return putAdvertiserBundleRulesCall(advertiserId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Updates the targeted bundles for an advertiser by adding a list of bundles to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity putAdvertiserBundleRules(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = putAdvertiserBundleRulesWithHttpInfo(advertiserId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the targeted bundles for an advertiser by adding a list of bundles to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> putAdvertiserBundleRulesWithHttpInfo(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = putAdvertiserBundleRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the targeted bundles for an advertiser by adding a list of bundles to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAdvertiserBundleRulesAsync(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAdvertiserBundleRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAdvertiserDomainRules
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAdvertiserDomainRulesCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/advertisers/{advertiserId}/targeting/domain-rules"
            .replace("{" + "advertiserId" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAdvertiserDomainRulesValidateBeforeCall(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling putAdvertiserDomainRules(Async)");
        }

        return putAdvertiserDomainRulesCall(advertiserId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Updates the targeted domains for an advertiser by adding a list of domains to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity putAdvertiserDomainRules(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = putAdvertiserDomainRulesWithHttpInfo(advertiserId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the targeted domains for an advertiser by adding a list of domains to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> putAdvertiserDomainRulesWithHttpInfo(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = putAdvertiserDomainRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the targeted domains for an advertiser by adding a list of domains to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param advertiserId The advertiser id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAdvertiserDomainRulesAsync(Integer advertiserId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAdvertiserDomainRulesValidateBeforeCall(advertiserId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCampaignBundleRules
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCampaignBundleRulesCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/bundle-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCampaignBundleRulesValidateBeforeCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling putCampaignBundleRules(Async)");
        }

        return putCampaignBundleRulesCall(campaignId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Updates the targeted bundles for a campaign by adding a list of bundles to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity putCampaignBundleRules(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = putCampaignBundleRulesWithHttpInfo(campaignId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the targeted bundles for a campaign by adding a list of bundles to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> putCampaignBundleRulesWithHttpInfo(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = putCampaignBundleRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the targeted bundles for a campaign by adding a list of bundles to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCampaignBundleRulesAsync(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCampaignBundleRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCampaignDomainRules
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCampaignDomainRulesCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiRequestOfTargetingEntity;

        // create path and map variables
        String localVarPath = "/preview/campaigns/{campaignId}/targeting/domain-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCampaignDomainRulesValidateBeforeCall(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling putCampaignDomainRules(Async)");
        }

        return putCampaignDomainRulesCall(campaignId, apiRequestOfTargetingEntity, _callback);

    }

    /**
     * 
     * Updates the targeted domains for a campaign by adding a list of domains to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponseOfTargetingEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseOfTargetingEntity putCampaignDomainRules(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        ApiResponse<ApiResponseOfTargetingEntity> localVarResp = putCampaignDomainRulesWithHttpInfo(campaignId, apiRequestOfTargetingEntity);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the targeted domains for a campaign by adding a list of domains to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @return ApiResponse&lt;ApiResponseOfTargetingEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseOfTargetingEntity> putCampaignDomainRulesWithHttpInfo(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity) throws ApiException {
        okhttp3.Call localVarCall = putCampaignDomainRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, null);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the targeted domains for a campaign by adding a list of domains to the current list.&lt;br /&gt;  The mode of targeting (allowlist/blocklist) cannot be updated through this method.
     * @param campaignId The campaign id (required)
     * @param apiRequestOfTargetingEntity Contains the list of items to add to the existing list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCampaignDomainRulesAsync(Integer campaignId, ApiRequestOfTargetingEntity apiRequestOfTargetingEntity, final ApiCallback<ApiResponseOfTargetingEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCampaignDomainRulesValidateBeforeCall(campaignId, apiRequestOfTargetingEntity, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseOfTargetingEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAdSetsV24Q3
     * @param adSetSearchRequestV24Q3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAdSetsV24Q3Call(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adSetSearchRequestV24Q3;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAdSetsV24Q3ValidateBeforeCall(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3, final ApiCallback _callback) throws ApiException {
        return searchAdSetsV24Q3Call(adSetSearchRequestV24Q3, _callback);

    }

    /**
     * 
     * Search for ad sets
     * @param adSetSearchRequestV24Q3  (optional)
     * @return ResponsesReadAdSetV24Q3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesReadAdSetV24Q3 searchAdSetsV24Q3(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3) throws ApiException {
        ApiResponse<ResponsesReadAdSetV24Q3> localVarResp = searchAdSetsV24Q3WithHttpInfo(adSetSearchRequestV24Q3);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for ad sets
     * @param adSetSearchRequestV24Q3  (optional)
     * @return ApiResponse&lt;ResponsesReadAdSetV24Q3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesReadAdSetV24Q3> searchAdSetsV24Q3WithHttpInfo(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3) throws ApiException {
        okhttp3.Call localVarCall = searchAdSetsV24Q3ValidateBeforeCall(adSetSearchRequestV24Q3, null);
        Type localVarReturnType = new TypeToken<ResponsesReadAdSetV24Q3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for ad sets
     * @param adSetSearchRequestV24Q3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the ad sets </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAdSetsV24Q3Async(AdSetSearchRequestV24Q3 adSetSearchRequestV24Q3, final ApiCallback<ResponsesReadAdSetV24Q3> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAdSetsV24Q3ValidateBeforeCall(adSetSearchRequestV24Q3, _callback);
        Type localVarReturnType = new TypeToken<ResponsesReadAdSetV24Q3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCampaignsV23Q1
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCampaignsV23Q1Call(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignSearchRequestV23Q1;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/campaigns/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCampaignsV23Q1ValidateBeforeCall(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1, final ApiCallback _callback) throws ApiException {
        return searchCampaignsV23Q1Call(campaignSearchRequestV23Q1, _callback);

    }

    /**
     * 
     * Search for campaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @return CampaignV23Q1ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public CampaignV23Q1ListResponse searchCampaignsV23Q1(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1) throws ApiException {
        ApiResponse<CampaignV23Q1ListResponse> localVarResp = searchCampaignsV23Q1WithHttpInfo(campaignSearchRequestV23Q1);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for campaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @return ApiResponse&lt;CampaignV23Q1ListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignV23Q1ListResponse> searchCampaignsV23Q1WithHttpInfo(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1) throws ApiException {
        okhttp3.Call localVarCall = searchCampaignsV23Q1ValidateBeforeCall(campaignSearchRequestV23Q1, null);
        Type localVarReturnType = new TypeToken<CampaignV23Q1ListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for campaigns
     * @param campaignSearchRequestV23Q1 filters on campaigns (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> data for the campaigns </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCampaignsV23Q1Async(CampaignSearchRequestV23Q1 campaignSearchRequestV23Q1, final ApiCallback<CampaignV23Q1ListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCampaignsV23Q1ValidateBeforeCall(campaignSearchRequestV23Q1, _callback);
        Type localVarReturnType = new TypeToken<CampaignV23Q1ListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setAdSetTargetingDealIds
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingDealIdsRequest the new Deal Id Targeting configuration (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAdSetTargetingDealIdsCall(String adSetId, SetAdSetTargetingDealIdsRequest setAdSetTargetingDealIdsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setAdSetTargetingDealIdsRequest;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/deal-ids"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAdSetTargetingDealIdsValidateBeforeCall(String adSetId, SetAdSetTargetingDealIdsRequest setAdSetTargetingDealIdsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling setAdSetTargetingDealIds(Async)");
        }

        return setAdSetTargetingDealIdsCall(adSetId, setAdSetTargetingDealIdsRequest, _callback);

    }

    /**
     * 
     * Set the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingDealIdsRequest the new Deal Id Targeting configuration (optional)
     * @return AdSetTargetingDealIdsSetResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetTargetingDealIdsSetResultResponse setAdSetTargetingDealIds(String adSetId, SetAdSetTargetingDealIdsRequest setAdSetTargetingDealIdsRequest) throws ApiException {
        ApiResponse<AdSetTargetingDealIdsSetResultResponse> localVarResp = setAdSetTargetingDealIdsWithHttpInfo(adSetId, setAdSetTargetingDealIdsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingDealIdsRequest the new Deal Id Targeting configuration (optional)
     * @return ApiResponse&lt;AdSetTargetingDealIdsSetResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetTargetingDealIdsSetResultResponse> setAdSetTargetingDealIdsWithHttpInfo(String adSetId, SetAdSetTargetingDealIdsRequest setAdSetTargetingDealIdsRequest) throws ApiException {
        okhttp3.Call localVarCall = setAdSetTargetingDealIdsValidateBeforeCall(adSetId, setAdSetTargetingDealIdsRequest, null);
        Type localVarReturnType = new TypeToken<AdSetTargetingDealIdsSetResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the Deal Id Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingDealIdsRequest the new Deal Id Targeting configuration (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAdSetTargetingDealIdsAsync(String adSetId, SetAdSetTargetingDealIdsRequest setAdSetTargetingDealIdsRequest, final ApiCallback<AdSetTargetingDealIdsSetResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAdSetTargetingDealIdsValidateBeforeCall(adSetId, setAdSetTargetingDealIdsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdSetTargetingDealIdsSetResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setAdSetTargetingVideoPositioning
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingVideoPositioningRequest the new Video Positioning Targeting configuration (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAdSetTargetingVideoPositioningCall(String adSetId, SetAdSetTargetingVideoPositioningRequest setAdSetTargetingVideoPositioningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setAdSetTargetingVideoPositioningRequest;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/targeting/video-positioning"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAdSetTargetingVideoPositioningValidateBeforeCall(String adSetId, SetAdSetTargetingVideoPositioningRequest setAdSetTargetingVideoPositioningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling setAdSetTargetingVideoPositioning(Async)");
        }

        return setAdSetTargetingVideoPositioningCall(adSetId, setAdSetTargetingVideoPositioningRequest, _callback);

    }

    /**
     * 
     * Set the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingVideoPositioningRequest the new Video Positioning Targeting configuration (optional)
     * @return AdSetTargetingVideoPositioningSetResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetTargetingVideoPositioningSetResultResponse setAdSetTargetingVideoPositioning(String adSetId, SetAdSetTargetingVideoPositioningRequest setAdSetTargetingVideoPositioningRequest) throws ApiException {
        ApiResponse<AdSetTargetingVideoPositioningSetResultResponse> localVarResp = setAdSetTargetingVideoPositioningWithHttpInfo(adSetId, setAdSetTargetingVideoPositioningRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingVideoPositioningRequest the new Video Positioning Targeting configuration (optional)
     * @return ApiResponse&lt;AdSetTargetingVideoPositioningSetResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetTargetingVideoPositioningSetResultResponse> setAdSetTargetingVideoPositioningWithHttpInfo(String adSetId, SetAdSetTargetingVideoPositioningRequest setAdSetTargetingVideoPositioningRequest) throws ApiException {
        okhttp3.Call localVarCall = setAdSetTargetingVideoPositioningValidateBeforeCall(adSetId, setAdSetTargetingVideoPositioningRequest, null);
        Type localVarReturnType = new TypeToken<AdSetTargetingVideoPositioningSetResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the Video Positioning Targeting configuration for the ad set whose id is specified
     * @param adSetId Id of the Ad Set (required)
     * @param setAdSetTargetingVideoPositioningRequest the new Video Positioning Targeting configuration (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the errors/warnings if any </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource or the resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAdSetTargetingVideoPositioningAsync(String adSetId, SetAdSetTargetingVideoPositioningRequest setAdSetTargetingVideoPositioningRequest, final ApiCallback<AdSetTargetingVideoPositioningSetResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAdSetTargetingVideoPositioningValidateBeforeCall(adSetId, setAdSetTargetingVideoPositioningRequest, _callback);
        Type localVarReturnType = new TypeToken<AdSetTargetingVideoPositioningSetResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startAdSets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startAdSetsCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestsAdSetId;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startAdSetsValidateBeforeCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        return startAdSetsCall(requestsAdSetId, _callback);

    }

    /**
     * 
     * Start the specified list of ad sets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @return ResponsesAdSetId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesAdSetId startAdSets(RequestsAdSetId requestsAdSetId) throws ApiException {
        ApiResponse<ResponsesAdSetId> localVarResp = startAdSetsWithHttpInfo(requestsAdSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Start the specified list of ad sets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @return ApiResponse&lt;ResponsesAdSetId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesAdSetId> startAdSetsWithHttpInfo(RequestsAdSetId requestsAdSetId) throws ApiException {
        okhttp3.Call localVarCall = startAdSetsValidateBeforeCall(requestsAdSetId, null);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start the specified list of ad sets
     * @param requestsAdSetId All the ad sets to start (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been started and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startAdSetsAsync(RequestsAdSetId requestsAdSetId, final ApiCallback<ResponsesAdSetId> _callback) throws ApiException {

        okhttp3.Call localVarCall = startAdSetsValidateBeforeCall(requestsAdSetId, _callback);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopAdSets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopAdSetsCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestsAdSetId;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopAdSetsValidateBeforeCall(RequestsAdSetId requestsAdSetId, final ApiCallback _callback) throws ApiException {
        return stopAdSetsCall(requestsAdSetId, _callback);

    }

    /**
     * 
     * Stop the specified list of ad sets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @return ResponsesAdSetId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ResponsesAdSetId stopAdSets(RequestsAdSetId requestsAdSetId) throws ApiException {
        ApiResponse<ResponsesAdSetId> localVarResp = stopAdSetsWithHttpInfo(requestsAdSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Stop the specified list of ad sets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @return ApiResponse&lt;ResponsesAdSetId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsesAdSetId> stopAdSetsWithHttpInfo(RequestsAdSetId requestsAdSetId) throws ApiException {
        okhttp3.Call localVarCall = stopAdSetsValidateBeforeCall(requestsAdSetId, null);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop the specified list of ad sets
     * @param requestsAdSetId All the ad sets to stop (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of ad sets that have been stopped and errors / warnings by ad set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopAdSetsAsync(RequestsAdSetId requestsAdSetId, final ApiCallback<ResponsesAdSetId> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopAdSetsValidateBeforeCall(requestsAdSetId, _callback);
        Type localVarReturnType = new TypeToken<ResponsesAdSetId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdSetAudience
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdSetAudienceCall(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adSetAudienceLinkInputEntityV1;

        // create path and map variables
        String localVarPath = "/preview/marketing-solutions/ad-sets/{ad-set-id}/audience"
            .replace("{" + "ad-set-id" + "}", localVarApiClient.escapeString(adSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdSetAudienceValidateBeforeCall(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adSetId' is set
        if (adSetId == null) {
            throw new ApiException("Missing the required parameter 'adSetId' when calling updateAdSetAudience(Async)");
        }

        // verify the required parameter 'adSetAudienceLinkInputEntityV1' is set
        if (adSetAudienceLinkInputEntityV1 == null) {
            throw new ApiException("Missing the required parameter 'adSetAudienceLinkInputEntityV1' when calling updateAdSetAudience(Async)");
        }

        return updateAdSetAudienceCall(adSetId, adSetAudienceLinkInputEntityV1, _callback);

    }

    /**
     * 
     * Link or unlink an audience with an ad set
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @return AdSetAudienceLinkEntityV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public AdSetAudienceLinkEntityV1Response updateAdSetAudience(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1) throws ApiException {
        ApiResponse<AdSetAudienceLinkEntityV1Response> localVarResp = updateAdSetAudienceWithHttpInfo(adSetId, adSetAudienceLinkInputEntityV1);
        return localVarResp.getData();
    }

    /**
     * 
     * Link or unlink an audience with an ad set
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @return ApiResponse&lt;AdSetAudienceLinkEntityV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSetAudienceLinkEntityV1Response> updateAdSetAudienceWithHttpInfo(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1) throws ApiException {
        okhttp3.Call localVarCall = updateAdSetAudienceValidateBeforeCall(adSetId, adSetAudienceLinkInputEntityV1, null);
        Type localVarReturnType = new TypeToken<AdSetAudienceLinkEntityV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Link or unlink an audience with an ad set
     * @param adSetId The ad set ID. (required)
     * @param adSetAudienceLinkInputEntityV1 Ad set-Audience update request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The API client is not properly authenticated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The API client is not authorized to access this resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdSetAudienceAsync(String adSetId, AdSetAudienceLinkInputEntityV1 adSetAudienceLinkInputEntityV1, final ApiCallback<AdSetAudienceLinkEntityV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdSetAudienceValidateBeforeCall(adSetId, adSetAudienceLinkInputEntityV1, _callback);
        Type localVarReturnType = new TypeToken<AdSetAudienceLinkEntityV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
