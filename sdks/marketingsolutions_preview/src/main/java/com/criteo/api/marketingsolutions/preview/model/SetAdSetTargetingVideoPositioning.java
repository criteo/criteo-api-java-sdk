/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Video positioning targeting writing model
 */
@ApiModel(description = "Video positioning targeting writing model")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SetAdSetTargetingVideoPositioning {
  /**
   * Gets or Sets videoPlacement
   */
  @JsonAdapter(VideoPlacementEnum.Adapter.class)
  public enum VideoPlacementEnum {
    INBANNER("InBanner"),
    
    INARTICLE("InArticle"),
    
    INFEED("InFeed"),
    
    INTERSTITIAL("Interstitial"),
    
    INSTREAM("InStream");

    private String value;

    VideoPlacementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoPlacementEnum fromValue(String value) {
      for (VideoPlacementEnum b : VideoPlacementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoPlacementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoPlacementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoPlacementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoPlacementEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_PLACEMENT = "videoPlacement";
  @SerializedName(SERIALIZED_NAME_VIDEO_PLACEMENT)
  private List<VideoPlacementEnum> videoPlacement = null;

  /**
   * Gets or Sets playbackMethod
   */
  @JsonAdapter(PlaybackMethodEnum.Adapter.class)
  public enum PlaybackMethodEnum {
    AUTOSOUNDON("AutoSoundOn"),
    
    AUTOSOUNDOFF("AutoSoundOff"),
    
    CLICKSOUNDON("ClickSoundOn"),
    
    MOUSEOVERSOUNDON("MouseOverSoundOn"),
    
    ENTERINGVIEWPORTSOUNDON("EnteringViewportSoundOn"),
    
    ENTERINGVIEWPORTSOUNDOFF("EnteringViewportSoundOff");

    private String value;

    PlaybackMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaybackMethodEnum fromValue(String value) {
      for (PlaybackMethodEnum b : PlaybackMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaybackMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaybackMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaybackMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaybackMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAYBACK_METHOD = "playbackMethod";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_METHOD)
  private List<PlaybackMethodEnum> playbackMethod = null;

  /**
   * Gets or Sets skippable
   */
  @JsonAdapter(SkippableEnum.Adapter.class)
  public enum SkippableEnum {
    REQUIRED("Required"),
    
    BLOCKED("Blocked");

    private String value;

    SkippableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkippableEnum fromValue(String value) {
      for (SkippableEnum b : SkippableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkippableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkippableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkippableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkippableEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SKIPPABLE = "skippable";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE)
  private SkippableEnum skippable;

  /**
   * Gets or Sets videoInStreamPosition
   */
  @JsonAdapter(VideoInStreamPositionEnum.Adapter.class)
  public enum VideoInStreamPositionEnum {
    PREROLL("PreRoll"),
    
    MIDROLL("MidRoll"),
    
    POSTROLL("PostRoll");

    private String value;

    VideoInStreamPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoInStreamPositionEnum fromValue(String value) {
      for (VideoInStreamPositionEnum b : VideoInStreamPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoInStreamPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoInStreamPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoInStreamPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoInStreamPositionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_IN_STREAM_POSITION = "videoInStreamPosition";
  @SerializedName(SERIALIZED_NAME_VIDEO_IN_STREAM_POSITION)
  private List<VideoInStreamPositionEnum> videoInStreamPosition = null;

  /**
   * Gets or Sets videoPlayerSize
   */
  @JsonAdapter(VideoPlayerSizeEnum.Adapter.class)
  public enum VideoPlayerSizeEnum {
    SMALL("Small"),
    
    MEDIUM("Medium"),
    
    LARGE("Large"),
    
    EXTRALARGE("ExtraLarge");

    private String value;

    VideoPlayerSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoPlayerSizeEnum fromValue(String value) {
      for (VideoPlayerSizeEnum b : VideoPlayerSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoPlayerSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoPlayerSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoPlayerSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoPlayerSizeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_PLAYER_SIZE = "videoPlayerSize";
  @SerializedName(SERIALIZED_NAME_VIDEO_PLAYER_SIZE)
  private List<VideoPlayerSizeEnum> videoPlayerSize = null;

  /**
   * Gets or Sets videoAspectRatio
   */
  @JsonAdapter(VideoAspectRatioEnum.Adapter.class)
  public enum VideoAspectRatioEnum {
    HORIZONTAL("Horizontal"),
    
    SQUARE("Square"),
    
    VERTICAL("Vertical");

    private String value;

    VideoAspectRatioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoAspectRatioEnum fromValue(String value) {
      for (VideoAspectRatioEnum b : VideoAspectRatioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoAspectRatioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoAspectRatioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoAspectRatioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoAspectRatioEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_ASPECT_RATIO = "videoAspectRatio";
  @SerializedName(SERIALIZED_NAME_VIDEO_ASPECT_RATIO)
  private List<VideoAspectRatioEnum> videoAspectRatio = null;


  public SetAdSetTargetingVideoPositioning videoPlacement(List<VideoPlacementEnum> videoPlacement) {
    
    this.videoPlacement = videoPlacement;
    return this;
  }

  public SetAdSetTargetingVideoPositioning addVideoPlacementItem(VideoPlacementEnum videoPlacementItem) {
    if (this.videoPlacement == null) {
      this.videoPlacement = new ArrayList<>();
    }
    this.videoPlacement.add(videoPlacementItem);
    return this;
  }

   /**
   * Get videoPlacement
   * @return videoPlacement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VideoPlacementEnum> getVideoPlacement() {
    return videoPlacement;
  }


  public void setVideoPlacement(List<VideoPlacementEnum> videoPlacement) {
    this.videoPlacement = videoPlacement;
  }


  public SetAdSetTargetingVideoPositioning playbackMethod(List<PlaybackMethodEnum> playbackMethod) {
    
    this.playbackMethod = playbackMethod;
    return this;
  }

  public SetAdSetTargetingVideoPositioning addPlaybackMethodItem(PlaybackMethodEnum playbackMethodItem) {
    if (this.playbackMethod == null) {
      this.playbackMethod = new ArrayList<>();
    }
    this.playbackMethod.add(playbackMethodItem);
    return this;
  }

   /**
   * Get playbackMethod
   * @return playbackMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PlaybackMethodEnum> getPlaybackMethod() {
    return playbackMethod;
  }


  public void setPlaybackMethod(List<PlaybackMethodEnum> playbackMethod) {
    this.playbackMethod = playbackMethod;
  }


  public SetAdSetTargetingVideoPositioning skippable(SkippableEnum skippable) {
    
    this.skippable = skippable;
    return this;
  }

   /**
   * Get skippable
   * @return skippable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SkippableEnum getSkippable() {
    return skippable;
  }


  public void setSkippable(SkippableEnum skippable) {
    this.skippable = skippable;
  }


  public SetAdSetTargetingVideoPositioning videoInStreamPosition(List<VideoInStreamPositionEnum> videoInStreamPosition) {
    
    this.videoInStreamPosition = videoInStreamPosition;
    return this;
  }

  public SetAdSetTargetingVideoPositioning addVideoInStreamPositionItem(VideoInStreamPositionEnum videoInStreamPositionItem) {
    if (this.videoInStreamPosition == null) {
      this.videoInStreamPosition = new ArrayList<>();
    }
    this.videoInStreamPosition.add(videoInStreamPositionItem);
    return this;
  }

   /**
   * Get videoInStreamPosition
   * @return videoInStreamPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VideoInStreamPositionEnum> getVideoInStreamPosition() {
    return videoInStreamPosition;
  }


  public void setVideoInStreamPosition(List<VideoInStreamPositionEnum> videoInStreamPosition) {
    this.videoInStreamPosition = videoInStreamPosition;
  }


  public SetAdSetTargetingVideoPositioning videoPlayerSize(List<VideoPlayerSizeEnum> videoPlayerSize) {
    
    this.videoPlayerSize = videoPlayerSize;
    return this;
  }

  public SetAdSetTargetingVideoPositioning addVideoPlayerSizeItem(VideoPlayerSizeEnum videoPlayerSizeItem) {
    if (this.videoPlayerSize == null) {
      this.videoPlayerSize = new ArrayList<>();
    }
    this.videoPlayerSize.add(videoPlayerSizeItem);
    return this;
  }

   /**
   * Get videoPlayerSize
   * @return videoPlayerSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VideoPlayerSizeEnum> getVideoPlayerSize() {
    return videoPlayerSize;
  }


  public void setVideoPlayerSize(List<VideoPlayerSizeEnum> videoPlayerSize) {
    this.videoPlayerSize = videoPlayerSize;
  }


  public SetAdSetTargetingVideoPositioning videoAspectRatio(List<VideoAspectRatioEnum> videoAspectRatio) {
    
    this.videoAspectRatio = videoAspectRatio;
    return this;
  }

  public SetAdSetTargetingVideoPositioning addVideoAspectRatioItem(VideoAspectRatioEnum videoAspectRatioItem) {
    if (this.videoAspectRatio == null) {
      this.videoAspectRatio = new ArrayList<>();
    }
    this.videoAspectRatio.add(videoAspectRatioItem);
    return this;
  }

   /**
   * Get videoAspectRatio
   * @return videoAspectRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VideoAspectRatioEnum> getVideoAspectRatio() {
    return videoAspectRatio;
  }


  public void setVideoAspectRatio(List<VideoAspectRatioEnum> videoAspectRatio) {
    this.videoAspectRatio = videoAspectRatio;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetAdSetTargetingVideoPositioning setAdSetTargetingVideoPositioning = (SetAdSetTargetingVideoPositioning) o;
    return Objects.equals(this.videoPlacement, setAdSetTargetingVideoPositioning.videoPlacement) &&
        Objects.equals(this.playbackMethod, setAdSetTargetingVideoPositioning.playbackMethod) &&
        Objects.equals(this.skippable, setAdSetTargetingVideoPositioning.skippable) &&
        Objects.equals(this.videoInStreamPosition, setAdSetTargetingVideoPositioning.videoInStreamPosition) &&
        Objects.equals(this.videoPlayerSize, setAdSetTargetingVideoPositioning.videoPlayerSize) &&
        Objects.equals(this.videoAspectRatio, setAdSetTargetingVideoPositioning.videoAspectRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videoPlacement, playbackMethod, skippable, videoInStreamPosition, videoPlayerSize, videoAspectRatio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetAdSetTargetingVideoPositioning {\n");
    sb.append("    videoPlacement: ").append(toIndentedString(videoPlacement)).append("\n");
    sb.append("    playbackMethod: ").append(toIndentedString(playbackMethod)).append("\n");
    sb.append("    skippable: ").append(toIndentedString(skippable)).append("\n");
    sb.append("    videoInStreamPosition: ").append(toIndentedString(videoInStreamPosition)).append("\n");
    sb.append("    videoPlayerSize: ").append(toIndentedString(videoPlayerSize)).append("\n");
    sb.append("    videoAspectRatio: ").append(toIndentedString(videoAspectRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

