/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.preview.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.criteo.api.marketingsolutions.preview.JSON;

/**
 * This is the message defining the query for Categories report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GenerateCategoriesReportRequestAttributes {
  public static final String SERIALIZED_NAME_ADSET_ID = "adsetId";
  @SerializedName(SERIALIZED_NAME_ADSET_ID)
  private String adsetId;

  public static final String SERIALIZED_NAME_ADVERTISER_IDS = "advertiserIds";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_IDS)
  private List<String> advertiserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  /**
   * The file format of the generated report
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CSV("csv"),
    
    EXCEL("excel"),
    
    XML("xml"),
    
    JSON("json");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.JSON;

  public static final String SERIALIZED_NAME_SHOULD_DISPLAY_DOMAIN_DIMENSION = "shouldDisplayDomainDimension";
  @SerializedName(SERIALIZED_NAME_SHOULD_DISPLAY_DOMAIN_DIMENSION)
  private Boolean shouldDisplayDomainDimension = true;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone = "UTC";

  public GenerateCategoriesReportRequestAttributes() {
  }

  public GenerateCategoriesReportRequestAttributes adsetId(String adsetId) {
    
    this.adsetId = adsetId;
    return this;
  }

   /**
   * Report only on the specified AdSet id.
   * @return adsetId
  **/
  @javax.annotation.Nullable

  public String getAdsetId() {
    return adsetId;
  }


  public void setAdsetId(String adsetId) {
    this.adsetId = adsetId;
  }


  public GenerateCategoriesReportRequestAttributes advertiserIds(List<String> advertiserIds) {
    
    this.advertiserIds = advertiserIds;
    return this;
  }

  public GenerateCategoriesReportRequestAttributes addAdvertiserIdsItem(String advertiserIdsItem) {
    this.advertiserIds.add(advertiserIdsItem);
    return this;
  }

   /**
   * List of Advertiser ids.
   * @return advertiserIds
  **/
  @javax.annotation.Nonnull

  public List<String> getAdvertiserIds() {
    return advertiserIds;
  }


  public void setAdvertiserIds(List<String> advertiserIds) {
    this.advertiserIds = advertiserIds;
  }


  public GenerateCategoriesReportRequestAttributes campaignId(String campaignId) {
    
    this.campaignId = campaignId;
    return this;
  }

   /**
   * Report only on the specified Campaign id.
   * @return campaignId
  **/
  @javax.annotation.Nullable

  public String getCampaignId() {
    return campaignId;
  }


  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public GenerateCategoriesReportRequestAttributes category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Report only on the specified category.
   * @return category
  **/
  @javax.annotation.Nullable

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public GenerateCategoriesReportRequestAttributes domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Report only on the specified domain.
   * @return domain
  **/
  @javax.annotation.Nullable

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public GenerateCategoriesReportRequestAttributes endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.
   * @return endDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public GenerateCategoriesReportRequestAttributes format(FormatEnum format) {
    
    this.format = format;
    return this;
  }

   /**
   * The file format of the generated report
   * @return format
  **/
  @javax.annotation.Nullable

  public FormatEnum getFormat() {
    return format;
  }


  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public GenerateCategoriesReportRequestAttributes shouldDisplayDomainDimension(Boolean shouldDisplayDomainDimension) {
    
    this.shouldDisplayDomainDimension = shouldDisplayDomainDimension;
    return this;
  }

   /**
   * Specify if the domain dimension is displayed in the report.
   * @return shouldDisplayDomainDimension
  **/
  @javax.annotation.Nullable

  public Boolean getShouldDisplayDomainDimension() {
    return shouldDisplayDomainDimension;
  }


  public void setShouldDisplayDomainDimension(Boolean shouldDisplayDomainDimension) {
    this.shouldDisplayDomainDimension = shouldDisplayDomainDimension;
  }


  public GenerateCategoriesReportRequestAttributes startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.
   * @return startDate
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public GenerateCategoriesReportRequestAttributes timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone used for the report. Timezone Database format (Tz).
   * @return timezone
  **/
  @javax.annotation.Nullable

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateCategoriesReportRequestAttributes generateCategoriesReportRequestAttributes = (GenerateCategoriesReportRequestAttributes) o;
    return Objects.equals(this.adsetId, generateCategoriesReportRequestAttributes.adsetId) &&
        Objects.equals(this.advertiserIds, generateCategoriesReportRequestAttributes.advertiserIds) &&
        Objects.equals(this.campaignId, generateCategoriesReportRequestAttributes.campaignId) &&
        Objects.equals(this.category, generateCategoriesReportRequestAttributes.category) &&
        Objects.equals(this.domain, generateCategoriesReportRequestAttributes.domain) &&
        Objects.equals(this.endDate, generateCategoriesReportRequestAttributes.endDate) &&
        Objects.equals(this.format, generateCategoriesReportRequestAttributes.format) &&
        Objects.equals(this.shouldDisplayDomainDimension, generateCategoriesReportRequestAttributes.shouldDisplayDomainDimension) &&
        Objects.equals(this.startDate, generateCategoriesReportRequestAttributes.startDate) &&
        Objects.equals(this.timezone, generateCategoriesReportRequestAttributes.timezone);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(adsetId, advertiserIds, campaignId, category, domain, endDate, format, shouldDisplayDomainDimension, startDate, timezone);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateCategoriesReportRequestAttributes {\n");
    sb.append("    adsetId: ").append(toIndentedString(adsetId)).append("\n");
    sb.append("    advertiserIds: ").append(toIndentedString(advertiserIds)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    shouldDisplayDomainDimension: ").append(toIndentedString(shouldDisplayDomainDimension)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adsetId");
    openapiFields.add("advertiserIds");
    openapiFields.add("campaignId");
    openapiFields.add("category");
    openapiFields.add("domain");
    openapiFields.add("endDate");
    openapiFields.add("format");
    openapiFields.add("shouldDisplayDomainDimension");
    openapiFields.add("startDate");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("advertiserIds");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenerateCategoriesReportRequestAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GenerateCategoriesReportRequestAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateCategoriesReportRequestAttributes is not found in the empty JSON string", GenerateCategoriesReportRequestAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GenerateCategoriesReportRequestAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateCategoriesReportRequestAttributes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateCategoriesReportRequestAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("adsetId") != null && !jsonObj.get("adsetId").isJsonNull()) && !jsonObj.get("adsetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adsetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adsetId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("advertiserIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("advertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("advertiserIds").toString()));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateCategoriesReportRequestAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateCategoriesReportRequestAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateCategoriesReportRequestAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateCategoriesReportRequestAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateCategoriesReportRequestAttributes>() {
           @Override
           public void write(JsonWriter out, GenerateCategoriesReportRequestAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateCategoriesReportRequestAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateCategoriesReportRequestAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateCategoriesReportRequestAttributes
  * @throws IOException if the JSON string is invalid with respect to GenerateCategoriesReportRequestAttributes
  */
  public static GenerateCategoriesReportRequestAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateCategoriesReportRequestAttributes.class);
  }

 /**
  * Convert an instance of GenerateCategoriesReportRequestAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

