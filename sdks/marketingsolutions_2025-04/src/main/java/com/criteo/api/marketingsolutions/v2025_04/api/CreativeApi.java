/*
 * Criteo API
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: 2025-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.marketingsolutions.v2025_04.api;

import com.criteo.api.marketingsolutions.v2025_04.ApiCallback;
import com.criteo.api.marketingsolutions.v2025_04.ApiClient;
import com.criteo.api.marketingsolutions.v2025_04.ApiException;
import com.criteo.api.marketingsolutions.v2025_04.ApiResponse;
import com.criteo.api.marketingsolutions.v2025_04.Configuration;
import com.criteo.api.marketingsolutions.v2025_04.Pair;
import com.criteo.api.marketingsolutions.v2025_04.ProgressRequestBody;
import com.criteo.api.marketingsolutions.v2025_04.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.marketingsolutions.v2025_04.model.ResourceCollectionOutcomeOfAd;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceCollectionOutcomeOfCoupon;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceCollectionOutcomeOfCreative;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceInputOfAdWrite;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceInputOfCreateCoupon;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceInputOfCreativeWrite;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceInputOfUpdateCoupon;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceOutcomeOfAd;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceOutcomeOfCoupon;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceOutcomeOfCouponSupportedSizes;
import com.criteo.api.marketingsolutions.v2025_04.model.ResourceOutcomeOfCreative;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CreativeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreativeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreativeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAdvertiserAd
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfAdWrite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvertiserAdCall(String advertiserId, ResourceInputOfAdWrite resourceInputOfAdWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceInputOfAdWrite;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/ads"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdvertiserAdValidateBeforeCall(String advertiserId, ResourceInputOfAdWrite resourceInputOfAdWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling createAdvertiserAd(Async)");
        }

        // verify the required parameter 'resourceInputOfAdWrite' is set
        if (resourceInputOfAdWrite == null) {
            throw new ApiException("Missing the required parameter 'resourceInputOfAdWrite' when calling createAdvertiserAd(Async)");
        }

        return createAdvertiserAdCall(advertiserId, resourceInputOfAdWrite, _callback);

    }

    /**
     * 
     * Create an Ad
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfAdWrite  (required)
     * @return ResourceOutcomeOfAd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfAd createAdvertiserAd(String advertiserId, ResourceInputOfAdWrite resourceInputOfAdWrite) throws ApiException {
        ApiResponse<ResourceOutcomeOfAd> localVarResp = createAdvertiserAdWithHttpInfo(advertiserId, resourceInputOfAdWrite);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an Ad
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfAdWrite  (required)
     * @return ApiResponse&lt;ResourceOutcomeOfAd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfAd> createAdvertiserAdWithHttpInfo(String advertiserId, ResourceInputOfAdWrite resourceInputOfAdWrite) throws ApiException {
        okhttp3.Call localVarCall = createAdvertiserAdValidateBeforeCall(advertiserId, resourceInputOfAdWrite, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfAd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Ad
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfAdWrite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvertiserAdAsync(String advertiserId, ResourceInputOfAdWrite resourceInputOfAdWrite, final ApiCallback<ResourceOutcomeOfAd> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdvertiserAdValidateBeforeCall(advertiserId, resourceInputOfAdWrite, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfAd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAdvertiserCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreateCoupon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvertiserCouponCall(String advertiserId, ResourceInputOfCreateCoupon resourceInputOfCreateCoupon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceInputOfCreateCoupon;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdvertiserCouponValidateBeforeCall(String advertiserId, ResourceInputOfCreateCoupon resourceInputOfCreateCoupon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling createAdvertiserCoupon(Async)");
        }

        // verify the required parameter 'resourceInputOfCreateCoupon' is set
        if (resourceInputOfCreateCoupon == null) {
            throw new ApiException("Missing the required parameter 'resourceInputOfCreateCoupon' when calling createAdvertiserCoupon(Async)");
        }

        return createAdvertiserCouponCall(advertiserId, resourceInputOfCreateCoupon, _callback);

    }

    /**
     * 
     * Create a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreateCoupon  (required)
     * @return ResourceOutcomeOfCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCoupon createAdvertiserCoupon(String advertiserId, ResourceInputOfCreateCoupon resourceInputOfCreateCoupon) throws ApiException {
        ApiResponse<ResourceOutcomeOfCoupon> localVarResp = createAdvertiserCouponWithHttpInfo(advertiserId, resourceInputOfCreateCoupon);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreateCoupon  (required)
     * @return ApiResponse&lt;ResourceOutcomeOfCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCoupon> createAdvertiserCouponWithHttpInfo(String advertiserId, ResourceInputOfCreateCoupon resourceInputOfCreateCoupon) throws ApiException {
        okhttp3.Call localVarCall = createAdvertiserCouponValidateBeforeCall(advertiserId, resourceInputOfCreateCoupon, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreateCoupon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvertiserCouponAsync(String advertiserId, ResourceInputOfCreateCoupon resourceInputOfCreateCoupon, final ApiCallback<ResourceOutcomeOfCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdvertiserCouponValidateBeforeCall(advertiserId, resourceInputOfCreateCoupon, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAdvertiserCreative
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvertiserCreativeCall(String advertiserId, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceInputOfCreativeWrite;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/creatives"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdvertiserCreativeValidateBeforeCall(String advertiserId, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling createAdvertiserCreative(Async)");
        }

        // verify the required parameter 'resourceInputOfCreativeWrite' is set
        if (resourceInputOfCreativeWrite == null) {
            throw new ApiException("Missing the required parameter 'resourceInputOfCreativeWrite' when calling createAdvertiserCreative(Async)");
        }

        return createAdvertiserCreativeCall(advertiserId, resourceInputOfCreativeWrite, _callback);

    }

    /**
     * 
     * Create a Creative
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @return ResourceOutcomeOfCreative
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCreative createAdvertiserCreative(String advertiserId, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite) throws ApiException {
        ApiResponse<ResourceOutcomeOfCreative> localVarResp = createAdvertiserCreativeWithHttpInfo(advertiserId, resourceInputOfCreativeWrite);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Creative
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @return ApiResponse&lt;ResourceOutcomeOfCreative&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCreative> createAdvertiserCreativeWithHttpInfo(String advertiserId, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite) throws ApiException {
        okhttp3.Call localVarCall = createAdvertiserCreativeValidateBeforeCall(advertiserId, resourceInputOfCreativeWrite, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCreative>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Creative
     * @param advertiserId The advertiser identifier. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdvertiserCreativeAsync(String advertiserId, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite, final ApiCallback<ResourceOutcomeOfCreative> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdvertiserCreativeValidateBeforeCall(advertiserId, resourceInputOfCreativeWrite, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCreative>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAd
     * @param id The ad identifier to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/ads/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAd(Async)");
        }

        return deleteAdCall(id, _callback);

    }

    /**
     * 
     * Delete an Ad
     * @param id The ad identifier to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAd(Integer id) throws ApiException {
        deleteAdWithHttpInfo(id);
    }

    /**
     * 
     * Delete an Ad
     * @param id The ad identifier to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteAdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an Ad
     * @param id The ad identifier to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The ad was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAdvertiserCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvertiserCouponCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdvertiserCouponValidateBeforeCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling deleteAdvertiserCoupon(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAdvertiserCoupon(Async)");
        }

        return deleteAdvertiserCouponCall(advertiserId, id, _callback);

    }

    /**
     * 
     * Delete a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAdvertiserCoupon(String advertiserId, String id) throws ApiException {
        deleteAdvertiserCouponWithHttpInfo(advertiserId, id);
    }

    /**
     * 
     * Delete a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAdvertiserCouponWithHttpInfo(String advertiserId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteAdvertiserCouponValidateBeforeCall(advertiserId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Coupon was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdvertiserCouponAsync(String advertiserId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdvertiserCouponValidateBeforeCall(advertiserId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCreative
     * @param id The creative identifier to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCreativeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/creatives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCreativeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCreative(Async)");
        }

        return deleteCreativeCall(id, _callback);

    }

    /**
     * 
     * Delete a Creative if there are no ads binded to it
     * @param id The creative identifier to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCreative(String id) throws ApiException {
        deleteCreativeWithHttpInfo(id);
    }

    /**
     * 
     * Delete a Creative if there are no ads binded to it
     * @param id The creative identifier to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCreativeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCreativeValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Creative if there are no ads binded to it
     * @param id The creative identifier to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The creative was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCreativeAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCreativeValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editAdvertiserCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param resourceInputOfUpdateCoupon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editAdvertiserCouponCall(String advertiserId, String id, ResourceInputOfUpdateCoupon resourceInputOfUpdateCoupon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceInputOfUpdateCoupon;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editAdvertiserCouponValidateBeforeCall(String advertiserId, String id, ResourceInputOfUpdateCoupon resourceInputOfUpdateCoupon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling editAdvertiserCoupon(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editAdvertiserCoupon(Async)");
        }

        // verify the required parameter 'resourceInputOfUpdateCoupon' is set
        if (resourceInputOfUpdateCoupon == null) {
            throw new ApiException("Missing the required parameter 'resourceInputOfUpdateCoupon' when calling editAdvertiserCoupon(Async)");
        }

        return editAdvertiserCouponCall(advertiserId, id, resourceInputOfUpdateCoupon, _callback);

    }

    /**
     * 
     * Edit a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param resourceInputOfUpdateCoupon  (required)
     * @return ResourceOutcomeOfCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCoupon editAdvertiserCoupon(String advertiserId, String id, ResourceInputOfUpdateCoupon resourceInputOfUpdateCoupon) throws ApiException {
        ApiResponse<ResourceOutcomeOfCoupon> localVarResp = editAdvertiserCouponWithHttpInfo(advertiserId, id, resourceInputOfUpdateCoupon);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param resourceInputOfUpdateCoupon  (required)
     * @return ApiResponse&lt;ResourceOutcomeOfCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCoupon> editAdvertiserCouponWithHttpInfo(String advertiserId, String id, ResourceInputOfUpdateCoupon resourceInputOfUpdateCoupon) throws ApiException {
        okhttp3.Call localVarCall = editAdvertiserCouponValidateBeforeCall(advertiserId, id, resourceInputOfUpdateCoupon, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to edit. (required)
     * @param resourceInputOfUpdateCoupon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editAdvertiserCouponAsync(String advertiserId, String id, ResourceInputOfUpdateCoupon resourceInputOfUpdateCoupon, final ApiCallback<ResourceOutcomeOfCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = editAdvertiserCouponValidateBeforeCall(advertiserId, id, resourceInputOfUpdateCoupon, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editCreative
     * @param id The creative identifier to edit. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCreativeCall(String id, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceInputOfCreativeWrite;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/creatives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCreativeValidateBeforeCall(String id, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editCreative(Async)");
        }

        // verify the required parameter 'resourceInputOfCreativeWrite' is set
        if (resourceInputOfCreativeWrite == null) {
            throw new ApiException("Missing the required parameter 'resourceInputOfCreativeWrite' when calling editCreative(Async)");
        }

        return editCreativeCall(id, resourceInputOfCreativeWrite, _callback);

    }

    /**
     * 
     * Edit a specific Creative
     * @param id The creative identifier to edit. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @return ResourceOutcomeOfCreative
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCreative editCreative(String id, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite) throws ApiException {
        ApiResponse<ResourceOutcomeOfCreative> localVarResp = editCreativeWithHttpInfo(id, resourceInputOfCreativeWrite);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit a specific Creative
     * @param id The creative identifier to edit. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @return ApiResponse&lt;ResourceOutcomeOfCreative&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCreative> editCreativeWithHttpInfo(String id, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite) throws ApiException {
        okhttp3.Call localVarCall = editCreativeValidateBeforeCall(id, resourceInputOfCreativeWrite, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCreative>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit a specific Creative
     * @param id The creative identifier to edit. (required)
     * @param resourceInputOfCreativeWrite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCreativeAsync(String id, ResourceInputOfCreativeWrite resourceInputOfCreativeWrite, final ApiCallback<ResourceOutcomeOfCreative> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCreativeValidateBeforeCall(id, resourceInputOfCreativeWrite, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCreative>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateCreativePreview
     * @param id The Creative identifier to preview. (required)
     * @param height The height of the Creative to preview. (optional)
     * @param width The width of the Creative to preview. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCreativePreviewCall(String id, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/creatives/{id}/preview"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        final String[] localVarAccepts = {
            "text/html",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCreativePreviewValidateBeforeCall(String id, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling generateCreativePreview(Async)");
        }

        return generateCreativePreviewCall(id, height, width, _callback);

    }

    /**
     * 
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param height The height of the Creative to preview. (optional)
     * @param width The width of the Creative to preview. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public String generateCreativePreview(String id, Integer height, Integer width) throws ApiException {
        ApiResponse<String> localVarResp = generateCreativePreviewWithHttpInfo(id, height, width);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param height The height of the Creative to preview. (optional)
     * @param width The width of the Creative to preview. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> generateCreativePreviewWithHttpInfo(String id, Integer height, Integer width) throws ApiException {
        okhttp3.Call localVarCall = generateCreativePreviewValidateBeforeCall(id, height, width, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the preview of a specific Creative
     * @param id The Creative identifier to preview. (required)
     * @param height The height of the Creative to preview. (optional)
     * @param width The width of the Creative to preview. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCreativePreviewAsync(String id, Integer height, Integer width, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCreativePreviewValidateBeforeCall(id, height, width, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAd
     * @param id The ad identifier to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/ads/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAd(Async)");
        }

        return getAdCall(id, _callback);

    }

    /**
     * 
     * Get an Ad with its id
     * @param id The ad identifier to retrieve. (required)
     * @return ResourceOutcomeOfAd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfAd getAd(Integer id) throws ApiException {
        ApiResponse<ResourceOutcomeOfAd> localVarResp = getAdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an Ad with its id
     * @param id The ad identifier to retrieve. (required)
     * @return ApiResponse&lt;ResourceOutcomeOfAd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfAd> getAdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getAdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfAd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Ad with its id
     * @param id The ad identifier to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found ad is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdAsync(Integer id, final ApiCallback<ResourceOutcomeOfAd> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfAd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserAds
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserAdsCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/ads"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserAdsValidateBeforeCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserAds(Async)");
        }

        return getAdvertiserAdsCall(advertiserId, limit, offset, _callback);

    }

    /**
     * 
     * Get the list of self-services Ads for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @return ResourceCollectionOutcomeOfAd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollectionOutcomeOfAd getAdvertiserAds(String advertiserId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ResourceCollectionOutcomeOfAd> localVarResp = getAdvertiserAdsWithHttpInfo(advertiserId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of self-services Ads for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @return ApiResponse&lt;ResourceCollectionOutcomeOfAd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollectionOutcomeOfAd> getAdvertiserAdsWithHttpInfo(String advertiserId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserAdsValidateBeforeCall(advertiserId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ResourceCollectionOutcomeOfAd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of self-services Ads for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of ads to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Ads is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserAdsAsync(String advertiserId, Integer limit, Integer offset, final ApiCallback<ResourceCollectionOutcomeOfAd> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserAdsValidateBeforeCall(advertiserId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollectionOutcomeOfAd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserCoupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserCouponValidateBeforeCall(String advertiserId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserCoupon(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdvertiserCoupon(Async)");
        }

        return getAdvertiserCouponCall(advertiserId, id, _callback);

    }

    /**
     * 
     * Get a Coupon with its id
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @return ResourceOutcomeOfCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCoupon getAdvertiserCoupon(String advertiserId, String id) throws ApiException {
        ApiResponse<ResourceOutcomeOfCoupon> localVarResp = getAdvertiserCouponWithHttpInfo(advertiserId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Coupon with its id
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @return ApiResponse&lt;ResourceOutcomeOfCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCoupon> getAdvertiserCouponWithHttpInfo(String advertiserId, String id) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserCouponValidateBeforeCall(advertiserId, id, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Coupon with its id
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponAsync(String advertiserId, String id, final ApiCallback<ResourceOutcomeOfCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserCouponValidateBeforeCall(advertiserId, id, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserCouponPreview
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param height The height of the coupon to preview. (optional)
     * @param width The width of the coupon to preview. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponPreviewCall(String advertiserId, String id, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}/preview"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        final String[] localVarAccepts = {
            "text/html",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserCouponPreviewValidateBeforeCall(String advertiserId, String id, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserCouponPreview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdvertiserCouponPreview(Async)");
        }

        return getAdvertiserCouponPreviewCall(advertiserId, id, height, width, _callback);

    }

    /**
     * 
     * Get the preview of a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param height The height of the coupon to preview. (optional)
     * @param width The width of the coupon to preview. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public String getAdvertiserCouponPreview(String advertiserId, String id, Integer height, Integer width) throws ApiException {
        ApiResponse<String> localVarResp = getAdvertiserCouponPreviewWithHttpInfo(advertiserId, id, height, width);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the preview of a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param height The height of the coupon to preview. (optional)
     * @param width The width of the coupon to preview. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdvertiserCouponPreviewWithHttpInfo(String advertiserId, String id, Integer height, Integer width) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserCouponPreviewValidateBeforeCall(advertiserId, id, height, width, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the preview of a specific Coupon
     * @param advertiserId The advertiser identifier. (required)
     * @param id The Coupon identifier to preview. (required)
     * @param height The height of the coupon to preview. (optional)
     * @param width The width of the coupon to preview. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The preview HTML of a specific Coupon is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponPreviewAsync(String advertiserId, String id, Integer height, Integer width, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserCouponPreviewValidateBeforeCall(advertiserId, id, height, width, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserCouponSupportedSizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponSupportedSizesCall(String advertiserId, String adSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons-supported-sizes"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ad-set-id", adSetId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserCouponSupportedSizesValidateBeforeCall(String advertiserId, String adSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserCouponSupportedSizes(Async)");
        }

        return getAdvertiserCouponSupportedSizesCall(advertiserId, adSetId, _callback);

    }

    /**
     * 
     * Get the list of Coupon supported sizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @return ResourceOutcomeOfCouponSupportedSizes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCouponSupportedSizes getAdvertiserCouponSupportedSizes(String advertiserId, String adSetId) throws ApiException {
        ApiResponse<ResourceOutcomeOfCouponSupportedSizes> localVarResp = getAdvertiserCouponSupportedSizesWithHttpInfo(advertiserId, adSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Coupon supported sizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @return ApiResponse&lt;ResourceOutcomeOfCouponSupportedSizes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCouponSupportedSizes> getAdvertiserCouponSupportedSizesWithHttpInfo(String advertiserId, String adSetId) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserCouponSupportedSizesValidateBeforeCall(advertiserId, adSetId, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCouponSupportedSizes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Coupon supported sizes
     * @param advertiserId The advertiser identifier. (required)
     * @param adSetId The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Coupon supported sizes is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponSupportedSizesAsync(String advertiserId, String adSetId, final ApiCallback<ResourceOutcomeOfCouponSupportedSizes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserCouponSupportedSizesValidateBeforeCall(advertiserId, adSetId, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCouponSupportedSizes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserCoupons
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponsCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/coupons"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserCouponsValidateBeforeCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserCoupons(Async)");
        }

        return getAdvertiserCouponsCall(advertiserId, limit, offset, _callback);

    }

    /**
     * 
     * Get the list of self-services Coupons for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @return ResourceCollectionOutcomeOfCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollectionOutcomeOfCoupon getAdvertiserCoupons(String advertiserId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ResourceCollectionOutcomeOfCoupon> localVarResp = getAdvertiserCouponsWithHttpInfo(advertiserId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of self-services Coupons for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @return ApiResponse&lt;ResourceCollectionOutcomeOfCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollectionOutcomeOfCoupon> getAdvertiserCouponsWithHttpInfo(String advertiserId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserCouponsValidateBeforeCall(advertiserId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ResourceCollectionOutcomeOfCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of self-services Coupons for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of coupons to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Coupons is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCouponsAsync(String advertiserId, Integer limit, Integer offset, final ApiCallback<ResourceCollectionOutcomeOfCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserCouponsValidateBeforeCall(advertiserId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollectionOutcomeOfCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvertiserCreatives
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCreativesCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/advertisers/{advertiser-id}/creatives"
            .replace("{" + "advertiser-id" + "}", localVarApiClient.escapeString(advertiserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvertiserCreativesValidateBeforeCall(String advertiserId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advertiserId' is set
        if (advertiserId == null) {
            throw new ApiException("Missing the required parameter 'advertiserId' when calling getAdvertiserCreatives(Async)");
        }

        return getAdvertiserCreativesCall(advertiserId, limit, offset, _callback);

    }

    /**
     * 
     * Get the list of self-services Creatives for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @return ResourceCollectionOutcomeOfCreative
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollectionOutcomeOfCreative getAdvertiserCreatives(String advertiserId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ResourceCollectionOutcomeOfCreative> localVarResp = getAdvertiserCreativesWithHttpInfo(advertiserId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of self-services Creatives for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @return ApiResponse&lt;ResourceCollectionOutcomeOfCreative&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollectionOutcomeOfCreative> getAdvertiserCreativesWithHttpInfo(String advertiserId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAdvertiserCreativesValidateBeforeCall(advertiserId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ResourceCollectionOutcomeOfCreative>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of self-services Creatives for a given advertiser
     * @param advertiserId The advertiser identifier. (required)
     * @param limit The number of creatives to be returned. The default is 50. (optional)
     * @param offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of self-services Creatives is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvertiserCreativesAsync(String advertiserId, Integer limit, Integer offset, final ApiCallback<ResourceCollectionOutcomeOfCreative> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvertiserCreativesValidateBeforeCall(advertiserId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollectionOutcomeOfCreative>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreative
     * @param id The creative identifier to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-04/marketing-solutions/creatives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreativeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCreative(Async)");
        }

        return getCreativeCall(id, _callback);

    }

    /**
     * 
     * Get a Creative with its id
     * @param id The creative identifier to retrieve. (required)
     * @return ResourceOutcomeOfCreative
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOutcomeOfCreative getCreative(String id) throws ApiException {
        ApiResponse<ResourceOutcomeOfCreative> localVarResp = getCreativeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Creative with its id
     * @param id The creative identifier to retrieve. (required)
     * @return ApiResponse&lt;ResourceOutcomeOfCreative&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOutcomeOfCreative> getCreativeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCreativeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCreative>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Creative with its id
     * @param id The creative identifier to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found creative is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request was not properly authorized. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> A non-request based error occurred on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreativeAsync(String id, final ApiCallback<ResourceOutcomeOfCreative> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreativeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceOutcomeOfCreative>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
