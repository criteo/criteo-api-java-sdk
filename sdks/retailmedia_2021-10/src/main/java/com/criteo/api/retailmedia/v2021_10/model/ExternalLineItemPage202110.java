/*
 * Criteo API
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2021_10.model;

import java.util.Objects;
import java.util.Arrays;
import com.criteo.api.retailmedia.v2021_10.model.ExternalLineItemPageCategory202110;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Page information for a preferred line item
 */
@ApiModel(description = "Page information for a preferred line item")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExternalLineItemPage202110 {
  /**
   * Gets or Sets pageType
   */
  @JsonAdapter(PageTypeEnum.Adapter.class)
  public enum PageTypeEnum {
    SEARCH("search"),
    
    HOME("home"),
    
    CHECKOUT("checkout"),
    
    CATEGORY("category"),
    
    PRODUCTDETAIL("productDetail"),
    
    CONFIRMATION("confirmation"),
    
    MERCHANDISING("merchandising"),
    
    DEALS("deals");

    private String value;

    PageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageTypeEnum fromValue(String value) {
      for (PageTypeEnum b : PageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAGE_TYPE = "pageType";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPE)
  private PageTypeEnum pageType;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<ExternalLineItemPageCategory202110> categories = null;

  public static final String SERIALIZED_NAME_SEARCH_KEYWORDS = "searchKeywords";
  @SerializedName(SERIALIZED_NAME_SEARCH_KEYWORDS)
  private List<String> searchKeywords = null;


  public ExternalLineItemPage202110 pageType(PageTypeEnum pageType) {
    
    this.pageType = pageType;
    return this;
  }

   /**
   * Get pageType
   * @return pageType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PageTypeEnum getPageType() {
    return pageType;
  }


  public void setPageType(PageTypeEnum pageType) {
    this.pageType = pageType;
  }


  public ExternalLineItemPage202110 categories(List<ExternalLineItemPageCategory202110> categories) {
    
    this.categories = categories;
    return this;
  }

  public ExternalLineItemPage202110 addCategoriesItem(ExternalLineItemPageCategory202110 categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ExternalLineItemPageCategory202110> getCategories() {
    return categories;
  }


  public void setCategories(List<ExternalLineItemPageCategory202110> categories) {
    this.categories = categories;
  }


  public ExternalLineItemPage202110 searchKeywords(List<String> searchKeywords) {
    
    this.searchKeywords = searchKeywords;
    return this;
  }

  public ExternalLineItemPage202110 addSearchKeywordsItem(String searchKeywordsItem) {
    if (this.searchKeywords == null) {
      this.searchKeywords = new ArrayList<>();
    }
    this.searchKeywords.add(searchKeywordsItem);
    return this;
  }

   /**
   * Get searchKeywords
   * @return searchKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSearchKeywords() {
    return searchKeywords;
  }


  public void setSearchKeywords(List<String> searchKeywords) {
    this.searchKeywords = searchKeywords;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalLineItemPage202110 externalLineItemPage202110 = (ExternalLineItemPage202110) o;
    return Objects.equals(this.pageType, externalLineItemPage202110.pageType) &&
        Objects.equals(this.categories, externalLineItemPage202110.categories) &&
        Objects.equals(this.searchKeywords, externalLineItemPage202110.searchKeywords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageType, categories, searchKeywords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalLineItemPage202110 {\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    searchKeywords: ").append(toIndentedString(searchKeywords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

