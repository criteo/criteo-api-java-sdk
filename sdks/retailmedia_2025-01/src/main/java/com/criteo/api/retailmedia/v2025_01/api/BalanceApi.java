/*
 * Criteo API
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: 2025-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.api.retailmedia.v2025_01.api;

import com.criteo.api.retailmedia.v2025_01.ApiCallback;
import com.criteo.api.retailmedia.v2025_01.ApiClient;
import com.criteo.api.retailmedia.v2025_01.ApiException;
import com.criteo.api.retailmedia.v2025_01.ApiResponse;
import com.criteo.api.retailmedia.v2025_01.Configuration;
import com.criteo.api.retailmedia.v2025_01.Pair;
import com.criteo.api.retailmedia.v2025_01.ProgressRequestBody;
import com.criteo.api.retailmedia.v2025_01.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.api.retailmedia.v2025_01.model.AddFundsToBalanceV2Request;
import com.criteo.api.retailmedia.v2025_01.model.BalanceCampaign202110PagedListResponse;
import com.criteo.api.retailmedia.v2025_01.model.BalanceResponseV2PagedListResponse;
import com.criteo.api.retailmedia.v2025_01.model.BalanceResponseV2Response;
import com.criteo.api.retailmedia.v2025_01.model.ChangeDatesOfBalanceV2Request;
import com.criteo.api.retailmedia.v2025_01.model.CreateBalanceV2Request;
import com.criteo.api.retailmedia.v2025_01.model.PageOfBalanceHistoryChangeDataCaptureV1;
import com.criteo.api.retailmedia.v2025_01.model.UpdateBalanceModelV2Request;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BalanceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BalanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BalanceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFundsByAccountAndBalanceId
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to add funds to (required)
     * @param addFundsToBalanceV2Request An object that represents the available options of adding funds to a balance. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFundsByAccountAndBalanceIdCall(String accountId, String balanceId, AddFundsToBalanceV2Request addFundsToBalanceV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFundsToBalanceV2Request;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/accounts/{account-id}/balances/{balance-id}/add-funds"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFundsByAccountAndBalanceIdValidateBeforeCall(String accountId, String balanceId, AddFundsToBalanceV2Request addFundsToBalanceV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addFundsByAccountAndBalanceId(Async)");
        }

        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling addFundsByAccountAndBalanceId(Async)");
        }

        return addFundsByAccountAndBalanceIdCall(accountId, balanceId, addFundsToBalanceV2Request, _callback);

    }

    /**
     * 
     * Add funds to a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to add funds to (required)
     * @param addFundsToBalanceV2Request An object that represents the available options of adding funds to a balance. (optional)
     * @return BalanceResponseV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponseV2Response addFundsByAccountAndBalanceId(String accountId, String balanceId, AddFundsToBalanceV2Request addFundsToBalanceV2Request) throws ApiException {
        ApiResponse<BalanceResponseV2Response> localVarResp = addFundsByAccountAndBalanceIdWithHttpInfo(accountId, balanceId, addFundsToBalanceV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Add funds to a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to add funds to (required)
     * @param addFundsToBalanceV2Request An object that represents the available options of adding funds to a balance. (optional)
     * @return ApiResponse&lt;BalanceResponseV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponseV2Response> addFundsByAccountAndBalanceIdWithHttpInfo(String accountId, String balanceId, AddFundsToBalanceV2Request addFundsToBalanceV2Request) throws ApiException {
        okhttp3.Call localVarCall = addFundsByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, addFundsToBalanceV2Request, null);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add funds to a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to add funds to (required)
     * @param addFundsToBalanceV2Request An object that represents the available options of adding funds to a balance. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFundsByAccountAndBalanceIdAsync(String accountId, String balanceId, AddFundsToBalanceV2Request addFundsToBalanceV2Request, final ApiCallback<BalanceResponseV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFundsByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, addFundsToBalanceV2Request, _callback);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeDatesByAccountAndBalanceId
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param changeDatesOfBalanceV2Request An object that represents the available options to modify schedule of a balance. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDatesByAccountAndBalanceIdCall(String accountId, String balanceId, ChangeDatesOfBalanceV2Request changeDatesOfBalanceV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeDatesOfBalanceV2Request;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/accounts/{account-id}/balances/{balance-id}/change-dates"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeDatesByAccountAndBalanceIdValidateBeforeCall(String accountId, String balanceId, ChangeDatesOfBalanceV2Request changeDatesOfBalanceV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changeDatesByAccountAndBalanceId(Async)");
        }

        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling changeDatesByAccountAndBalanceId(Async)");
        }

        return changeDatesByAccountAndBalanceIdCall(accountId, balanceId, changeDatesOfBalanceV2Request, _callback);

    }

    /**
     * 
     * Change dates of a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param changeDatesOfBalanceV2Request An object that represents the available options to modify schedule of a balance. (optional)
     * @return BalanceResponseV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponseV2Response changeDatesByAccountAndBalanceId(String accountId, String balanceId, ChangeDatesOfBalanceV2Request changeDatesOfBalanceV2Request) throws ApiException {
        ApiResponse<BalanceResponseV2Response> localVarResp = changeDatesByAccountAndBalanceIdWithHttpInfo(accountId, balanceId, changeDatesOfBalanceV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Change dates of a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param changeDatesOfBalanceV2Request An object that represents the available options to modify schedule of a balance. (optional)
     * @return ApiResponse&lt;BalanceResponseV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponseV2Response> changeDatesByAccountAndBalanceIdWithHttpInfo(String accountId, String balanceId, ChangeDatesOfBalanceV2Request changeDatesOfBalanceV2Request) throws ApiException {
        okhttp3.Call localVarCall = changeDatesByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, changeDatesOfBalanceV2Request, null);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change dates of a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param changeDatesOfBalanceV2Request An object that represents the available options to modify schedule of a balance. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDatesByAccountAndBalanceIdAsync(String accountId, String balanceId, ChangeDatesOfBalanceV2Request changeDatesOfBalanceV2Request, final ApiCallback<BalanceResponseV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeDatesByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, changeDatesOfBalanceV2Request, _callback);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBalanceByAccountId
     * @param accountId The account to create balances for (required)
     * @param createBalanceV2Request An object that represents the available options to set when creating a Retail Media Balance (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBalanceByAccountIdCall(String accountId, CreateBalanceV2Request createBalanceV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBalanceV2Request;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/accounts/{account-id}/balances"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBalanceByAccountIdValidateBeforeCall(String accountId, CreateBalanceV2Request createBalanceV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createBalanceByAccountId(Async)");
        }

        return createBalanceByAccountIdCall(accountId, createBalanceV2Request, _callback);

    }

    /**
     * 
     * Create balance for the given account id
     * @param accountId The account to create balances for (required)
     * @param createBalanceV2Request An object that represents the available options to set when creating a Retail Media Balance (optional)
     * @return BalanceResponseV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponseV2Response createBalanceByAccountId(String accountId, CreateBalanceV2Request createBalanceV2Request) throws ApiException {
        ApiResponse<BalanceResponseV2Response> localVarResp = createBalanceByAccountIdWithHttpInfo(accountId, createBalanceV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Create balance for the given account id
     * @param accountId The account to create balances for (required)
     * @param createBalanceV2Request An object that represents the available options to set when creating a Retail Media Balance (optional)
     * @return ApiResponse&lt;BalanceResponseV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponseV2Response> createBalanceByAccountIdWithHttpInfo(String accountId, CreateBalanceV2Request createBalanceV2Request) throws ApiException {
        okhttp3.Call localVarCall = createBalanceByAccountIdValidateBeforeCall(accountId, createBalanceV2Request, null);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create balance for the given account id
     * @param accountId The account to create balances for (required)
     * @param createBalanceV2Request An object that represents the available options to set when creating a Retail Media Balance (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBalanceByAccountIdAsync(String accountId, CreateBalanceV2Request createBalanceV2Request, final ApiCallback<BalanceResponseV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBalanceByAccountIdValidateBeforeCall(accountId, createBalanceV2Request, _callback);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBalanceByAccountAndBalanceId
     * @param accountId The account of the balance (required)
     * @param balanceId The balance id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceByAccountAndBalanceIdCall(String accountId, String balanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/accounts/{account-id}/balances/{balance-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceByAccountAndBalanceIdValidateBeforeCall(String accountId, String balanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBalanceByAccountAndBalanceId(Async)");
        }

        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling getBalanceByAccountAndBalanceId(Async)");
        }

        return getBalanceByAccountAndBalanceIdCall(accountId, balanceId, _callback);

    }

    /**
     * 
     * Get a balance for the given account id and balance id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance id (required)
     * @return BalanceResponseV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponseV2Response getBalanceByAccountAndBalanceId(String accountId, String balanceId) throws ApiException {
        ApiResponse<BalanceResponseV2Response> localVarResp = getBalanceByAccountAndBalanceIdWithHttpInfo(accountId, balanceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a balance for the given account id and balance id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance id (required)
     * @return ApiResponse&lt;BalanceResponseV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponseV2Response> getBalanceByAccountAndBalanceIdWithHttpInfo(String accountId, String balanceId) throws ApiException {
        okhttp3.Call localVarCall = getBalanceByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, null);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a balance for the given account id and balance id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceByAccountAndBalanceIdAsync(String accountId, String balanceId, final ApiCallback<BalanceResponseV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, _callback);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBalanceHistory
     * @param balanceId Balance id. (required)
     * @param limit The number of elements to be returned. (optional, default to 25)
     * @param limitToChangeTypes Comma separated change types string that will be queried. (optional)
     * @param offset The (zero-based) starting offset in the collection. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceHistoryCall(String balanceId, Integer limit, String limitToChangeTypes, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/balances/{balanceId}/history"
            .replace("{" + "balanceId" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitToChangeTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitToChangeTypes", limitToChangeTypes));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceHistoryValidateBeforeCall(String balanceId, Integer limit, String limitToChangeTypes, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling getBalanceHistory(Async)");
        }

        return getBalanceHistoryCall(balanceId, limit, limitToChangeTypes, offset, _callback);

    }

    /**
     * 
     * Gets the balance&#39;s historical change data.
     * @param balanceId Balance id. (required)
     * @param limit The number of elements to be returned. (optional, default to 25)
     * @param limitToChangeTypes Comma separated change types string that will be queried. (optional)
     * @param offset The (zero-based) starting offset in the collection. (optional, default to 0)
     * @return PageOfBalanceHistoryChangeDataCaptureV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PageOfBalanceHistoryChangeDataCaptureV1 getBalanceHistory(String balanceId, Integer limit, String limitToChangeTypes, Integer offset) throws ApiException {
        ApiResponse<PageOfBalanceHistoryChangeDataCaptureV1> localVarResp = getBalanceHistoryWithHttpInfo(balanceId, limit, limitToChangeTypes, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the balance&#39;s historical change data.
     * @param balanceId Balance id. (required)
     * @param limit The number of elements to be returned. (optional, default to 25)
     * @param limitToChangeTypes Comma separated change types string that will be queried. (optional)
     * @param offset The (zero-based) starting offset in the collection. (optional, default to 0)
     * @return ApiResponse&lt;PageOfBalanceHistoryChangeDataCaptureV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfBalanceHistoryChangeDataCaptureV1> getBalanceHistoryWithHttpInfo(String balanceId, Integer limit, String limitToChangeTypes, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getBalanceHistoryValidateBeforeCall(balanceId, limit, limitToChangeTypes, offset, null);
        Type localVarReturnType = new TypeToken<PageOfBalanceHistoryChangeDataCaptureV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the balance&#39;s historical change data.
     * @param balanceId Balance id. (required)
     * @param limit The number of elements to be returned. (optional, default to 25)
     * @param limitToChangeTypes Comma separated change types string that will be queried. (optional)
     * @param offset The (zero-based) starting offset in the collection. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceHistoryAsync(String balanceId, Integer limit, String limitToChangeTypes, Integer offset, final ApiCallback<PageOfBalanceHistoryChangeDataCaptureV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceHistoryValidateBeforeCall(balanceId, limit, limitToChangeTypes, offset, _callback);
        Type localVarReturnType = new TypeToken<PageOfBalanceHistoryChangeDataCaptureV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBalancesByAccountId
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalancesByAccountIdCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/accounts/{account-id}/balances"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalancesByAccountIdValidateBeforeCall(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBalancesByAccountId(Async)");
        }

        return getBalancesByAccountIdCall(accountId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return BalanceResponseV2PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponseV2PagedListResponse getBalancesByAccountId(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<BalanceResponseV2PagedListResponse> localVarResp = getBalancesByAccountIdWithHttpInfo(accountId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;BalanceResponseV2PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponseV2PagedListResponse> getBalancesByAccountIdWithHttpInfo(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getBalancesByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<BalanceResponseV2PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of balance objects for the given account id
     * @param accountId The account to get balances for (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalancesByAccountIdAsync(String accountId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<BalanceResponseV2PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalancesByAccountIdValidateBeforeCall(accountId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BalanceResponseV2PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignsByBalanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsByBalanceIdCall(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/balances/{balance-id}/campaigns"
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "limitToId", limitToId));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignsByBalanceIdValidateBeforeCall(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling getCampaignsByBalanceId(Async)");
        }

        return getCampaignsByBalanceIdCall(balanceId, limitToId, pageIndex, pageSize, _callback);

    }

    /**
     * 
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return BalanceCampaign202110PagedListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceCampaign202110PagedListResponse getCampaignsByBalanceId(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        ApiResponse<BalanceCampaign202110PagedListResponse> localVarResp = getCampaignsByBalanceIdWithHttpInfo(balanceId, limitToId, pageIndex, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @return ApiResponse&lt;BalanceCampaign202110PagedListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceCampaign202110PagedListResponse> getCampaignsByBalanceIdWithHttpInfo(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCampaignsByBalanceIdValidateBeforeCall(balanceId, limitToId, pageIndex, pageSize, null);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets page of campaigns for the given balanceId
     * @param balanceId The balance to get campaigns from (required)
     * @param limitToId The ids that you would like to limit your result set to (optional)
     * @param pageIndex The 0 indexed page index you would like to receive given the page size (optional, default to 0)
     * @param pageSize The maximum number of items you would like to receive in this request (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsByBalanceIdAsync(String balanceId, List<String> limitToId, Integer pageIndex, Integer pageSize, final ApiCallback<BalanceCampaign202110PagedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignsByBalanceIdValidateBeforeCall(balanceId, limitToId, pageIndex, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BalanceCampaign202110PagedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyBalanceByAccountAndBalanceId
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param updateBalanceModelV2Request An object that represents the available options to modify a balance. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyBalanceByAccountAndBalanceIdCall(String accountId, String balanceId, UpdateBalanceModelV2Request updateBalanceModelV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBalanceModelV2Request;

        // create path and map variables
        String localVarPath = "/2025-01/retail-media/accounts/{account-id}/balances/{balance-id}"
            .replace("{" + "account-id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "balance-id" + "}", localVarApiClient.escapeString(balanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyBalanceByAccountAndBalanceIdValidateBeforeCall(String accountId, String balanceId, UpdateBalanceModelV2Request updateBalanceModelV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling modifyBalanceByAccountAndBalanceId(Async)");
        }

        // verify the required parameter 'balanceId' is set
        if (balanceId == null) {
            throw new ApiException("Missing the required parameter 'balanceId' when calling modifyBalanceByAccountAndBalanceId(Async)");
        }

        return modifyBalanceByAccountAndBalanceIdCall(accountId, balanceId, updateBalanceModelV2Request, _callback);

    }

    /**
     * 
     * Modify a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param updateBalanceModelV2Request An object that represents the available options to modify a balance. (optional)
     * @return BalanceResponseV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponseV2Response modifyBalanceByAccountAndBalanceId(String accountId, String balanceId, UpdateBalanceModelV2Request updateBalanceModelV2Request) throws ApiException {
        ApiResponse<BalanceResponseV2Response> localVarResp = modifyBalanceByAccountAndBalanceIdWithHttpInfo(accountId, balanceId, updateBalanceModelV2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param updateBalanceModelV2Request An object that represents the available options to modify a balance. (optional)
     * @return ApiResponse&lt;BalanceResponseV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponseV2Response> modifyBalanceByAccountAndBalanceIdWithHttpInfo(String accountId, String balanceId, UpdateBalanceModelV2Request updateBalanceModelV2Request) throws ApiException {
        okhttp3.Call localVarCall = modifyBalanceByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, updateBalanceModelV2Request, null);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify a balance for the given account id
     * @param accountId The account of the balance (required)
     * @param balanceId The balance to change the dates (required)
     * @param updateBalanceModelV2Request An object that represents the available options to modify a balance. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyBalanceByAccountAndBalanceIdAsync(String accountId, String balanceId, UpdateBalanceModelV2Request updateBalanceModelV2Request, final ApiCallback<BalanceResponseV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyBalanceByAccountAndBalanceIdValidateBeforeCall(accountId, balanceId, updateBalanceModelV2Request, _callback);
        Type localVarReturnType = new TypeToken<BalanceResponseV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
